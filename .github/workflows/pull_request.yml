name: On pull request

on:
  pull_request:
    branches:
      - py3

concurrency:
  group: ci-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  py3-type:
    name: "[py3] Type Check"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r src/requirements.txt
      - name: Run Type Check
        run: ./ops/typecheck_py3.sh
  py3-lint:
    name: "[py3] Format & Lint"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r src/requirements.txt
      - name: Run Format & Lint
        run: ./ops/lint_py3.sh
  py3-test:
    name: "[py3] Test"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        group: [1, 2, 3]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r src/requirements.txt
      - name: Run Tests
        run: ./ops/test_py3.sh --cov --splits 3 --group ${{ matrix.group }}
      - name: Save coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage${{ matrix.group }}
          path: .coverage
  py3-coverage:
    name: "[py3] Coverage"
    runs-on: ubuntu-latest
    needs: [py3-test]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      - name: Combine coverage
        run: |
          coverage combine coverage*/.coverage*
          coverage xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4.5.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage.xml
  node-lint:
    name: "[node] Format & Lint"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4.0.3
        with:
          node-version: "18"
          cache: "npm"
      - name: Install Dependencies
        run: npm ci
      - name: Run Format & Lint
        run: ./ops/lint_node.sh
  node-test:
    name: "[node] Test"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4.0.3
        with:
          node-version: "18"
          cache: "npm"
      - name: Install Dependencies
        run: npm ci
      - name: Run Tests
        run: ./ops/test_node.sh
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4.5.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./.node_coverage/
  pwa-lint:
    name: "[pwa] Format & Lint"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4.0.3
        with:
          node-version: "20"
          cache: "npm"
      - name: Install Dependencies
        run: npm --prefix pwa ci
      - name: Run Format
        run: npm --prefix pwa run format:check
      - name: Run Lint
        run: npm --prefix pwa run lint
  pwa-type:
    name: "[pwa] Type Check"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4.0.3
        with:
          node-version: "20"
          cache: "npm"
      - name: Install Dependencies
        run: npm --prefix pwa ci
      - name: Run Type Check
        run: npm --prefix pwa run typecheck
  pwa-build:
    name: "[pwa] Build"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4.0.3
        with:
          node-version: "20"
          cache: "npm"
      - name: Install Dependencies
        run: npm --prefix pwa ci
      - name: Run Build
        run: npm --prefix pwa run build
  bash-lint:
    name: "[bash] Lint"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - name: Install Shellcheck
        run: |
          python -m pip install --upgrade pip
          pip install shellcheck-py
      - name: Install shfmt
        run: |
          mkdir -p $HOME/.local/bin
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          wget "https://github.com/mvdan/sh/releases/download/v3.2.2/shfmt_v3.2.2_linux_amd64" -O $HOME/.local/bin/shfmt
          chmod +x $HOME/.local/bin/shfmt
      - name: Run Lint
        run: ./ops/lint_bash.sh

  build-web:
    name: Build Web
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Set up Node
        uses: actions/setup-node@v4.0.3
        with:
          node-version: "18"
          cache: "npm"
      - name: Install Node Dependencies
        run: npm ci
      - name: Run Build
        run: ./ops/build/run_buildweb.sh --env

  ops-test:
    name: Ops Fullstack Test
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            web:
              - 'ops/**'
              - 'src/**'
      - name: Set up Python 3.12
        if: steps.changes.outputs.web == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - name: Install Python Dependencies
        if: steps.changes.outputs.web == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Set up Node
        if: steps.changes.outputs.web == 'true'
        uses: actions/setup-node@v4.0.3
        with:
          node-version: "18"
          cache: "npm"
      - name: Install Node Dependencies
        if: steps.changes.outputs.web == 'true'
        run: |
          npm ci
          npm install -g capture-website-cli
      - name: Install Vagrant
        if: steps.changes.outputs.web == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install vagrant
      - name: Create keys file
        if: steps.changes.outputs.web == 'true'
        run: cp ./src/backend/web/static/javascript/tba_js/tba_keys_template.js ./src/backend/web/static/javascript/tba_js/tba_keys.js
      - name: Set up Docker Buildx
        if: steps.changes.outputs.web == 'true'
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
      - name: Build Docker Image
        if: steps.changes.outputs.web == 'true'
        uses: docker/build-push-action@v6.6.1
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./ops/dev/docker
          push: true
          tags: localhost:5000/tba-py3-dev:latest
          cache-from: |
            type=gha
            ghcr.io/the-blue-alliance/the-blue-alliance/tba-py3-dev:latest
          cache-to: type=gha,mode=max
      - name: Start Container
        if: steps.changes.outputs.web == 'true'
        run: vagrant up
      - name: Test Vagrant Startup
        if: steps.changes.outputs.web == 'true'
        run: ./ops/test_vagrant_startup.py
      - name: Test Ops Fullstack
        if: steps.changes.outputs.web == 'true'
        run: ./ops/test_ops.sh
      - name: Capture screenshots
        if: steps.changes.outputs.web == 'true'
        run: ./ops/pr_screenshots/capture_screenshots.py
      - name: Upload screenshots artifact
        if: steps.changes.outputs.web == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ci_screenshots
          path: ci_screenshots.pickle
