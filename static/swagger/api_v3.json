{
  "swagger": "2.0",
  "info": {
    "description": "# Overview \n\n Information and statistics about FIRST Robotics Competition teams and events. \n\n# Authentication \n\nAll endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account). \n\n A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.",
    "version": "3.03.1",
    "title": "The Blue Alliance API v3",
    "x-version-info": "Versions of the API follow the format X.Y.Z, with X being a major version, Y denoting the minor version, and Z the point release. Changes to the spec or API that result in a major version change will significantly impact implementations. Changes to the minor version indicate paths and/or fields in existing models may be added, and any breaking changes will be confined to paths or models listed as in-development in the prior minor version. Changes to the point release indicate no format or structure changes to the paths or models, but updated or clarified documentation. Note that changes to paths and models refer to the actual result from the API, not the documentation.",
    "x-changes": "3.03.0 - 3.03.1: Fix model of /team/{team_key}/robots to match API, add min and max for year and add min for page_num. 3.02.1 - 3.03.0: Added Timeseries models and endpoints. 3.02.0 - 3.02.1: Fixed the model for `/team/{team_key}/districts` to match return from API. 3.1.0 - 3.02.0: Added `tba_gameData` to score breakdown and a leading zero to the minor version number to allow for easier sorting later. 3.0.5 - 3.1.0: Version bump for 2018 added fields and endpoints. Models Updated: `Team_Event_Status`, `Media`, 2018 Score Breakdowns. Endpoints Added: `/team/{team_key}/events/{year}/statuses`, `/event/{event_key}/teams/statuses` 3.0.4 - 3.0.5: Minor spelling fixes. Remove 2016 fields from `Match_Score_Breakdown_2017_Alliance` model. Fix `first_event_id` in `Event` model to correct type. Update `Media`.`type` enum. --- 3.0.3 - 3.0.4: Correct syntax in `Team_Event_Status_playoff` object, include descriptions in `Event_District_Points` and fix the path in `Team_Event_Status_playoff.properties.record` in order to more closely match Swagger spec. Fix syntax of `Match.video` to be correct and accurately reflect what is returned by the API. --- 3.0.2 - 3.0.3: `extra_stats` and `extra_stats_info` added to `Event_Ranking` model. Corrected match video property claiming to use the `Media` model, which it doesn't. Added `first_event_code` to the `Event` model. Added `/team/{team_key}/media/tag/{media_tag}` and year endpoints. Added `dq_team_keys` to `Match_alliance` model.  --- 3.0.1 - 3.0.2: `Team_Event_Status` and `Event_Ranking` model documentation changed to reflect actual API return. Changes involved W-L-T and ranking properties. --- 3.0.0 - 3.0.1: Descriptions updated to clarify some terms and improve grammar. The `district` property on the `Event` object now points to the `District_List` model, which was identical. `Required` fields on fully documented models now represent fields that may not be `null`. `District_Ranking` model documented."
  },
  "host": "www.thebluealliance.com",
  "basePath": "/api/v3",
  "tags": [
    {
      "name": "TBA",
      "description": "Calls that expose TBA internals or status."
    },
    {
      "name": "list",
      "description": "Calls that return a list of records."
    },
    {
      "name": "team",
      "description": "Calls that return team or team-specific information."
    },
    {
      "name": "event",
      "description": "Calls that return event, or event-specific information."
    },
    {
      "name": "match",
      "description": "Calls that return match, or match-specific information."
    },
    {
      "name": "district",
      "description": "Calls that return district, or district-related information."
    }
  ],
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "apiKey": {
      "description": "Your TBA v3 API Key can be obtained from your [Account Page](/account) on the TBA website.",
      "type": "apiKey",
      "name": "X-TBA-Auth-Key",
      "in": "header"
    }
  },
  "parameters": {
    "If-Modified-Since": {
      "name": "If-Modified-Since",
      "in": "header",
      "description": "Value of the `Last-Modified` header in the most recently cached response by the client.",
      "required": false,
      "type": "string"
    },
    "page_num": {
      "name": "page_num",
      "in": "path",
      "description": "Page number of results to return, zero-indexed",
      "required": true,
      "type": "integer"
    },
    "year": {
      "name": "year",
      "in": "path",
      "description": "Competition Year (or Season). Must be 4 digits.",
      "required": true,
      "type": "integer"
    },
    "media_tag": {
      "name": "media_tag",
      "in": "path",
      "description": "Media Tag which describes the Media.",
      "required": true,
      "type": "string"
    },
    "team_key": {
      "name": "team_key",
      "in": "path",
      "description": "TBA Team Key, eg `frc254`",
      "required": true,
      "type": "string"
    },
    "event_key": {
      "name": "event_key",
      "in": "path",
      "description": "TBA Event Key, eg `2016nytr`",
      "required": true,
      "type": "string"
    },
    "match_key": {
      "name": "match_key",
      "in": "path",
      "description": "TBA Match Key, eg `2016nytr_qm1`",
      "required": true,
      "type": "string"
    },
    "district_key": {
      "name": "district_key",
      "in": "path",
      "description": "TBA District Key, eg `2016fim`",
      "required": true,
      "type": "string"
    }
  },
  "responses": {
    "Unauthorized": {
      "description": "Not Authorized - No TBA v3 API Key was provided, or it is not valid."
    },
    "NotModified": {
      "description": "Not Modified - Use Local Cached Value"
    }
  },
  "paths": {
    "/status": {
      "get": {
        "operationId": "getStatus",
        "tags": [
          "TBA"
        ],
        "description": "Returns API status, and TBA status information.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/API_Status"
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/teams/{page_num}": {
      "get": {
        "operationId": "getTeams",
        "tags": [
          "team",
          "list"
        ],
        "description": "Gets a list of `Team` objects, paginated in groups of 500.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/page_num"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/teams/{page_num}/simple": {
      "x-comment": "Simple (non-full) responses need a separate path definition. See also https://github.com/OAI/OpenAPI-Specification/issues/270",
      "get": {
        "operationId": "getTeamsSimple",
        "tags": [
          "team",
          "list"
        ],
        "description": "Gets a list of short form `Team_Simple` objects, paginated in groups of 500.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/page_num"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team_Simple"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/teams/{page_num}/keys": {
      "get": {
        "operationId": "getTeamsKeys",
        "tags": [
          "team",
          "list"
        ],
        "description": "Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/page_num"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/teams/{year}/{page_num}": {
      "get": {
        "operationId": "getTeamsByYear",
        "tags": [
          "team",
          "list"
        ],
        "description": "Gets a list of `Team` objects that competed in the given year, paginated in groups of 500.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/year"
          },
          {
            "$ref": "#/parameters/page_num"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/teams/{year}/{page_num}/simple": {
      "get": {
        "operationId": "getTeamsByYearSimple",
        "tags": [
          "team",
          "list"
        ],
        "description": "Gets a list of short form `Team_Simple` objects that competed in the given year, paginated in groups of 500.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/year"
          },
          {
            "$ref": "#/parameters/page_num"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team_Simple"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/teams/{year}/{page_num}/keys": {
      "get": {
        "operationId": "getTeamsByYearKeys",
        "tags": [
          "team",
          "list"
        ],
        "description": "Gets a list Team Keys that competed in the given year, paginated in groups of 500.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/year"
          },
          {
            "$ref": "#/parameters/page_num"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "description": "Array of Team Keys",
              "items": {
                "type": "string"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}": {
      "get": {
        "operationId": "getTeam",
        "tags": [
          "team"
        ],
        "description": "Gets a `Team` object for the team referenced by the given key.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Team"
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}/simple": {
      "get": {
        "operationId": "getTeamSimple",
        "tags": [
          "team"
        ],
        "description": "Gets a `Team_Simple` object for the team referenced by the given key.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Team_Simple"
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}/years_participated": {
      "get": {
        "operationId": "getTeamYearsParticipated",
        "tags": [
          "team"
        ],
        "description": "Gets a list of years in which the team participated in at least one competition.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}/districts": {
      "get": {
        "operationId": "getTeamDistricts",
        "tags": [
          "team",
          "district"
        ],
        "description": "Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/District_List"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}/robots": {
      "get": {
        "operationId": "getTeamRobots",
        "tags": [
          "team"
        ],
        "description": "Gets a list of year and robot name pairs for each year that a robot name was provided. Will return an empty array if the team has never named a robot.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team_Robot"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}/events": {
      "get": {
        "operationId": "getTeamEvents",
        "tags": [
          "team",
          "event"
        ],
        "description": "Gets a list of all events this team has competed at.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}/events/simple": {
      "get": {
        "operationId": "getTeamEventsSimple",
        "tags": [
          "team",
          "event"
        ],
        "description": "Gets a short-form list of all events this team has competed at.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event_Simple"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}/events/keys": {
      "get": {
        "operationId": "getTeamEventsKeys",
        "tags": [
          "team",
          "event"
        ],
        "description": "Gets a list of the event keys for all events this team has competed at.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "description": "Array of Event Keys",
              "items": {
                "type": "string"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}/events/{year}": {
      "get": {
        "operationId": "getTeamEventsByYear",
        "tags": [
          "team",
          "event"
        ],
        "description": "Gets a list of events this team has competed at in the given year.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          },
          {
            "$ref": "#/parameters/year"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}/events/{year}/simple": {
      "get": {
        "operationId": "getTeamEventsByYearSimple",
        "tags": [
          "team",
          "event"
        ],
        "description": "Gets a short-form list of events this team has competed at in the given year.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          },
          {
            "$ref": "#/parameters/year"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event_Simple"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}/events/{year}/keys": {
      "get": {
        "operationId": "getTeamEventsByYearKeys",
        "tags": [
          "team",
          "event"
        ],
        "description": "Gets a list of the event keys for events this team has competed at in the given year.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          },
          {
            "$ref": "#/parameters/year"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "description": "Array of Event Keys",
              "items": {
                "type": "string"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}/events/{year}/statuses": {
      "get": {
        "operationId": "getTeamEventsStatusesByYear",
        "tags": [
          "list",
          "team",
          "event"
        ],
        "description": "Gets a key-value list of the event statuses for events this team has competed at in the given year.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          },
          {
            "$ref": "#/parameters/year"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "description": "A key-value pair of `Team_Event_Status` objects with the event key as the key.",
              "additionalProperties": {
                "$ref": "#/definitions/Team_Event_Status"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}/event/{event_key}/matches": {
      "get": {
        "operationId": "getTeamEventMatches",
        "tags": [
          "team",
          "event",
          "match"
        ],
        "description": "Gets a list of matches for the given team and event.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          },
          {
            "$ref": "#/parameters/event_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Match"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}/event/{event_key}/matches/simple": {
      "get": {
        "operationId": "getTeamEventMatchesSimple",
        "tags": [
          "team",
          "event",
          "match"
        ],
        "description": "Gets a short-form list of matches for the given team and event.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          },
          {
            "$ref": "#/parameters/event_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Match"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}/event/{event_key}/matches/keys": {
      "get": {
        "operationId": "getTeamEventMatchesKeys",
        "tags": [
          "team",
          "event",
          "match"
        ],
        "description": "Gets a list of match keys for matches for the given team and event.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          },
          {
            "$ref": "#/parameters/event_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "description": "Array of Match Keys",
              "items": {
                "type": "string"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}/event/{event_key}/awards": {
      "get": {
        "operationId": "getTeamEventAwards",
        "tags": [
          "team",
          "event"
        ],
        "description": "Gets a list of awards the given team won at the given event.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          },
          {
            "$ref": "#/parameters/event_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Award"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}/event/{event_key}/status": {
      "get": {
        "operationId": "getTeamEventStatus",
        "tags": [
          "team",
          "event"
        ],
        "description": "Gets the competition rank and status of the team at the given event.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          },
          {
            "$ref": "#/parameters/event_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Team_Event_Status"
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}/awards": {
      "get": {
        "operationId": "getTeamAwards",
        "tags": [
          "team"
        ],
        "description": "Gets a list of awards the given team has won.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Award"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}/awards/{year}": {
      "get": {
        "operationId": "getTeamAwardsByYear",
        "tags": [
          "team"
        ],
        "description": "Gets a list of awards the given team has won in a given year.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          },
          {
            "$ref": "#/parameters/year"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Award"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}/matches/{year}": {
      "get": {
        "operationId": "getTeamMatchesByYear",
        "tags": [
          "team",
          "match"
        ],
        "description": "Gets a list of matches for the given team and year.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          },
          {
            "$ref": "#/parameters/year"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Match"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}/matches/{year}/simple": {
      "get": {
        "operationId": "getTeamMatchesByYearSimple",
        "tags": [
          "team",
          "match"
        ],
        "description": "Gets a short-form list of matches for the given team and year.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          },
          {
            "$ref": "#/parameters/year"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Match_Simple"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}/matches/{year}/keys": {
      "get": {
        "operationId": "getTeamMatchesByYearKeys",
        "tags": [
          "team",
          "match"
        ],
        "description": "Gets a list of match keys for matches for the given team and year.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          },
          {
            "$ref": "#/parameters/year"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "description": "Array of Match Keys",
              "items": {
                "type": "string"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}/media/{year}": {
      "get": {
        "operationId": "getTeamMediaByYear",
        "tags": [
          "team"
        ],
        "description": "Gets a list of Media (videos / pictures) for the given team and year.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          },
          {
            "$ref": "#/parameters/year"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Media"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}/media/tag/{media_tag}": {
      "get": {
        "operationId": "getTeamMediaByTag",
        "tags": [
          "team"
        ],
        "description": "Gets a list of Media (videos / pictures) for the given team and tag.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          },
          {
            "$ref": "#/parameters/media_tag"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Media"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}/media/tag/{media_tag}/{year}": {
      "get": {
        "operationId": "getTeamMediaByTagYear",
        "tags": [
          "team"
        ],
        "description": "Gets a list of Media (videos / pictures) for the given team, tag and year.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          },
          {
            "$ref": "#/parameters/media_tag"
          },
          {
            "$ref": "#/parameters/year"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Media"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/team/{team_key}/social_media": {
      "get": {
        "operationId": "getTeamSocialMedia",
        "tags": [
          "team"
        ],
        "description": "Gets a list of Media (social media) for the given team.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/team_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Media"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/events/{year}": {
      "get": {
        "operationId": "getEventsByYear",
        "tags": [
          "event",
          "list"
        ],
        "description": "Gets a list of events in the given year.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/year"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/events/{year}/simple": {
      "get": {
        "operationId": "getEventsByYearSimple",
        "tags": [
          "event",
          "list"
        ],
        "description": "Gets a short-form list of events in the given year.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/year"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event_Simple"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/events/{year}/keys": {
      "get": {
        "operationId": "getEventsByYearKeys",
        "tags": [
          "event",
          "list"
        ],
        "description": "Gets a list of event keys in the given year.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/year"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "description": "Array of Event Keys",
              "items": {
                "type": "string"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/event/{event_key}": {
      "get": {
        "operationId": "getEvent",
        "tags": [
          "event"
        ],
        "description": "Gets an Event.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/event_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Event"
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/event/{event_key}/simple": {
      "get": {
        "operationId": "getEventSimple",
        "tags": [
          "event"
        ],
        "description": "Gets a short-form Event.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/event_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Event_Simple"
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/event/{event_key}/alliances": {
      "get": {
        "operationId": "getEventAlliances",
        "tags": [
          "event"
        ],
        "description": "Gets a list of Elimination Alliances for the given Event.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/event_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Elimination_Alliance"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/event/{event_key}/insights": {
      "get": {
        "operationId": "getEventInsights",
        "tags": [
          "event"
        ],
        "description": "Gets a set of Event-specific insights for the given Event.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/event_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Event_Insights"
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/event/{event_key}/oprs": {
      "get": {
        "operationId": "getEventOPRs",
        "tags": [
          "event"
        ],
        "description": "Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/event_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Event_OPRs"
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/event/{event_key}/predictions": {
      "get": {
        "operationId": "getEventPredictions",
        "tags": [
          "event"
        ],
        "description": "Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/event_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Event_Predictions"
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/event/{event_key}/rankings": {
      "get": {
        "operationId": "getEventRankings",
        "tags": [
          "event"
        ],
        "description": "Gets a list of team rankings for the Event.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/event_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Event_Ranking"
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/event/{event_key}/district_points": {
      "get": {
        "operationId": "getEventDistrictPoints",
        "tags": [
          "event",
          "district"
        ],
        "description": "Gets a list of team rankings for the Event.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/event_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Event_District_Points"
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/event/{event_key}/teams": {
      "get": {
        "operationId": "getEventTeams",
        "tags": [
          "event",
          "team",
          "list"
        ],
        "description": "Gets a list of `Team` objects that competed in the given event.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/event_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/event/{event_key}/teams/simple": {
      "get": {
        "operationId": "getEventTeamsSimple",
        "tags": [
          "event",
          "team",
          "list"
        ],
        "description": "Gets a short-form list of `Team` objects that competed in the given event.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/event_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team_Simple"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/event/{event_key}/teams/keys": {
      "get": {
        "operationId": "getEventTeamsKeys",
        "tags": [
          "event",
          "team",
          "list"
        ],
        "description": "Gets a list of `Team` keys that competed in the given event.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/event_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "description": "Array of Team Keys",
              "items": {
                "type": "string"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/event/{event_key}/teams/statuses": {
      "get": {
        "operationId": "getEventTeamsStatuses",
        "tags": [
          "event",
          "team",
          "list"
        ],
        "description": "Gets a key-value list of the event statuses for teams competing at the given event.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/event_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "description": "A key-value pair of `Team_Event_Status` objects with the event key as the key.",
              "additionalProperties": {
                "$ref": "#/definitions/Team_Event_Status"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/event/{event_key}/matches": {
      "get": {
        "operationId": "getEventMatches",
        "tags": [
          "event",
          "match"
        ],
        "description": "Gets a list of matches for the given event.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/event_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Match"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/event/{event_key}/matches/simple": {
      "get": {
        "operationId": "getEventMatchesSimple",
        "tags": [
          "event",
          "match"
        ],
        "description": "Gets a short-form list of matches for the given event.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/event_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Match_Simple"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/event/{event_key}/matches/keys": {
      "get": {
        "operationId": "getEventMatchesKeys",
        "tags": [
          "event",
          "match"
        ],
        "description": "Gets a list of match keys for the given event.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/event_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "description": "Array of Match Keys",
              "items": {
                "type": "string"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/event/{event_key}/matches/timeseries": {
      "get": {
        "operationId": "getEventMatchTimeseries",
        "tags": [
          "event",
          "match"
        ],
        "description": "Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data.\n*WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up.\n*WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/event_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "description": "Match Key",
                "type": "string"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/event/{event_key}/awards": {
      "get": {
        "operationId": "getEventAwards",
        "tags": [
          "event"
        ],
        "description": "Gets a list of awards from the given event.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/event_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Award"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/match/{match_key}": {
      "get": {
        "operationId": "getMatch",
        "tags": [
          "match"
        ],
        "description": "Gets a `Match` object for the given match key.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/match_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Match"
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/match/{match_key}/simple": {
      "get": {
        "operationId": "getMatchSimple",
        "tags": [
          "match"
        ],
        "description": "Gets a short-form `Match` object for the given match key.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/match_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Match_Simple"
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/match/{match_key}/timeseries": {
      "get": {
        "operationId": "getMatchTimeseries",
        "tags": [
          "match"
        ],
        "description": "Gets an array of game-specific Match Timeseries objects for the given match key or an empty array if not available.\n*WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up.\n*WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/match_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/districts/{year}": {
      "get": {
        "operationId": "getDistrictsByYear",
        "tags": [
          "district"
        ],
        "description": "Gets a list of districts and their corresponding district key, for the given year.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/year"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/District_List"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/district/{district_key}/events": {
      "get": {
        "operationId": "getDistrictEvents",
        "tags": [
          "district",
          "event",
          "list"
        ],
        "description": "Gets a list of events in the given district.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/district_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/district/{district_key}/events/simple": {
      "get": {
        "operationId": "getDistrictEventsSimple",
        "tags": [
          "district",
          "event",
          "list"
        ],
        "description": "Gets a short-form list of events in the given district.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/district_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event_Simple"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/district/{district_key}/events/keys": {
      "get": {
        "operationId": "getDistrictEventsKeys",
        "tags": [
          "district",
          "event",
          "list"
        ],
        "description": "Gets a list of event keys for events in the given district.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/district_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "description": "Array of Event Keys",
              "items": {
                "type": "string"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/district/{district_key}/teams": {
      "get": {
        "operationId": "getDistrictTeams",
        "tags": [
          "district",
          "team",
          "list"
        ],
        "description": "Gets a list of `Team` objects that competed in events in the given district.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/district_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/district/{district_key}/teams/simple": {
      "get": {
        "operationId": "getDistrictTeamsSimple",
        "tags": [
          "district",
          "team",
          "list"
        ],
        "description": "Gets a short-form list of `Team` objects that competed in events in the given district.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/district_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team_Simple"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/district/{district_key}/teams/keys": {
      "get": {
        "operationId": "getDistrictTeamsKeys",
        "tags": [
          "district",
          "team",
          "list"
        ],
        "description": "Gets a list of `Team` objects that competed in events in the given district.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/district_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "description": "Array of Team Keys",
              "items": {
                "type": "string"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/district/{district_key}/rankings": {
      "get": {
        "operationId": "getDistrictRankings",
        "tags": [
          "district",
          "team",
          "list"
        ],
        "description": "Gets a list of team district rankings for the given district.",
        "parameters": [
          {
            "$ref": "#/parameters/If-Modified-Since"
          },
          {
            "$ref": "#/parameters/district_key"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/District_Ranking"
              }
            },
            "headers": {
              "Last-Modified": {
                "type": "string",
                "description": "Indicates the date and time the data returned was last updated. Used by clients in the `If-Modified-Since` request header."
              },
              "Cache-Control": {
                "type": "string",
                "description": "The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly."
              }
            }
          },
          "304": {
            "$ref": "#/responses/NotModified"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    }
  },
  "definitions": {
    "API_Status": {
      "type": "object",
      "required": [
        "android",
        "current_season",
        "down_events",
        "ios",
        "is_datafeed_down",
        "max_season"
      ],
      "properties": {
        "current_season": {
          "type": "integer",
          "description": "Year of the current FRC season."
        },
        "max_season": {
          "type": "integer",
          "description": "Maximum FRC season year for valid queries."
        },
        "is_datafeed_down": {
          "type": "boolean",
          "description": "True if the entire FMS API provided by FIRST is down."
        },
        "down_events": {
          "type": "array",
          "description": "An array of strings containing event keys of any active events that are no longer updating.",
          "items": {
            "type": "string"
          }
        },
        "ios": {
          "$ref": "#/definitions/API_Status_App_Version"
        },
        "android": {
          "$ref": "#/definitions/API_Status_App_Version"
        }
      }
    },
    "API_Status_App_Version": {
      "type": "object",
      "required": [
        "latest_app_version",
        "min_app_version"
      ],
      "properties": {
        "min_app_version": {
          "type": "integer",
          "description": "Internal use - Minimum application version required to correctly connect and process data."
        },
        "latest_app_version": {
          "type": "integer",
          "description": "Internal use - Latest application version available."
        }
      }
    },
    "Team_Simple": {
      "type": "object",
      "required": [
        "key",
        "team_number",
        "name"
      ],
      "properties": {
        "key": {
          "type": "string",
          "description": "TBA team key with the format `frcXXXX` with `XXXX` representing the team number."
        },
        "team_number": {
          "type": "integer",
          "description": "Official team number issued by FIRST."
        },
        "nickname": {
          "type": "string",
          "description": "Team nickname provided by FIRST."
        },
        "name": {
          "type": "string",
          "description": "Official long name registered with FIRST."
        },
        "city": {
          "type": "string",
          "description": "City of team derived from parsing the address registered with FIRST."
        },
        "state_prov": {
          "type": "string",
          "description": "State of team derived from parsing the address registered with FIRST."
        },
        "country": {
          "type": "string",
          "description": "Country of team derived from parsing the address registered with FIRST."
        }
      }
    },
    "Team": {
      "type": "object",
      "required": [
        "key",
        "team_number",
        "name",
        "rookie_year"
      ],
      "properties": {
        "key": {
          "type": "string",
          "description": "TBA team key with the format `frcXXXX` with `XXXX` representing the team number."
        },
        "team_number": {
          "type": "integer",
          "description": "Official team number issued by FIRST."
        },
        "nickname": {
          "type": "string",
          "description": "Team nickname provided by FIRST."
        },
        "name": {
          "type": "string",
          "description": "Official long name registered with FIRST."
        },
        "city": {
          "type": "string",
          "description": "City of team derived from parsing the address registered with FIRST."
        },
        "state_prov": {
          "type": "string",
          "description": "State of team derived from parsing the address registered with FIRST."
        },
        "country": {
          "type": "string",
          "description": "Country of team derived from parsing the address registered with FIRST."
        },
        "address": {
          "type": "string",
          "description": "Will be NULL, for future development."
        },
        "postal_code": {
          "type": "string",
          "description": "Postal code from the team address."
        },
        "gmaps_place_id": {
          "type": "string",
          "description": "Will be NULL, for future development."
        },
        "gmaps_url": {
          "type": "string",
          "format": "url",
          "description": "Will be NULL, for future development."
        },
        "lat": {
          "type": "number",
          "format": "double",
          "description": "Will be NULL, for future development."
        },
        "lng": {
          "type": "number",
          "format": "double",
          "description": "Will be NULL, for future development."
        },
        "location_name": {
          "type": "string",
          "description": "Will be NULL, for future development."
        },
        "website": {
          "type": "string",
          "format": "url",
          "description": "Official website associated with the team."
        },
        "rookie_year": {
          "type": "integer",
          "description": "First year the team officially competed."
        },
        "motto": {
          "type": "string",
          "description": "Team's motto as provided by FIRST."
        },
        "home_championship": {
          "type": "object",
          "description": "Location of the team's home championship each year as a key-value pair. The year (as a string) is the key, and the city is the value."
        }
      }
    },
    "Team_Robot": {
      "type": "object",
      "required": [
        "year",
        "robot_name",
        "key",
        "team_key"
      ],
      "properties": {
        "year": {
          "type": "integer",
          "description": "Year this robot competed in."
        },
        "robot_name": {
          "type": "string",
          "description": "Name of the robot as provided by the team."
        },
        "key": {
          "type": "string",
          "description": "Internal TBA identifier for this robot."
        },
        "team_key": {
          "type": "string",
          "description": "TBA team key for this robot."
        }
      }
    },
    "Event_Simple": {
      "type": "object",
      "required": [
        "key",
        "name",
        "event_code",
        "event_type",
        "start_date",
        "end_date",
        "year"
      ],
      "properties": {
        "key": {
          "type": "string",
          "description": "TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event."
        },
        "name": {
          "type": "string",
          "description": "Official name of event on record either provided by FIRST or organizers of offseason event."
        },
        "event_code": {
          "type": "string",
          "description": "Event short code, as provided by FIRST."
        },
        "event_type": {
          "type": "integer",
          "description": "Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2"
        },
        "district": {
          "$ref": "#/definitions/District_List",
          "description": "The district this event is in, may be null."
        },
        "city": {
          "type": "string",
          "description": "City, town, village, etc. the event is located in."
        },
        "state_prov": {
          "type": "string",
          "description": "State or Province the event is located in."
        },
        "country": {
          "type": "string",
          "description": "Country the event is located in."
        },
        "start_date": {
          "type": "string",
          "format": "date",
          "description": "Event start date in `yyyy-mm-dd` format."
        },
        "end_date": {
          "type": "string",
          "format": "date",
          "description": "Event end date in `yyyy-mm-dd` format."
        },
        "year": {
          "type": "integer",
          "description": "Year the event data is for."
        }
      }
    },
    "Event": {
      "type": "object",
      "required": [
        "key",
        "name",
        "event_code",
        "event_type",
        "start_date",
        "end_date",
        "year",
        "event_type_string"
      ],
      "properties": {
        "key": {
          "type": "string",
          "description": "TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event."
        },
        "name": {
          "type": "string",
          "description": "Official name of event on record either provided by FIRST or organizers of offseason event."
        },
        "event_code": {
          "type": "string",
          "description": "Event short code, as provided by FIRST."
        },
        "event_type": {
          "type": "integer",
          "description": "Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2"
        },
        "district": {
          "$ref": "#/definitions/District_List",
          "description": "The district this event is in, may be null."
        },
        "city": {
          "type": "string",
          "description": "City, town, village, etc. the event is located in."
        },
        "state_prov": {
          "type": "string",
          "description": "State or Province the event is located in."
        },
        "country": {
          "type": "string",
          "description": "Country the event is located in."
        },
        "start_date": {
          "type": "string",
          "format": "date",
          "description": "Event start date in `yyyy-mm-dd` format."
        },
        "end_date": {
          "type": "string",
          "format": "date",
          "description": "Event end date in `yyyy-mm-dd` format."
        },
        "year": {
          "type": "integer",
          "description": "Year the event data is for."
        },
        "short_name": {
          "type": "string",
          "description": "Same as `name` but doesn't include event specifiers, such as 'Regional' or 'District'. May be null."
        },
        "event_type_string": {
          "type": "string",
          "description": "Event Type, eg Regional, District, or Offseason."
        },
        "week": {
          "type": "integer",
          "description": "Week of the event relative to the first official season event, zero-indexed. Only valid for Regionals, Districts, and District Championships. Null otherwise. (Eg. A season with a week 0 'preseason' event does not count, and week 1 events will show 0 here. Seasons with a week 0.5 regional event will show week 0 for those event(s) and week 1 for week 1 events and so on.)"
        },
        "address": {
          "type": "string",
          "description": "Address of the event's venue, if available."
        },
        "postal_code": {
          "type": "string",
          "description": "Postal code from the event address."
        },
        "gmaps_place_id": {
          "type": "string",
          "description": "Google Maps Place ID for the event address."
        },
        "gmaps_url": {
          "type": "string",
          "format": "url",
          "description": "Link to address location on Google Maps."
        },
        "lat": {
          "type": "number",
          "format": "double",
          "description": "Latitude for the event address."
        },
        "lng": {
          "type": "number",
          "format": "double",
          "description": "Longitude for the event address."
        },
        "location_name": {
          "type": "string",
          "description": "Name of the location at the address for the event, eg. Blue Alliance High School."
        },
        "timezone": {
          "type": "string",
          "description": "Timezone name."
        },
        "website": {
          "type": "string",
          "description": "The event's website, if any."
        },
        "first_event_id": {
          "type": "string",
          "description": "The FIRST internal Event ID, used to link to the event on the FRC webpage."
        },
        "first_event_code": {
          "type": "string",
          "description": "Public facing event code used by FIRST (on frc-events.firstinspires.org, for example)"
        },
        "webcasts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Webcast"
          }
        },
        "division_keys": {
          "type": "array",
          "description": "An array of event keys for the divisions at this event.",
          "items": {
            "type": "string"
          }
        },
        "parent_event_key": {
          "type": "string",
          "description": "The TBA Event key that represents the event's parent. Used to link back to the event from a division event. It is also the inverse relation of `divison_keys`."
        },
        "playoff_type": {
          "type": "integer",
          "description": "Playoff Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/playoff_type.py#L4, or null."
        },
        "playoff_type_string": {
          "type": "string",
          "description": "String representation of the `playoff_type`, or null."
        }
      }
    },
    "Team_Event_Status": {
      "type": "object",
      "properties": {
        "qual": {
          "$ref": "#/definitions/Team_Event_Status_rank"
        },
        "alliance": {
          "$ref": "#/definitions/Team_Event_Status_alliance"
        },
        "playoff": {
          "$ref": "#/definitions/Team_Event_Status_playoff"
        },
        "alliance_status_str": {
          "type": "string",
          "description": "An HTML formatted string suitable for display to the user containing the team's alliance pick status."
        },
        "playoff_status_str": {
          "type": "string",
          "description": "An HTML formatter string suitable for display to the user containing the team's playoff status."
        },
        "overall_status_str": {
          "type": "string",
          "description": "An HTML formatted string suitable for display to the user containing the team's overall status summary of the event."
        },
        "next_match_key": {
          "type": "string",
          "description": "TBA match key for the next match the team is scheduled to play in at this event, or null."
        },
        "last_match_key": {
          "type": "string",
          "description": "TBA match key for the last match the team played in at this event, or null."
        }
      }
    },
    "Team_Event_Status_rank": {
      "type": "object",
      "properties": {
        "num_teams": {
          "type": "integer",
          "description": "Number of teams ranked."
        },
        "ranking": {
          "type": "object",
          "properties": {
            "dq": {
              "type": "integer",
              "description": "Number of matches the team was disqualified for."
            },
            "matches_played": {
              "type": "integer",
              "description": "Number of matches played."
            },
            "qual_average": {
              "type": "number",
              "format": "double",
              "description": "For some years, average qualification score. Can be null."
            },
            "rank": {
              "type": "integer",
              "description": "Relative rank of this team."
            },
            "record": {
              "$ref": "#/definitions/WLT_Record"
            },
            "sort_orders": {
              "type": "array",
              "description": "Ordered list of values used to determine the rank. See the `sort_order_info` property for the name of each value.",
              "items": {
                "type": "number"
              }
            },
            "team_key": {
              "type": "string",
              "description": "TBA team key for this rank."
            }
          }
        },
        "sort_order_info": {
          "type": "array",
          "description": "Ordered list of names corresponding to the elements of the `sort_orders` array.",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The descriptive name of the value used to sort the ranking."
              },
              "precision": {
                "type": "integer",
                "description": "The number of digits of precision used for this value, eg `2` would correspond to a value of `101.11` while `0` would correspond to `101`."
              }
            }
          }
        },
        "status": {
          "type": "string"
        }
      }
    },
    "Team_Event_Status_alliance": {
      "type": "object",
      "required": [
        "number",
        "pick"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Alliance name, may be null."
        },
        "number": {
          "type": "integer",
          "description": "Alliance number."
        },
        "backup": {
          "$ref": "#/definitions/Team_Event_Status_alliance_backup"
        },
        "pick": {
          "type": "integer",
          "description": "Order the team was picked in the alliance from 0-2, with 0 being alliance captain."
        }
      }
    },
    "Team_Event_Status_alliance_backup": {
      "type": "object",
      "properties": {
        "out": {
          "type": "string",
          "description": "TBA key for the team replaced by the backup."
        },
        "in": {
          "type": "string",
          "description": "TBA key for the backup team called in."
        }
      },
      "description": "Backup status, may be null."
    },
    "Team_Event_Status_playoff": {
      "type": "object",
      "properties": {
        "level": {
          "type": "string",
          "description": "The highest playoff level the team reached.",
          "enum": [
            "qm",
            "ef",
            "qf",
            "sf",
            "f"
          ]
        },
        "current_level_record": {
          "$ref": "#/definitions/WLT_Record"
        },
        "record": {
          "$ref": "#/definitions/WLT_Record"
        },
        "status": {
          "type": "string",
          "description": "Current competition status for the playoffs.",
          "enum": [
            "won",
            "eliminated",
            "playing"
          ]
        },
        "playoff_average": {
          "type": "integer",
          "description": "The average match score during playoffs. Year specific. May be null if not relevant for a given year."
        }
      },
      "description": "Playoff status for this team, may be null if the team did not make playoffs, or playoffs have not begun."
    },
    "Event_Ranking": {
      "type": "object",
      "required": [
        "rankings",
        "sort_order_info"
      ],
      "properties": {
        "rankings" : {
          "type": "array",
          "description": "List of rankings at the event.",
          "items": {
            "type": "object",
            "required": [
              "dq",
              "matches_played",
              "rank",
              "record",
              "team_key"
            ],
            "properties": {
              "dq": {
                "type": "integer",
                "description": "Number of times disqualified."
              },
              "matches_played": {
                "type": "integer",
                "description": "Number of matches played by this team."
              },
              "qual_average": {
                "type": "integer",
                "description": "The average match score during qualifications. Year specific. May be null if not relevant for a given year."
              },
              "rank": {
                "type": "integer",
                "description": "The team's rank at the event as provided by FIRST."
              },
              "record": {
                "$ref": "#/definitions/WLT_Record"
              },
              "extra_stats": {
                "type": "array",
                "description": "Additional special data on the team's performance calculated by TBA.",
                "items": {
                  "type": "number"
                }
              },
              "sort_orders": {
                "type": "array",
                "description": "Additional year-specific information, may be null. See parent `sort_order_info` for details.",
                "items": {
                  "type": "number"
                }
              },
              "team_key": {
                "type": "string",
                "description": "The team with this rank."
              }
            }
          }
        },
        "extra_stats_info": {
          "type": "array",
          "description": "List of special TBA-generated values provided in the `extra_stats` array for each item.",
          "items": {
            "type": "object",
            "required": [
              "name",
              "precision"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the field used in the `extra_stats` array."
              },
              "precision": {
                "type": "number",
                "description": "Integer expressing the number of digits of precision in the number provided in `sort_orders`."
              }
            }
          }
        },
        "sort_order_info": {
          "type": "array",
          "description": "List of year-specific values provided in the `sort_orders` array for each team.",
          "items": {
            "type": "object",
            "required": [
              "name",
              "precision"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the field used in the `sort_order` array."
              },
              "precision": {
                "type": "integer",
                "description": "Integer expressing the number of digits of precision in the number provided in `sort_orders`."
              }
            }
          }
        }
      }
    },
    "Event_District_Points": {
      "type": "object",
      "required": [
        "points"
      ],
      "properties": {
        "points": {
          "type": "object",
          "description": "Points gained for each team at the event. Stored as a key-value pair with the team key as the key, and an object describing the points as its value.",
          "additionalProperties": {
            "type": "object",
            "required": [
              "alliance_points",
              "award_points",
              "qual_points",
              "elim_points",
              "total"
            ],
            "properties": {
              "alliance_points": {
                "type": "integer",
                "description": "Points awarded for alliance selection"
              },
              "award_points": {
                "type": "integer",
                "description": "Points awarded for event awards."
              },
              "qual_points": {
                "type": "integer",
                "description": "Points awarded for qualification match performance."
              },
              "elim_points": {
                "type": "integer",
                "description": "Points awarded for elimination match performance."
              },
              "total": {
                "type": "integer",
                "description": "Total points awarded at this event."
              }
            }
          }
        },
        "tiebreakers": {
          "type": "object",
          "description": "Tiebreaker values for each team at the event. Stored as a key-value pair with the team key as the key, and an object describing the tiebreaker elements as its value.",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "highest_qual_scores": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "qual_wins": {
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "Event_Insights": {
      "type": "object",
      "description": "A year-specific event insight object expressed as a JSON string, separated in to `qual` and `playoff` fields. See also Event_Insights_2016, Event_Insights_2017, etc.",
      "properties": {
        "qual": {
          "type": "object",
          "description": "Inights for the qualification round of an event",
        },
        "playoff": {
          "type": "object",
          "description": "Insights for the playoff round of an event",
        },
      }
    },
    "Event_Insights_2016": {
      "type": "object",
      "description": "Insights for FIRST Stronghold qualification and elimination matches.",
      "required": [
        "LowBar",
        "A_ChevalDeFrise",
        "A_Portcullis",
        "B_Ramparts",
        "B_Moat",
        "C_SallyPort",
        "C_Drawbridge",
        "D_RoughTerrain",
        "D_RockWall",
        "average_high_goals",
        "average_low_goals",
        "breaches",
        "scales",
        "challenges",
        "captures",
        "average_win_score",
        "average_win_margin",
        "average_score",
        "average_auto_score",
        "average_crossing_score",
        "average_boulder_score",
        "average_tower_score",
        "average_foul_score",
        "high_score"
      ],
      "properties": {
        "LowBar": {
          "type": "array",
          "description": "For the Low Bar - An array with three values, number of times damaged, number of opportunities to damage, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "A_ChevalDeFrise": {
          "type": "array",
          "description": "For the Cheval De Frise - An array with three values, number of times damaged, number of opportunities to damage, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "A_Portcullis": {
          "type": "array",
          "description": "For the Portcullis - An array with three values, number of times damaged, number of opportunities to damage, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "B_Ramparts": {
          "type": "array",
          "description": "For the Ramparts - An array with three values, number of times damaged, number of opportunities to damage, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "B_Moat": {
          "type": "array",
          "description": "For the Moat - An array with three values, number of times damaged, number of opportunities to damage, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "C_SallyPort": {
          "type": "array",
          "description": "For the Sally Port - An array with three values, number of times damaged, number of opportunities to damage, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "C_Drawbridge": {
          "type": "array",
          "description": "For the Drawbridge - An array with three values, number of times damaged, number of opportunities to damage, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "D_RoughTerrain": {
          "type": "array",
          "description": "For the Rough Terrain - An array with three values, number of times damaged, number of opportunities to damage, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "D_RockWall": {
          "type": "array",
          "description": "For the Rock Wall - An array with three values, number of times damaged, number of opportunities to damage, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "average_high_goals": {
          "type": "number",
          "format": "float",
          "description": "Average number of high goals scored."
        },
        "average_low_goals": {
          "type": "number",
          "format": "float",
          "description": "Average number of low goals scored."
        },
        "breaches": {
          "type": "array",
          "description": "An array with three values, number of times breached, number of opportunities to breach, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "scales": {
          "type": "array",
          "description": "An array with three values, number of times scaled, number of opportunities to scale, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "challenges": {
          "type": "array",
          "description": "An array with three values, number of times challenged, number of opportunities to challenge, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "captures": {
          "type": "array",
          "description": "An array with three values, number of times captured, number of opportunities to capture, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "average_win_score": {
          "type": "number",
          "format": "float",
          "description": "Average winning score."
        },
        "average_win_margin": {
          "type": "number",
          "format": "float",
          "description": "Average margin of victory."
        },
        "average_score": {
          "type": "number",
          "format": "float",
          "description": "Average total score."
        },
        "average_auto_score": {
          "type": "number",
          "format": "float",
          "description": "Average autonomous score."
        },
        "average_crossing_score": {
          "type": "number",
          "format": "float",
          "description": "Average crossing score."
        },
        "average_boulder_score": {
          "type": "number",
          "format": "float",
          "description": "Average boulder score."
        },
        "average_tower_score": {
          "type": "number",
          "format": "float",
          "description": "Average tower score."
        },
        "average_foul_score": {
          "type": "number",
          "format": "float",
          "description": "Average foul score."
        },
        "high_score": {
          "type": "array",
          "description": "An array with three values, high score, match key from the match with the high score, and the name of the match.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Event_Insights_2017": {
      "type": "object",
      "description": "Insights for FIRST STEAMWORKS qualification and elimination matches.",
      "required": [
        "average_foul_score",
        "average_fuel_points",
        "average_fuel_points_auto",
        "average_fuel_points_teleop",
        "average_high_goals",
        "average_high_goals_auto",
        "average_high_goals_teleop",
        "average_low_goals",
        "average_low_goals_auto",
        "average_low_goals_teleop",
        "average_mobility_points_auto",
        "average_points_auto",
        "average_points_teleop",
        "average_rotor_points",
        "average_rotor_points_auto",
        "average_rotor_points_teleop",
        "average_score",
        "average_takeoff_points_teleop",
        "average_win_margin",
        "average_win_score",
        "high_kpa",
        "high_score",
        "kpa_achieved",
        "mobility_counts",
        "rotor_1_engaged",
        "rotor_1_engaged_auto",
        "rotor_2_engaged",
        "rotor_2_engaged_auto",
        "rotor_3_engaged",
        "rotor_4_engaged",
        "takeoff_counts",
        "unicorn_matches"
      ],
      "properties": {
        "average_foul_score": {
          "type": "number",
          "format": "float",
          "description": "Average foul score."
        },
        "average_fuel_points": {
          "type": "number",
          "format": "float",
          "description": "Average fuel points scored."
        },
        "average_fuel_points_auto": {
          "type": "number",
          "format": "float",
          "description": "Average fuel points scored during auto."
        },
        "average_fuel_points_teleop": {
          "type": "number",
          "format": "float",
          "description": "Average fuel points scored during teleop."
        },
        "average_high_goals": {
          "type": "number",
          "format": "float",
          "description": "Average points scored in the high goal."
        },
        "average_high_goals_auto": {
          "type": "number",
          "format": "float",
          "description": "Average points scored in the high goal during auto."
        },
        "average_high_goals_teleop": {
          "type": "number",
          "format": "float",
          "description": "Average points scored in the high goal during teleop."
        },
        "average_low_goals": {
          "type": "number",
          "format": "float",
          "description": "Average points scored in the low goal."
        },
        "average_low_goals_auto": {
          "type": "number",
          "format": "float",
          "description": "Average points scored in the low goal during auto."
        },
        "average_low_goals_teleop": {
          "type": "number",
          "format": "float",
          "description": "Average points scored in the low goal during teleop."
        },
        "average_mobility_points_auto": {
          "type": "number",
          "format": "float",
          "description": "Average mobility points scored during auto."
        },
        "average_points_auto": {
          "type": "number",
          "format": "float",
          "description": "Average points scored during auto."
        },
        "average_points_teleop": {
          "type": "number",
          "format": "float",
          "description": "Average points scored during teleop."
        },
        "average_rotor_points": {
          "type": "number",
          "format": "float",
          "description": "Average rotor points scored."
        },
        "average_rotor_points_auto": {
          "type": "number",
          "format": "float",
          "description": "Average rotor points scored during auto."
        },
        "average_rotor_points_teleop": {
          "type": "number",
          "format": "float",
          "description": "Average rotor points scored during teleop."
        },
        "average_score": {
          "type": "number",
          "format": "float",
          "description": "Average score."
        },
        "average_takeoff_points_teleop": {
          "type": "number",
          "format": "float",
          "description": "Average takeoff points scored during teleop."
        },
        "average_win_margin": {
          "type": "number",
          "format": "float",
          "description": "Average margin of victory."
        },
        "average_win_score": {
          "type": "number",
          "format": "float",
          "description": "Average winning score."
        },
        "high_kpa": {
          "type": "array",
          "description": "An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match",
          "items": {
            "type": "string"
          }
        },
        "high_score": {
          "type": "array",
          "description": "An array with three values, high score, match key from the match with the high score, and the name of the match",
          "items": {
            "type": "string"
          }
        },
        "kpa_achieved": {
          "type": "array",
          "description": "An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "mobility_counts": {
          "type": "array",
          "description": "An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "rotor_1_engaged": {
          "type": "array",
          "description": "An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "rotor_1_engaged_auto": {
          "type": "array",
          "description": "An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "rotor_2_engaged": {
          "type": "array",
          "description": "An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "rotor_2_engaged_auto": {
          "type": "array",
          "description": "An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "rotor_3_engaged": {
          "type": "array",
          "description": "An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "rotor_4_engaged": {
          "type": "array",
          "description": "An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "takeoff_counts": {
          "type": "array",
          "description": "An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "unicorn_matches": {
          "type": "array",
          "description": "An array with three values, number of times a unicorn match (Win + kPa & Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        }
      }
    },
    "Event_Insights_2018": {
      "type": "object",
      "description": "Insights for FIRST Power Up qualification and elimination matches.",
      "required": [
        "auto_quest_achieved",
        "average_boost_played",
        "average_endgame_points",
        "average_force_played",
        "average_foul_score",
        "average_points_auto",
        "average_points_teleop",
        "average_run_points_auto",
        "average_scale_ownership_points",
        "average_scale_ownership_points_auto",
        "average_scale_ownership_points_teleop",
        "average_score",
        "average_switch_ownership_points",
        "average_switch_ownership_points_auto",
        "average_switch_ownership_points_teleop",
        "average_vault_points",
        "average_win_margin",
        "average_win_score",
        "boost_played_counts",
        "climb_counts",
        "face_the_boss_achieved",
        "force_played_counts",
        "high_score",
        "levitate_played_counts",
        "run_counts_auto",
        "scale_neutral_percentage",
        "scale_neutral_percentage_auto",
        "scale_neutral_percentage_teleop",
        "switch_owned_counts_auto",
        "unicorn_matches",
        "winning_opp_switch_denial_percentage_teleop",
        "winning_own_switch_ownership_percentage",
        "winning_own_switch_ownership_percentage_auto",
        "winning_own_switch_ownership_percentage_teleop",
        "winning_scale_ownership_percentage",
        "winning_scale_ownership_percentage_auto",
        "winning_scale_ownership_percentage_teleop"
      ],
      "properties": {
        "auto_quest_achieved": {
          "type": "array",
          "description": "An array with three values, number of times auto quest was completed, number of opportunities to complete the auto quest, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "average_boost_played": {
          "type": "number",
          "format": "float",
          "description": "Average number of boost power up scored (out of 3)."
        },
        "average_endgame_points": {
          "type": "number",
          "format": "float",
          "description": "Average endgame points."
        },
        "average_force_played": {
          "type": "number",
          "format": "float",
          "description": "Average number of force power up scored (out of 3)."
        },
        "average_foul_score": {
          "type": "number",
          "format": "float",
          "description": "Average foul score."
        },
        "average_points_auto": {
          "type": "number",
          "format": "float",
          "description": "Average points scored during auto."
        },
        "average_points_teleop": {
          "type": "number",
          "format": "float",
          "description": "Average points scored during teleop."
        },
        "average_run_points_auto": {
          "type": "number",
          "format": "float",
          "description": "Average mobility points scored during auto."
        },
        "average_scale_ownership_points": {
          "type": "number",
          "format": "float",
          "description": "Average scale ownership points scored."
        },
        "average_scale_ownership_points_auto": {
          "type": "number",
          "format": "float",
          "description": "Average scale ownership points scored during auto."
        },
        "average_scale_ownership_points_teleop": {
          "type": "number",
          "format": "float",
          "description": "Average scale ownership points scored during teleop."
        },
        "average_score": {
          "type": "number",
          "format": "float",
          "description": "Average score."
        },
        "average_switch_ownership_points": {
          "type": "number",
          "format": "float",
          "description": "Average switch ownership points scored."
        },
        "average_switch_ownership_points_auto": {
          "type": "number",
          "format": "float",
          "description": "Average switch ownership points scored during auto."
        },
        "average_switch_ownership_points_teleop": {
          "type": "number",
          "format": "float",
          "description": "Average switch ownership points scored during teleop."
        },
        "average_vault_points": {
          "type": "number",
          "format": "float",
          "description": "Average value points scored."
        },
        "average_win_margin": {
          "type": "number",
          "format": "float",
          "description": "Average margin of victory."
        },
        "average_win_score": {
          "type": "number",
          "format": "float",
          "description": "Average winning score."
        },
        "boost_played_counts": {
          "type": "array",
          "description": "An array with three values, number of times a boost power up was played, number of opportunities to play a boost power up, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "climb_counts": {
          "type": "array",
          "description": "An array with three values, number of times a climb occurred, number of opportunities to climb, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "face_the_boss_achieved": {
          "type": "array",
          "description": "An array with three values, number of times an alliance faced the boss, number of opportunities to face the boss, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "force_played_counts": {
          "type": "array",
          "description": "An array with three values, number of times a force power up was played, number of opportunities to play a force power up, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "high_score": {
          "type": "array",
          "description": "An array with three values, high score, match key from the match with the high score, and the name of the match",
          "items": {
            "type": "string"
          }
        },
        "levitate_played_counts": {
          "type": "array",
          "description": "An array with three values, number of times a levitate power up was played, number of opportunities to play a levitate power up, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "run_counts_auto": {
          "type": "array",
          "description": "An array with three values, number of times a team scored mobility points in auto, number of opportunities to score mobility points in auto, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "scale_neutral_percentage": {
          "type": "number",
          "format": "float",
          "description": "Average scale neutral percentage."
        },
        "scale_neutral_percentage_auto": {
          "type": "number",
          "format": "float",
          "description": "Average scale neutral percentage during auto."
        },
        "scale_neutral_percentage_teleop": {
          "type": "number",
          "format": "float",
          "description": "Average scale neutral percentage during teleop."
        },
        "switch_owned_counts_auto": {
          "type": "array",
          "description": "An array with three values, number of times a switch was owned during auto, number of opportunities to own a switch during auto, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "unicorn_matches": {
          "type": "array",
          "description": "An array with three values, number of times a unicorn match (Win + Auto Quest + Face the Boss)	 occured, number of opportunities to have a unicorn match, and percentage.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "winning_opp_switch_denial_percentage_teleop": {
          "type": "number",
          "format": "float",
          "description": "Average opposing switch denail percentage for the winning alliance during teleop."
        },
        "winning_own_switch_ownership_percentage": {
          "type": "number",
          "format": "float",
          "description": "Average own switch ownership percentage for the winning alliance."
        },
        "winning_own_switch_ownership_percentage_auto": {
          "type": "number",
          "format": "float",
          "description": "Average own switch ownership percentage for the winning alliance during auto."
        },
        "winning_own_switch_ownership_percentage_teleop": {
          "type": "number",
          "format": "float",
          "description": "Average own switch ownership percentage for the winning alliance during teleop."
        },
        "winning_scale_ownership_percentage": {
          "type": "number",
          "format": "float",
          "description": "Average scale ownership percentage for the winning alliance."
        },
        "winning_scale_ownership_percentage_auto": {
          "type": "number",
          "format": "float",
          "description": "Average scale ownership percentage for the winning alliance during auto."
        },
        "winning_scale_ownership_percentage_teleop": {
          "type": "number",
          "format": "float",
          "description": "Average scale ownership percentage for the winning alliance during teleop."
        }
      }
    },
    "Event_OPRs": {
      "type": "object",
      "description": "OPR, DPR, and CCWM for teams at the event.",
      "properties": {
        "oprs": {
          "type": "object",
          "description": "A key-value pair with team key (eg `frc254`) as key and OPR as value.",
          "additionalProperties": {
            "type": "number",
            "format": "float",
            "description": "OPR for team."
          }
        },
        "dprs": {
          "type": "object",
          "description": "A key-value pair with team key (eg `frc254`) as key and DPR as value.",
          "additionalProperties": {
            "type": "number",
            "format": "float",
            "description": "DPR for team."
          }
        },
        "ccwms": {
          "type": "object",
          "description": "A key-value pair with team key (eg `frc254`) as key and CCWM as value.",
          "additionalProperties": {
            "type": "number",
            "format": "float",
            "description": "CCWM for team."
          }
        }
      }
    },
    "Event_Predictions": {
      "type": "object",
      "description": "JSON Object containing prediction information for the event. Contains year-specific information and is subject to change."
    },
    "Webcast": {
      "type": "object",
      "required": [
        "channel",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of webcast, typically descriptive of the streaming provider.",
          "enum": [
            "youtube",
            "twitch",
            "ustream",
            "iframe",
            "html5",
            "rtmp",
            "livestream"
          ]
        },
        "channel": {
          "type": "string",
          "description": "Type specific channel information. May be the YouTube stream, or Twitch channel name. In the case of iframe types, contains HTML to embed the stream in an HTML iframe."
        },
        "file": {
          "type": "string",
          "description": "File identification as may be required for some types. May be null."
        }
      }
    },
    "Match_Simple": {
      "type": "object",
      "required": [
        "comp_level",
        "event_key",
        "key",
        "match_number",
        "set_number"
      ],
      "properties": {
        "key": {
          "type": "string",
          "description": "TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may append the competition level if more than one match in required per set."
        },
        "comp_level": {
          "type": "string",
          "description": "The competition level the match was played at.",
          "enum": [
            "qm",
            "ef",
            "qf",
            "sf",
            "f"
          ]
        },
        "set_number": {
          "type": "integer",
          "description": "The set number in a series of matches where more than one match is required in the match series."
        },
        "match_number": {
          "type": "integer",
          "description": "The match number of the match in the competition level."
        },
        "alliances": {
          "properties": {
            "blue": {
              "$ref": "#/definitions/Match_alliance"
            },
            "red": {
              "$ref": "#/definitions/Match_alliance"
            }
          },
          "description": "A list of alliances, the teams on the alliances, and their score."
        },
        "winning_alliance": {
          "type": "string",
          "description": "The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie.",
          "enum": [
            "red",
            "blue"
          ]
        },
        "event_key": {
          "type": "string",
          "description": "Event key of the event the match was played at."
        },
        "time": {
          "type": "integer",
          "format": "int64",
          "description": "UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the scheduled match time, as taken from the published schedule."
        },
        "predicted_time": {
          "type": "integer",
          "format": "int64",
          "description": "UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the TBA predicted match start time."
        },
        "actual_time": {
          "type": "integer",
          "format": "int64",
          "description": "UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of actual match start time."
        }
      }
    },
    "Match": {
      "type": "object",
      "required": [
        "comp_level",
        "event_key",
        "key",
        "match_number",
        "set_number"
      ],
      "properties": {
        "key": {
          "type": "string",
          "description": "TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may be appended to the competition level if more than one match in required per set."
        },
        "comp_level": {
          "type": "string",
          "description": "The competition level the match was played at.",
          "enum": [
            "qm",
            "ef",
            "qf",
            "sf",
            "f"
          ]
        },
        "set_number": {
          "type": "integer",
          "description": "The set number in a series of matches where more than one match is required in the match series."
        },
        "match_number": {
          "type": "integer",
          "description": "The match number of the match in the competition level."
        },
        "alliances": {
          "properties": {
            "blue": {
              "$ref": "#/definitions/Match_alliance"
            },
            "red": {
              "$ref": "#/definitions/Match_alliance"
            }
          },
          "description": "A list of alliances, the teams on the alliances, and their score."
        },
        "winning_alliance": {
          "type": "string",
          "description": "The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie."
        },
        "event_key": {
          "type": "string",
          "description": "Event key of the event the match was played at."
        },
        "time": {
          "type": "integer",
          "format": "int64",
          "description": "UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the scheduled match time, as taken from the published schedule."
        },
        "actual_time": {
          "type": "integer",
          "format": "int64",
          "description": "UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of actual match start time."
        },
        "predicted_time": {
          "type": "integer",
          "format": "int64",
          "description": "UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the TBA predicted match start time."
        },
        "post_result_time": {
          "type": "integer",
          "format": "int64",
          "description": "UNIX timestamp (seconds since 1-Jan-1970 00:00:00) when the match result was posted."
        },
        "score_breakdown": {
          "type": "object",
          "description": "Score breakdown for auto, teleop, etc. points. Varies from year to year. May be null."
        },
        "videos": {
          "type": "array",
          "items": {
            "type": "object",
            "properties" : {
              "key": {
                "type": "string",
                "description": "Unique key representing this video"
              },
              "type": {
                "type": "string",
                "description": "Can be one of 'youtube' or 'tba'"
              }
            }
          },
          "description": "Array of video objects associated with this match."
        }
      }
    },
    "Match_alliance": {
      "type": "object",
      "required": [
        "score",
        "team_keys"
      ],
      "properties": {
        "score": {
          "description": "Score for this alliance. Will be null or -1 for an unplayed match.",
          "type": "integer"
        },
        "team_keys": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "TBA Team keys (eg `frc254`) for teams on this alliance."
          }
        },
        "surrogate_team_keys": {
          "type": "array",
          "description": "TBA team keys (eg `frc254`) of any teams playing as a surrogate.",
          "items": {
            "type": "string",
            "description": "Team key of a surrogate team."
          }
        },
        "dq_team_keys": {
          "type": "array",
          "description": "TBA team keys (eg `frc254`) of any disqualified teams.",
          "items": {
            "type": "string",
            "description": "Team key of a disqualified team."
          }
        }
      }
    },
    "Match_Score_Breakdown_2015": {
      "type": "object",
      "properties": {
        "blue": {
          "$ref": "#/definitions/Match_Score_Breakdown_2015_Alliance"
        },
        "red": {
          "$ref": "#/definitions/Match_Score_Breakdown_2015_Alliance"
        },
        "coopertition": {
          "type": "string",
          "enum": [
            "None",
            "Unknown",
            "Stack"
          ]
        },
        "coopertition_points": {
          "type": "integer"
        }
      },
      "description": "See the 2015 FMS API documentation for a description of each value"
    },
    "Match_Score_Breakdown_2015_Alliance": {
      "type": "object",
      "properties": {
        "auto_points": {
          "type": "integer"
        },
        "teleop_points": {
          "type": "integer"
        },
        "container_points": {
          "type": "integer"
        },
        "tote_points": {
          "type": "integer"
        },
        "litter_points": {
          "type": "integer"
        },
        "foul_points": {
          "type": "integer"
        },
        "adjust_points": {
          "type": "integer"
        },
        "total_points": {
          "type": "integer"
        },
        "foul_count": {
          "type": "integer"
        },
        "tote_count_far": {
          "type": "integer"
        },
        "tote_count_near": {
          "type": "integer"
        },
        "tote_set": {
          "type": "boolean"
        },
        "tote_stack": {
          "type": "boolean"
        },
        "container_count_level1": {
          "type": "integer"
        },
        "container_count_level2": {
          "type": "integer"
        },
        "container_count_level3": {
          "type": "integer"
        },
        "container_count_level4": {
          "type": "integer"
        },
        "container_count_level5": {
          "type": "integer"
        },
        "container_count_level6": {
          "type": "integer"
        },
        "container_set": {
          "type": "boolean"
        },
        "litter_count_container": {
          "type": "integer"
        },
        "litter_count_landfill": {
          "type": "integer"
        },
        "litter_count_unprocessed": {
          "type": "integer"
        },
        "robot_set": {
          "type": "boolean"
        }
      }
    },
    "Match_Score_Breakdown_2016": {
      "type": "object",
      "properties": {
        "blue": {
          "$ref": "#/definitions/Match_Score_Breakdown_2016_Alliance"
        },
        "red": {
          "$ref": "#/definitions/Match_Score_Breakdown_2016_Alliance"
        }
      },
      "description": "See the 2016 FMS API documentation for a description of each value."
    },
    "Match_Score_Breakdown_2016_Alliance": {
      "type": "object",
      "properties": {
        "autoPoints": {
          "type": "integer"
        },
        "teleopPoints": {
          "type": "integer"
        },
        "breachPoints": {
          "type": "integer"
        },
        "foulPoints": {
          "type": "integer"
        },
        "capturePoints": {
          "type": "integer"
        },
        "adjustPoints": {
          "type": "integer"
        },
        "totalPoints": {
          "type": "integer"
        },
        "robot1Auto": {
          "type": "string",
          "enum": [
            "Crossed",
            "Reached",
            "None"
          ]
        },
        "robot2Auto": {
          "type": "string",
          "enum": [
            "Crossed",
            "Reached",
            "None"
          ]
        },
        "robot3Auto": {
          "type": "string",
          "enum": [
            "Crossed",
            "Reached",
            "None"
          ]
        },
        "autoReachPoints": {
          "type": "integer"
        },
        "autoCrossingPoints": {
          "type": "integer"
        },
        "autoBouldersLow": {
          "type": "integer"
        },
        "autoBouldersHigh": {
          "type": "integer"
        },
        "autoBoulderPoints": {
          "type": "integer"
        },
        "teleopCrossingPoints": {
          "type": "integer"
        },
        "teleopBouldersLow": {
          "type": "integer"
        },
        "teleopBouldersHigh": {
          "type": "integer"
        },
        "teleopBoulderPoints": {
          "type": "integer"
        },
        "teleopDefensesBreached": {
          "type": "boolean"
        },
        "teleopChallengePoints": {
          "type": "integer"
        },
        "teleopScalePoints": {
          "type": "integer"
        },
        "teleopTowerCaptured": {
          "type": "integer"
        },
        "towerFaceA": {
          "type": "string"
        },
        "towerFaceB": {
          "type": "string"
        },
        "towerFaceC": {
          "type": "string"
        },
        "towerEndStrength": {
          "type": "integer"
        },
        "techFoulCount": {
          "type": "integer"
        },
        "foulCount": {
          "type": "integer"
        },
        "position2": {
          "type": "string"
        },
        "position3": {
          "type": "string"
        },
        "position4": {
          "type": "string"
        },
        "position5": {
          "type": "string"
        },
        "position1crossings": {
          "type": "integer"
        },
        "position2crossings": {
          "type": "integer"
        },
        "position3crossings": {
          "type": "integer"
        },
        "position4crossings": {
          "type": "integer"
        },
        "position5crossings": {
          "type": "integer"
        }
      }
    },
    "Match_Score_Breakdown_2017": {
      "type": "object",
      "properties": {
        "blue": {
          "$ref": "#/definitions/Match_Score_Breakdown_2017_Alliance"
        },
        "red": {
          "$ref": "#/definitions/Match_Score_Breakdown_2017_Alliance"
        }
      },
      "description": "See the 2017 FMS API documentation for a description of each value."
    },
    "Match_Score_Breakdown_2017_Alliance": {
      "type": "object",
      "properties": {
        "autoPoints": {
          "type": "integer"
        },
        "teleopPoints": {
          "type": "integer"
        },
        "foulPoints": {
          "type": "integer"
        },
        "adjustPoints": {
          "type": "integer"
        },
        "totalPoints": {
          "type": "integer"
        },
        "robot1Auto": {
          "type": "string",
          "enum": [
            "Unknown",
            "Mobility",
            "None"
          ]
        },
        "robot2Auto": {
          "type": "string",
          "enum": [
            "Unknown",
            "Mobility",
            "None"
          ]
        },
        "robot3Auto": {
          "type": "string",
          "enum": [
            "Unknown",
            "Mobility",
            "None"
          ]
        },
        "rotor1Auto": {
          "type": "boolean"
        },
        "rotor2Auto": {
          "type": "boolean"
        },
        "autoFuelLow": {
          "type": "integer"
        },
        "autoFuelHigh": {
          "type": "integer"
        },
        "autoMobilityPoints": {
          "type": "integer"
        },
        "autoRotorPoints": {
          "type": "integer"
        },
        "autoFuelPoints": {
          "type": "integer"
        },
        "teleopFuelPoints": {
          "type": "integer"
        },
        "teleopFuelLow": {
          "type": "integer"
        },
        "teleopFuelHigh": {
          "type": "integer"
        },
        "teleopRotorPoints": {
          "type": "integer"
        },
        "kPaRankingPointAchieved": {
          "type": "boolean"
        },
        "teleopTakeoffPoints": {
          "type": "integer"
        },
        "kPaBonusPoints": {
          "type": "integer"
        },
        "rotorBonusPoints": {
          "type": "integer"
        },
        "rotor1Engaged": {
          "type": "boolean"
        },
        "rotor2Engaged": {
          "type": "boolean"
        },
        "rotor3Engaged": {
          "type": "boolean"
        },
        "rotor4Engaged": {
          "type": "boolean"
        },
        "rotorRankingPointAchieved": {
          "type": "boolean"
        },
        "techFoulCount": {
          "type": "integer"
        },
        "foulCount": {
          "type": "integer"
        },
        "touchpadNear": {
          "type": "string"
        },
        "touchpadMiddle": {
          "type": "string"
        },
        "touchpadFar": {
          "type": "string"
        }
      }
    },
    "Match_Score_Breakdown_2018": {
      "type": "object",
      "properties": {
        "blue": {
          "$ref": "#/definitions/Match_Score_Breakdown_2018_Alliance"
        },
        "red": {
          "$ref": "#/definitions/Match_Score_Breakdown_2018_Alliance"
        }
      },
      "description": "See the 2018 FMS API documentation for a description of each value."
    },
    "Match_Score_Breakdown_2018_Alliance": {
      "type": "object",
      "properties": {
        "adjustPoints": {
          "type": "integer"
        },
        "autoOwnershipPoints": {
          "type": "integer"
        },
        "autoPoints": {
          "type": "integer"
        },
        "autoQuestRankingPoint": {
          "type": "boolean"
        },
        "autoRobot1": {
          "type": "string"
        },
        "autoRobot2": {
          "type": "string"
        },
        "autoRobot3": {
          "type": "string"
        },
        "autoRunPoints": {
          "type": "integer"
        },
        "autoScaleOwnershipSec": {
          "type": "integer"
        },
        "autoSwitchAtZero": {
          "type": "boolean"
        },
        "autoSwitchOwnershipSec": {
          "type": "integer"
        },
        "endgamePoints": {
          "type": "integer"
        },
        "endgameRobot1": {
          "type": "string"
        },
        "endgameRobot2": {
          "type": "string"
        },
        "endgameRobot3": {
          "type": "string"
        },
        "faceTheBossRankingPoint": {
          "type": "boolean"
        },
        "foulCount": {
          "type": "integer"
        },
        "foulPoints": {
          "type": "integer"
        },
        "rp": {
          "type": "integer"
        },
        "techFoulCount": {
          "type": "integer"
        },
        "teleopOwnershipPoints": {
          "type": "integer"
        },
        "teleopPoints": {
          "type": "integer"
        },
        "teleopScaleBoostSec": {
          "type": "integer"
        },
        "teleopScaleForceSec": {
          "type": "integer"
        },
        "teleopScaleOwnershipSec": {
          "type": "integer"
        },
        "teleopSwitchBoostSec": {
          "type": "integer"
        },
        "teleopSwitchForceSec": {
          "type": "integer"
        },
        "teleopSwitchOwnershipSec": {
          "type": "integer"
        },
        "totalPoints": {
          "type": "integer"
        },
        "vaultBoostPlayed": {
          "type": "integer"
        },
        "vaultBoostTotal": {
          "type": "integer"
        },
        "vaultForcePlayed": {
          "type": "integer"
        },
        "vaultForceTotal": {
          "type": "integer"
        },
        "vaultLevitatePlayed": {
          "type": "integer"
        },
        "vaultLevitateTotal": {
          "type": "integer"
        },
        "vaultPoints": {
          "type": "integer"
        },
        "tba_gameData": {
          "type": "string",
          "description": "Unofficial TBA-computed value of the FMS provided GameData given to the alliance teams at the start of the match. 3 Character String containing `L` and `R` only. The first character represents the near switch, the 2nd the scale, and the 3rd the far, opposing, switch from the alliance's perspective. An `L` in a position indicates the platform on the left will be lit for the alliance while an `R` will indicate the right platform will be lit for the alliance. See also [WPI Screen Steps](https://wpilib.screenstepslive.com/s/currentCS/m/getting_started/l/826278-2018-game-data-details)."
        }
      }
    },
    "Match_Timeseries_2018": {
      "type": "object",
      "description": "Timeseries data for the 2018 game *FIRST* POWER UP.\n*WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up.\n*WARNING:* This model is currently under active development and may change at any time, including in breaking ways.",
      "properties": {
        "event_key": {
          "description": "TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.",
          "type": "string"
        },
        "match_id": {
          "description": "Match ID consisting of the level, match number, and set number, eg `qm45` or `f1m1`.",
          "type": "string"
        },
        "mode": {
          "description": "Current mode of play, can be `pre_match`, `auto`, `telop`, or `post_match`.",
          "type": "string"
        },
        "play": {
          "type": "integer"
        },
        "time_remaining": {
          "description": "Amount of time remaining in the match, only valid during `auto` and `teleop` modes.",
          "type": "integer"
        },
        "blue_auto_quest": {
          "description": "1 if the blue alliance is credited with the AUTO QUEST, 0 if not.",
          "type": "integer"
        },
        "blue_boost_count": {
          "description": "Number of POWER CUBES in the BOOST section of the blue alliance VAULT.",
          "type": "integer"
        },
        "blue_boost_played": {
          "description": "Returns 1 if the blue alliance BOOST was played, or 0 if not played.",
          "type": "integer"
        },
        "blue_current_powerup": {
          "description": "Name of the current blue alliance POWER UP being played, or `null`.",
          "type": "string"
        },
        "blue_face_the_boss": {
          "description": "1 if the blue alliance is credited with FACING THE BOSS, 0 if not.",
          "type": "integer"
        },
        "blue_force_count": {
          "description": "Number of POWER CUBES in the FORCE section of the blue alliance VAULT.",
          "type": "integer"
        },
        "blue_force_played": {
          "description": "Returns 1 if the blue alliance FORCE was played, or 0 if not played.",
          "type": "integer"
        },
        "blue_levitate_count": {
          "description": "Number of POWER CUBES in the LEVITATE section of the blue alliance VAULT.",
          "type": "integer"
        },
        "blue_levitate_played": {
          "description": "Returns 1 if the blue alliance LEVITATE was played, or 0 if not played.",
          "type": "integer"
        },
        "blue_powerup_time_remaining": {
          "description": "Number of seconds remaining in the blue alliance POWER UP time, or 0 if none is active.",
          "type": "string"
        },
        "blue_scale_owned": {
          "description": "1 if the blue alliance owns the SCALE, 0 if not.",
          "type": "integer"
        },
        "blue_score": {
          "description": "Current score for the blue alliance.",
          "type": "integer"
        },
        "blue_switch_owned": {
          "description": "1 if the blue alliance owns their SWITCH, 0 if not.",
          "type": "integer"
        },
        "red_auto_quest": {
          "description": "1 if the red alliance is credited with the AUTO QUEST, 0 if not.",
          "type": "integer"
        },
        "red_boost_count": {
          "description": "Number of POWER CUBES in the BOOST section of the red alliance VAULT.",
          "type": "integer"
        },
        "red_boost_played": {
          "description": "Returns 1 if the red alliance BOOST was played, or 0 if not played.",
          "type": "integer"
        },
        "red_current_powerup": {
          "description": "Name of the current red alliance POWER UP being played, or `null`.",
          "type": "string"
        },
        "red_face_the_boss": {
          "description": "1 if the red alliance is credited with FACING THE BOSS, 0 if not.",
          "type": "integer"
        },
        "red_force_count": {
          "description": "Number of POWER CUBES in the FORCE section of the red alliance VAULT.",
          "type": "integer"
        },
        "red_force_played": {
          "description": "Returns 1 if the red alliance FORCE was played, or 0 if not played.",
          "type": "integer"
        },
        "red_levitate_count": {
          "description": "Number of POWER CUBES in the LEVITATE section of the red alliance VAULT.",
          "type": "integer"
        },
        "red_levitate_played": {
          "description": "Returns 1 if the red alliance LEVITATE was played, or 0 if not played.",
          "type": "integer"
        },
        "red_powerup_time_remaining": {
          "description": "Number of seconds remaining in the red alliance POWER UP time, or 0 if none is active.",
          "type": "string"
        },
        "red_scale_owned": {
          "description": "1 if the red alliance owns the SCALE, 0 if not.",
          "type": "integer"
        },
        "red_score": {
          "description": "Current score for the red alliance.",
          "type": "integer"
        },
        "red_switch_owned": {
          "description": "1 if the red alliance owns their SWITCH, 0 if not.",
          "type": "integer"
        }
      }
    },
    "Media": {
      "type": "object",
      "required": [
        "key",
        "type"
      ],
      "description": "The `Media` object contains a reference for most any media associated with a team or event on TBA.",
      "properties": {
        "key": {
          "type": "string",
          "description": "TBA identifier for this media."
        },
        "type": {
          "type": "string",
          "description": "String type of the media element.",
          "enum": [
            "youtube",
            "cdphotothread",
            "imgur",
            "facebook-profile",
            "youtube-channel",
            "twitter-profile",
            "github-profile",
            "instagram-profile",
            "periscope-profile",
            "grabcad",
            "instagram-image",
            "external-link",
            "avatar"
          ] 
        },
        "foreign_key": {
          "type": "string",
          "description": "The key used to identify this media on the media site."
        },
        "details": {
          "type": "object",
          "description": "If required, a JSON dict of additional media information."
        },
        "preferred": {
          "type": "boolean",
          "description": "True if the media is of high quality."
        }
      }
    },
    "Elimination_Alliance": {
      "type": "object",
      "required": [
        "picks"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Alliance name, may be null."
        },
        "backup": {
          "type": "object",
          "properties": {
            "out": {
              "type": "string",
              "description": "Team key that was replaced by the backup team."
            },
            "in": {
              "type": "string",
              "description": "Team key that was called in as the backup."
            }
          },
          "description": "Backup team called in, may be null."
        },
        "declines": {
          "type": "array",
          "description": "List of teams that declined the alliance.",
          "items": {
            "type": "string",
            "description": "Team key that declined the alliance."
          }
        },
        "picks": {
          "type": "array",
          "description": "List of team keys picked for the alliance. First pick is captain.",
          "items": {
            "type": "string",
            "description": "Team key picked for the alliance."
          }
        },
        "status": {
          "type": "object",
          "properties": {
            "current_level_record": {
              "$ref": "#/definitions/WLT_Record"
            },
            "level": {
              "type": "string"
            },
            "playoff_average": {
              "type": "number",
              "format": "double"
            },
            "record": {
              "$ref": "#/definitions/WLT_Record"
            },
            "status": {
              "type": "string"
            }
          }
        }
      }
    },
    "Award": {
      "type": "object",
      "required": [
        "award_type",
        "event_key",
        "name",
        "year",
        "recipient_list"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the award as provided by FIRST. May vary for the same award type."
        },
        "award_type": {
          "type": "integer",
          "description": "Type of award given. See https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/award_type.py#L6"
        },
        "event_key": {
          "type": "string",
          "description": "The event_key of the event the award was won at."
        },
        "recipient_list": {
          "type": "array",
          "description": "A list of recipients of the award at the event. Either team_key and/or awardee for individual awards.",
          "items": {
            "$ref": "#/definitions/Award_Recipient"
          }
        },
        "year": {
          "type": "integer",
          "description": "The year this award was won."
        }
      }
    },
    "Award_Recipient": {
      "type": "object",
      "description": "An `Award_Recipient` object represents the team and/or person who received an award at an event.",
      "properties": {
        "team_key": {
          "type": "string",
          "description": "The TBA team key for the team that was given the award. May be null."
        },
        "awardee": {
          "type": "string",
          "description": "The name of the individual given the award. May be null."
        }
      }
    },
    "District_List": {
      "type": "object",
      "required": [
        "display_name",
        "abbreviation",
        "key",
        "year"
      ],
      "properties": {
        "abbreviation": {
          "type": "string",
          "description": "The short identifier for the district."
        },
        "display_name": {
          "type": "string",
          "description": "The long name for the district."
        },
        "key": {
          "type": "string",
          "description": "Key for this district, e.g. `2016ne`."
        },
        "year": {
          "type": "integer",
          "description": "Year this district participated."
        }
      }
    },
    "District_Ranking": {
      "type": "object",
      "required": [
        "point_total",
        "rank",
        "team_key"
      ],
      "description": "Rank of a team in a district.",
      "properties": {
        "team_key": {
          "type": "string",
          "description": "TBA team key for the team."
        },
        "rank": {
          "type": "integer",
          "description": "Numerical rank of the team, 1 being top rank."
        },
        "rookie_bonus": {
          "type": "integer",
          "description": "Any points added to a team as a result of the rookie bonus."
        },
        "point_total": {
          "type": "integer",
          "description": "Total district points for the team."
        },
        "event_points": {
          "type": "array",
          "description": "List of events that contributed to the point total for the team.",
          "items": {
            "type": "object",
            "required": [
              "event_key",
              "district_cmp",
              "alliance_points",
              "award_points",
              "qual_points",
              "elim_points",
              "total"
            ],
            "properties": {
              "event_key": {
                "type": "string",
                "description": "TBA Event key for this event."
              },
              "district_cmp": {
                "type": "boolean",
                "description": "`true` if this event is a District Championship event."
              },
              "alliance_points": {
                "type": "integer",
                "description": "Points awarded for alliance selection."
              },
              "award_points": {
                "type": "integer",
                "description": "Points awarded for event awards."
              },
              "qual_points": {
                "type": "integer",
                "description": "Points awarded for qualification match performance."
              },
              "elim_points": {
                "type": "integer",
                "description": "Points awarded for elimination match performance."
              },
              "total": {
                "type": "integer",
                "description": "Total points awarded at this event."
              }
            }
          }
        }
      }
    },
    "WLT_Record": {
      "type": "object",
      "required": [
        "wins",
        "losses",
        "ties"
      ],
      "description": "A Win-Loss-Tie record for a team, or an alliance.",
      "properties": {
        "losses": {
          "type": "integer",
          "description": "Number of losses."
        },
        "wins": {
          "type": "integer",
          "description": "Number of wins."
        },
        "ties": {
          "type": "integer",
          "description": "Number of ties."
        }
      }
    }
  }
}
