from email.generator import Generator as BytesGenerator
from typing import Any, Optional

V1_DISCOVERY_URI = DISCOVERY_URI

class _BytesGenerator(BytesGenerator): ...

def fix_method_name(name: Any): ...
def key2param(key: Any): ...
def build(serviceName: Any, version: Any, http: Optional[Any] = ..., discoveryServiceUrl: Any = ..., developerKey: Optional[Any] = ..., model: Optional[Any] = ..., requestBuilder: Any = ..., credentials: Optional[Any] = ..., cache_discovery: bool = ..., cache: Optional[Any] = ..., client_options: Optional[Any] = ..., adc_cert_path: Optional[Any] = ..., adc_key_path: Optional[Any] = ...): ...
def build_from_document(service: Any, base: Optional[Any] = ..., future: Optional[Any] = ..., http: Optional[Any] = ..., developerKey: Optional[Any] = ..., model: Optional[Any] = ..., requestBuilder: Any = ..., credentials: Optional[Any] = ..., client_options: Optional[Any] = ..., adc_cert_path: Optional[Any] = ..., adc_key_path: Optional[Any] = ...): ...

class ResourceMethodParameters:
    argmap: Any = ...
    required_params: Any = ...
    repeated_params: Any = ...
    pattern_params: Any = ...
    query_params: Any = ...
    path_params: Any = ...
    param_types: Any = ...
    enum_params: Any = ...
    def __init__(self, method_desc: Any) -> None: ...
    def set_parameters(self, method_desc: Any) -> None: ...

class Resource:
    def __init__(self, http: Any, baseUrl: Any, model: Any, requestBuilder: Any, developerKey: Any, resourceDesc: Any, rootDesc: Any, schema: Any) -> None: ...
