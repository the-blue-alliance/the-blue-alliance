from bs4.builder import HTMLTreeBuilder
from html5lib.treebuilders import base as treebuilder_base
from typing import Any, Optional

class HTML5TreeBuilder(HTMLTreeBuilder):
    NAME: str = ...
    features: Any = ...
    TRACKS_LINE_NUMBERS: bool = ...
    user_specified_encoding: Any = ...
    def prepare_markup(self, markup: Any, user_specified_encoding: Any, document_declared_encoding: Optional[Any] = ..., exclude_encodings: Optional[Any] = ...) -> None: ...
    def feed(self, markup: Any) -> None: ...
    underlying_builder: Any = ...
    def create_treebuilder(self, namespaceHTMLElements: Any): ...
    def test_fragment_to_document(self, fragment: Any): ...

class TreeBuilderForHtml5lib(treebuilder_base.TreeBuilder):
    soup: Any = ...
    parser: Any = ...
    store_line_numbers: Any = ...
    def __init__(self, namespaceHTMLElements: Any, soup: Optional[Any] = ..., store_line_numbers: bool = ..., **kwargs: Any) -> None: ...
    def documentClass(self): ...
    def insertDoctype(self, token: Any) -> None: ...
    def elementClass(self, name: Any, namespace: Any): ...
    def commentClass(self, data: Any): ...
    def fragmentClass(self): ...
    def appendChild(self, node: Any) -> None: ...
    def getDocument(self): ...
    def getFragment(self): ...
    def testSerializer(self, element: Any): ...

class AttrList:
    element: Any = ...
    attrs: Any = ...
    def __init__(self, element: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def __setitem__(self, name: Any, value: Any) -> None: ...
    def items(self): ...
    def keys(self): ...
    def __len__(self): ...
    def __getitem__(self, name: Any): ...
    def __contains__(self, name: Any): ...

class Element(treebuilder_base.Node):
    element: Any = ...
    soup: Any = ...
    namespace: Any = ...
    def __init__(self, element: Any, soup: Any, namespace: Any) -> None: ...
    def appendChild(self, node: Any) -> None: ...
    def getAttributes(self): ...
    def setAttributes(self, attributes: Any) -> None: ...
    attributes: Any = ...
    def insertText(self, data: Any, insertBefore: Optional[Any] = ...) -> None: ...
    def insertBefore(self, node: Any, refNode: Any) -> None: ...
    def removeChild(self, node: Any) -> None: ...
    def reparentChildren(self, new_parent: Any) -> None: ...
    def cloneNode(self): ...
    def hasContent(self): ...
    def getNameTuple(self): ...
    nameTuple: Any = ...

class TextNode(Element):
    element: Any = ...
    soup: Any = ...
    def __init__(self, element: Any, soup: Any) -> None: ...
    def cloneNode(self) -> None: ...
