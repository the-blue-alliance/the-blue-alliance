from bs4.builder import HTMLTreeBuilder, TreeBuilder
from typing import Any, Optional

class LXMLTreeBuilderForXML(TreeBuilder):
    DEFAULT_PARSER_CLASS: Any = ...
    is_xml: bool = ...
    processing_instruction_class: Any = ...
    NAME: str = ...
    ALTERNATE_NAMES: Any = ...
    features: Any = ...
    CHUNK_SIZE: int = ...
    DEFAULT_NSMAPS: Any = ...
    DEFAULT_NSMAPS_INVERTED: Any = ...
    def initialize_soup(self, soup: Any) -> None: ...
    def default_parser(self, encoding: Any): ...
    def parser_for(self, encoding: Any): ...
    empty_element_tags: Any = ...
    soup: Any = ...
    nsmaps: Any = ...
    def __init__(self, parser: Optional[Any] = ..., empty_element_tags: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def prepare_markup(self, markup: Any, user_specified_encoding: Optional[Any] = ..., exclude_encodings: Optional[Any] = ..., document_declared_encoding: Optional[Any] = ...) -> None: ...
    parser: Any = ...
    def feed(self, markup: Any) -> None: ...
    def close(self) -> None: ...
    def start(self, name: Any, attrs: Any, nsmap: Any = ...) -> None: ...
    def end(self, name: Any) -> None: ...
    def pi(self, target: Any, data: Any) -> None: ...
    def data(self, content: Any) -> None: ...
    def doctype(self, name: Any, pubid: Any, system: Any) -> None: ...
    def comment(self, content: Any) -> None: ...
    def test_fragment_to_document(self, fragment: Any): ...

class LXMLTreeBuilder(HTMLTreeBuilder, LXMLTreeBuilderForXML):
    NAME: Any = ...
    ALTERNATE_NAMES: Any = ...
    features: Any = ...
    is_xml: bool = ...
    processing_instruction_class: Any = ...
    def default_parser(self, encoding: Any): ...
    parser: Any = ...
    def feed(self, markup: Any) -> None: ...
    def test_fragment_to_document(self, fragment: Any): ...
