import string
import typing as t
import typing_extensions as te
from _typeshed import Incomplete

class HasHTML(Protocol):
    def __html__(self) -> str: ...

class Markup(str):
    def __new__(cls, base: t.Any = ..., encoding: t.Optional[str] = ..., errors: str = ...) -> Markup: ...
    def __html__(self) -> Markup: ...
    def __add__(self, other: t.Union[str, 'HasHTML']) -> Markup: ...
    def __radd__(self, other: t.Union[str, 'HasHTML']) -> Markup: ...
    def __mul__(self, num: te.SupportsIndex) -> Markup: ...
    __rmul__ = __mul__
    def __mod__(self, arg: t.Any) -> Markup: ...
    def join(self, seq: t.Iterable[t.Union[str, 'HasHTML']]) -> Markup: ...
    def split(self, sep: t.Optional[str] = ..., maxsplit: int = ...) -> t.List['Markup']: ...
    def rsplit(self, sep: t.Optional[str] = ..., maxsplit: int = ...) -> t.List['Markup']: ...
    def splitlines(self, keepends: bool = ...) -> t.List['Markup']: ...
    def unescape(self) -> str: ...
    def striptags(self) -> str: ...
    @classmethod
    def escape(cls, s: t.Any) -> Markup: ...
    def partition(self, sep: str) -> t.Tuple['Markup', 'Markup', 'Markup']: ...
    def rpartition(self, sep: str) -> t.Tuple['Markup', 'Markup', 'Markup']: ...
    def format(self, *args: t.Any, **kwargs: t.Any) -> Markup: ...
    def __html_format__(self, format_spec: str) -> Markup: ...

class EscapeFormatter(string.Formatter):
    escape: Incomplete
    def __init__(self, escape: t.Callable[[t.Any], Markup]) -> None: ...
    def format_field(self, value: t.Any, format_spec: str) -> str: ...

class _MarkupEscapeHelper:
    obj: Incomplete
    escape: Incomplete
    def __init__(self, obj: t.Any, escape: t.Callable[[t.Any], Markup]) -> None: ...
    def __getitem__(self, item: t.Any) -> _MarkupEscapeHelper: ...
    def __int__(self) -> int: ...
    def __float__(self) -> float: ...
