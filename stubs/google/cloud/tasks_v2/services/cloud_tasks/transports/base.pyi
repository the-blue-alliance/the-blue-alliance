import abc
import typing
from google.api_core import gapic_v1
from google.auth import credentials
from google.cloud.tasks_v2.types import cloudtasks, queue, queue as gct_queue, task, task as gct_task
from google.iam.v1 import iam_policy_pb2 as iam_policy, policy_pb2 as policy
from google.protobuf import empty_pb2 as empty
from typing import Any

class CloudTasksTransport(abc.ABC):
    AUTH_SCOPES: Any = ...
    def __init__(self, *, host: str=..., credentials: credentials.Credentials=..., credentials_file: typing.Optional[str]=..., scopes: typing.Optional[typing.Sequence[str]]=..., quota_project_id: typing.Optional[str]=..., client_info: gapic_v1.client_info.ClientInfo=..., **kwargs: Any) -> None: ...
    @property
    def list_queues(self) -> typing.Callable[[cloudtasks.ListQueuesRequest], typing.Union[cloudtasks.ListQueuesResponse, typing.Awaitable[cloudtasks.ListQueuesResponse]]]: ...
    @property
    def get_queue(self) -> typing.Callable[[cloudtasks.GetQueueRequest], typing.Union[queue.Queue, typing.Awaitable[queue.Queue]]]: ...
    @property
    def create_queue(self) -> typing.Callable[[cloudtasks.CreateQueueRequest], typing.Union[gct_queue.Queue, typing.Awaitable[gct_queue.Queue]]]: ...
    @property
    def update_queue(self) -> typing.Callable[[cloudtasks.UpdateQueueRequest], typing.Union[gct_queue.Queue, typing.Awaitable[gct_queue.Queue]]]: ...
    @property
    def delete_queue(self) -> typing.Callable[[cloudtasks.DeleteQueueRequest], typing.Union[empty.Empty, typing.Awaitable[empty.Empty]]]: ...
    @property
    def purge_queue(self) -> typing.Callable[[cloudtasks.PurgeQueueRequest], typing.Union[queue.Queue, typing.Awaitable[queue.Queue]]]: ...
    @property
    def pause_queue(self) -> typing.Callable[[cloudtasks.PauseQueueRequest], typing.Union[queue.Queue, typing.Awaitable[queue.Queue]]]: ...
    @property
    def resume_queue(self) -> typing.Callable[[cloudtasks.ResumeQueueRequest], typing.Union[queue.Queue, typing.Awaitable[queue.Queue]]]: ...
    @property
    def get_iam_policy(self) -> typing.Callable[[iam_policy.GetIamPolicyRequest], typing.Union[policy.Policy, typing.Awaitable[policy.Policy]]]: ...
    @property
    def set_iam_policy(self) -> typing.Callable[[iam_policy.SetIamPolicyRequest], typing.Union[policy.Policy, typing.Awaitable[policy.Policy]]]: ...
    @property
    def test_iam_permissions(self) -> typing.Callable[[iam_policy.TestIamPermissionsRequest], typing.Union[iam_policy.TestIamPermissionsResponse, typing.Awaitable[iam_policy.TestIamPermissionsResponse]]]: ...
    @property
    def list_tasks(self) -> typing.Callable[[cloudtasks.ListTasksRequest], typing.Union[cloudtasks.ListTasksResponse, typing.Awaitable[cloudtasks.ListTasksResponse]]]: ...
    @property
    def get_task(self) -> typing.Callable[[cloudtasks.GetTaskRequest], typing.Union[task.Task, typing.Awaitable[task.Task]]]: ...
    @property
    def create_task(self) -> typing.Callable[[cloudtasks.CreateTaskRequest], typing.Union[gct_task.Task, typing.Awaitable[gct_task.Task]]]: ...
    @property
    def delete_task(self) -> typing.Callable[[cloudtasks.DeleteTaskRequest], typing.Union[empty.Empty, typing.Awaitable[empty.Empty]]]: ...
    @property
    def run_task(self) -> typing.Callable[[cloudtasks.RunTaskRequest], typing.Union[task.Task, typing.Awaitable[task.Task]]]: ...
