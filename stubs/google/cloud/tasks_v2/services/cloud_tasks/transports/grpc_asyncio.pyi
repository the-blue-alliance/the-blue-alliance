import grpc
from .base import CloudTasksTransport
from google.api_core import gapic_v1
from google.auth import credentials
from google.cloud.tasks_v2.types import cloudtasks, queue, queue as gct_queue, task, task as gct_task
from google.iam.v1 import iam_policy_pb2 as iam_policy, policy_pb2 as policy
from google.protobuf import empty_pb2 as empty
from grpc.experimental import aio
from typing import Any, Awaitable, Callable, Optional, Sequence, Tuple

class CloudTasksGrpcAsyncIOTransport(CloudTasksTransport):
    @classmethod
    def create_channel(cls: Any, host: str=..., credentials: credentials.Credentials=..., credentials_file: Optional[str]=..., scopes: Optional[Sequence[str]]=..., quota_project_id: Optional[str]=..., **kwargs: Any) -> aio.Channel: ...
    def __init__(self, *, host: str=..., credentials: credentials.Credentials=..., credentials_file: Optional[str]=..., scopes: Optional[Sequence[str]]=..., channel: aio.Channel=..., api_mtls_endpoint: str=..., client_cert_source: Callable[[], Tuple[bytes, bytes]]=..., ssl_channel_credentials: grpc.ChannelCredentials=..., quota_project_id: Any=..., client_info: gapic_v1.client_info.ClientInfo=...) -> None: ...
    @property
    def grpc_channel(self) -> aio.Channel: ...
    @property
    def list_queues(self) -> Callable[[cloudtasks.ListQueuesRequest], Awaitable[cloudtasks.ListQueuesResponse]]: ...
    @property
    def get_queue(self) -> Callable[[cloudtasks.GetQueueRequest], Awaitable[queue.Queue]]: ...
    @property
    def create_queue(self) -> Callable[[cloudtasks.CreateQueueRequest], Awaitable[gct_queue.Queue]]: ...
    @property
    def update_queue(self) -> Callable[[cloudtasks.UpdateQueueRequest], Awaitable[gct_queue.Queue]]: ...
    @property
    def delete_queue(self) -> Callable[[cloudtasks.DeleteQueueRequest], Awaitable[empty.Empty]]: ...
    @property
    def purge_queue(self) -> Callable[[cloudtasks.PurgeQueueRequest], Awaitable[queue.Queue]]: ...
    @property
    def pause_queue(self) -> Callable[[cloudtasks.PauseQueueRequest], Awaitable[queue.Queue]]: ...
    @property
    def resume_queue(self) -> Callable[[cloudtasks.ResumeQueueRequest], Awaitable[queue.Queue]]: ...
    @property
    def get_iam_policy(self) -> Callable[[iam_policy.GetIamPolicyRequest], Awaitable[policy.Policy]]: ...
    @property
    def set_iam_policy(self) -> Callable[[iam_policy.SetIamPolicyRequest], Awaitable[policy.Policy]]: ...
    @property
    def test_iam_permissions(self) -> Callable[[iam_policy.TestIamPermissionsRequest], Awaitable[iam_policy.TestIamPermissionsResponse]]: ...
    @property
    def list_tasks(self) -> Callable[[cloudtasks.ListTasksRequest], Awaitable[cloudtasks.ListTasksResponse]]: ...
    @property
    def get_task(self) -> Callable[[cloudtasks.GetTaskRequest], Awaitable[task.Task]]: ...
    @property
    def create_task(self) -> Callable[[cloudtasks.CreateTaskRequest], Awaitable[gct_task.Task]]: ...
    @property
    def delete_task(self) -> Callable[[cloudtasks.DeleteTaskRequest], Awaitable[empty.Empty]]: ...
    @property
    def run_task(self) -> Callable[[cloudtasks.RunTaskRequest], Awaitable[task.Task]]: ...
