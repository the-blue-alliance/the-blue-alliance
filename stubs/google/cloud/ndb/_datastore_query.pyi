from google.cloud.datastore import helpers as helpers
from google.cloud.datastore_v1.proto import datastore_pb2 as datastore_pb2, entity_pb2 as entity_pb2, query_pb2 as query_pb2
from google.cloud.ndb import exceptions as exceptions, model as model, tasklets as tasklets
from typing import Any, Optional

log: Any
MoreResultsType: Any
MORE_RESULTS_TYPE_NOT_FINISHED: Any
MORE_RESULTS_AFTER_LIMIT: Any
ResultType: Any
RESULT_TYPE_FULL: Any
RESULT_TYPE_KEY_ONLY: Any
RESULT_TYPE_PROJECTION: Any
DOWN: Any
UP: Any
FILTER_OPERATORS: Any

def make_filter(name: Any, op: Any, value: Any): ...
def make_composite_and_filter(filter_pbs: Any): ...
def fetch(query: Any) -> None: ...
def iterate(query: Any, raw: bool = ...): ...

class QueryIterator:
    def __iter__(self) -> Any: ...
    def has_next(self) -> None: ...
    def has_next_async(self) -> None: ...
    def probably_has_next(self) -> None: ...
    def next(self) -> None: ...
    def cursor_before(self) -> None: ...
    def cursor_after(self) -> None: ...
    def index_list(self) -> None: ...

class _QueryIteratorImpl(QueryIterator):
    def __init__(self, query: Any, raw: bool = ...) -> None: ...
    def has_next(self): ...
    def has_next_async(self) -> None: ...
    def probably_has_next(self): ...
    def next(self): ...
    __next__: Any = ...
    def cursor_before(self): ...
    def cursor_after(self): ...

class _PostFilterQueryIteratorImpl(QueryIterator):
    def __init__(self, query: Any, predicate: Any, raw: bool = ...) -> None: ...
    def has_next(self): ...
    def has_next_async(self) -> None: ...
    def probably_has_next(self): ...
    def next(self): ...
    __next__: Any = ...
    def cursor_before(self): ...
    def cursor_after(self): ...

class _MultiQueryIteratorImpl(QueryIterator):
    def __init__(self, query: Any, raw: bool = ...) -> None: ...
    def has_next(self): ...
    def has_next_async(self) -> None: ...
    def probably_has_next(self): ...
    def next(self): ...
    __next__: Any = ...
    def cursor_before(self) -> None: ...
    def cursor_after(self) -> None: ...

class _Result:
    result_type: Any = ...
    result_pb: Any = ...
    order_by: Any = ...
    cursor: Any = ...
    def __init__(self, result_type: Any, result_pb: Any, order_by: Optional[Any] = ...) -> None: ...
    def __lt__(self, other: Any) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def entity(self): ...

class Cursor:
    @classmethod
    def from_websafe_string(cls, urlsafe: Any): ...
    cursor: Any = ...
    def __init__(self, cursor: Optional[Any] = ..., urlsafe: Optional[Any] = ...) -> None: ...
    def to_websafe_string(self): ...
    def urlsafe(self): ...
