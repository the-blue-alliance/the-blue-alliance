import threading
from collections import namedtuple
from typing import Any, Optional

class _LocalState(threading.local):
    context: Any = ...
    def __init__(self) -> None: ...

def get_context(raise_context_error: bool = ...): ...

_ContextTuple = namedtuple('_ContextTuple', ['client', 'namespace', 'eventloop', 'batches', 'commit_batches', 'transaction', 'cache', 'global_cache', 'on_commit_callbacks', 'legacy_data'])

class _Context(_ContextTuple):
    def __new__(cls, client: Any, namespace: Any = ..., eventloop: Optional[Any] = ..., batches: Optional[Any] = ..., commit_batches: Optional[Any] = ..., transaction: Optional[Any] = ..., cache: Optional[Any] = ..., cache_policy: Optional[Any] = ..., global_cache: Optional[Any] = ..., global_cache_policy: Optional[Any] = ..., global_cache_timeout_policy: Optional[Any] = ..., datastore_policy: Optional[Any] = ..., on_commit_callbacks: Optional[Any] = ..., legacy_data: bool = ...): ...
    def new(self, **kwargs: Any): ...
    def use(self) -> None: ...

class Context(_Context):
    def clear_cache(self) -> None: ...
    def flush(self) -> None: ...
    def get_namespace(self): ...
    def get_cache_policy(self): ...
    def get_datastore_policy(self) -> None: ...
    def get_global_cache_policy(self): ...
    get_memcache_policy: Any = ...
    def get_global_cache_timeout_policy(self): ...
    get_memcache_timeout_policy: Any = ...
    cache_policy: Any = ...
    def set_cache_policy(self, policy: Any): ...
    datastore_policy: Any = ...
    def set_datastore_policy(self, policy: Any): ...
    global_cache_policy: Any = ...
    def set_global_cache_policy(self, policy: Any): ...
    set_memcache_policy: Any = ...
    global_cache_timeout_policy: Any = ...
    def set_global_cache_timeout_policy(self, policy: Any): ...
    set_memcache_timeout_policy: Any = ...
    def call_on_commit(self, callback: Any) -> None: ...
    def in_transaction(self): ...
    def memcache_add(self, *args: Any, **kwargs: Any) -> None: ...
    def memcache_cas(self, *args: Any, **kwargs: Any) -> None: ...
    def memcache_decr(self, *args: Any, **kwargs: Any) -> None: ...
    def memcache_delete(self, *args: Any, **kwargs: Any) -> None: ...
    def memcache_get(self, *args: Any, **kwargs: Any) -> None: ...
    def memcache_gets(self, *args: Any, **kwargs: Any) -> None: ...
    def memcache_incr(self, *args: Any, **kwargs: Any) -> None: ...
    def memcache_replace(self, *args: Any, **kwargs: Any) -> None: ...
    def memcache_set(self, *args: Any, **kwargs: Any) -> None: ...
    def urlfetch(self, *args: Any, **kwargs: Any) -> None: ...

class ContextOptions:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class TransactionOptions:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class AutoBatcher:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
