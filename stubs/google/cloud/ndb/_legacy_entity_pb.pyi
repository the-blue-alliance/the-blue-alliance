from google.cloud.ndb import _legacy_protocol_buffer as ProtocolBuffer
from typing import Any

class PropertyValue_ReferenceValuePathElement(ProtocolBuffer.ProtocolMessage):
    has_type_: int = ...
    type_: str = ...
    has_id_: int = ...
    id_: int = ...
    has_name_: int = ...
    name_: str = ...
    def type(self): ...
    def set_type(self, x: Any) -> None: ...
    def has_type(self): ...
    def id(self): ...
    def set_id(self, x: Any) -> None: ...
    def has_id(self): ...
    def name(self): ...
    def set_name(self, x: Any) -> None: ...
    def has_name(self): ...
    def TryMerge(self, d: Any) -> None: ...

class PropertyValue_PointValue(ProtocolBuffer.ProtocolMessage):
    has_x_: int = ...
    x_: float = ...
    has_y_: int = ...
    y_: float = ...
    def x(self): ...
    def set_x(self, x: Any) -> None: ...
    def has_x(self): ...
    def y(self): ...
    def set_y(self, x: Any) -> None: ...
    def has_y(self): ...
    def TryMerge(self, d: Any) -> None: ...

class PropertyValue_ReferenceValue(ProtocolBuffer.ProtocolMessage):
    has_app_: int = ...
    app_: str = ...
    has_name_space_: int = ...
    name_space_: str = ...
    has_database_id_: int = ...
    database_id_: str = ...
    pathelement_: Any = ...
    def __init__(self) -> None: ...
    def app(self): ...
    def set_app(self, x: Any) -> None: ...
    def has_app(self): ...
    def name_space(self): ...
    def set_name_space(self, x: Any) -> None: ...
    def has_name_space(self): ...
    def pathelement_list(self): ...
    def add_pathelement(self): ...
    def database_id(self): ...
    def set_database_id(self, x: Any) -> None: ...
    def has_database_id(self): ...
    def TryMerge(self, d: Any) -> None: ...

class PropertyValue(ProtocolBuffer.ProtocolMessage):
    has_int64value_: int = ...
    int64value_: int = ...
    has_booleanvalue_: int = ...
    booleanvalue_: int = ...
    has_stringvalue_: int = ...
    stringvalue_: str = ...
    has_doublevalue_: int = ...
    doublevalue_: float = ...
    has_pointvalue_: int = ...
    pointvalue_: Any = ...
    has_referencevalue_: int = ...
    referencevalue_: Any = ...
    def int64value(self): ...
    def set_int64value(self, x: Any) -> None: ...
    def has_int64value(self): ...
    def booleanvalue(self): ...
    def set_booleanvalue(self, x: Any) -> None: ...
    def has_booleanvalue(self): ...
    def stringvalue(self): ...
    def set_stringvalue(self, x: Any) -> None: ...
    def has_stringvalue(self): ...
    def doublevalue(self): ...
    def set_doublevalue(self, x: Any) -> None: ...
    def has_doublevalue(self): ...
    def pointvalue(self): ...
    def mutable_pointvalue(self): ...
    def has_pointvalue(self): ...
    def referencevalue(self): ...
    def mutable_referencevalue(self): ...
    def has_referencevalue(self): ...
    def TryMerge(self, d: Any) -> None: ...

class Property(ProtocolBuffer.ProtocolMessage):
    NO_MEANING: int = ...
    BLOB: int = ...
    TEXT: int = ...
    BYTESTRING: int = ...
    ATOM_CATEGORY: int = ...
    ATOM_LINK: int = ...
    ATOM_TITLE: int = ...
    ATOM_CONTENT: int = ...
    ATOM_SUMMARY: int = ...
    ATOM_AUTHOR: int = ...
    GD_WHEN: int = ...
    GD_EMAIL: int = ...
    GEORSS_POINT: int = ...
    GD_IM: int = ...
    GD_PHONENUMBER: int = ...
    GD_POSTALADDRESS: int = ...
    GD_RATING: int = ...
    BLOBKEY: int = ...
    ENTITY_PROTO: int = ...
    INDEX_VALUE: int = ...
    EMPTY_LIST: int = ...
    _Meaning_NAMES: Any = ...
    def Meaning_Name(cls, x: Any): ...
    Meaning_Name: Any = ...
    has_meaning_: int = ...
    meaning_: int = ...
    has_meaning_uri_: int = ...
    meaning_uri_: str = ...
    has_name_: int = ...
    name_: str = ...
    has_value_: int = ...
    has_multiple_: int = ...
    multiple_: int = ...
    has_stashed_: int = ...
    stashed_: int = ...
    has_computed_: int = ...
    computed_: int = ...
    value_: Any = ...
    def __init__(self) -> None: ...
    def meaning(self): ...
    def set_meaning(self, x: Any) -> None: ...
    def has_meaning(self): ...
    def meaning_uri(self): ...
    def set_meaning_uri(self, x: Any) -> None: ...
    def has_meaning_uri(self): ...
    def name(self): ...
    def set_name(self, x: Any) -> None: ...
    def has_name(self): ...
    def value(self): ...
    def mutable_value(self): ...
    def has_value(self): ...
    def multiple(self): ...
    def set_multiple(self, x: Any) -> None: ...
    def has_multiple(self): ...
    def stashed(self): ...
    def set_stashed(self, x: Any) -> None: ...
    def has_stashed(self): ...
    def computed(self): ...
    def set_computed(self, x: Any) -> None: ...
    def has_computed(self): ...
    def TryMerge(self, d: Any) -> None: ...

class Path_Element(ProtocolBuffer.ProtocolMessage):
    has_type_: int = ...
    type_: str = ...
    has_id_: int = ...
    id_: int = ...
    has_name_: int = ...
    name_: str = ...
    def type(self): ...
    def set_type(self, x: Any) -> None: ...
    def has_type(self): ...
    def id(self): ...
    def set_id(self, x: Any) -> None: ...
    def has_id(self): ...
    def name(self): ...
    def set_name(self, x: Any) -> None: ...
    def has_name(self): ...
    def TryMerge(self, d: Any) -> None: ...

class Path(ProtocolBuffer.ProtocolMessage):
    element_: Any = ...
    def __init__(self) -> None: ...
    def element_list(self): ...
    def add_element(self): ...
    def TryMerge(self, d: Any) -> None: ...

class Reference(ProtocolBuffer.ProtocolMessage):
    has_app_: int = ...
    app_: str = ...
    has_name_space_: int = ...
    name_space_: str = ...
    has_path_: int = ...
    has_database_id_: int = ...
    database_id_: str = ...
    path_: Any = ...
    def __init__(self) -> None: ...
    def app(self): ...
    def set_app(self, x: Any) -> None: ...
    def has_app(self): ...
    def name_space(self): ...
    def set_name_space(self, x: Any) -> None: ...
    def has_name_space(self): ...
    def path(self): ...
    def mutable_path(self): ...
    def has_path(self): ...
    def database_id(self): ...
    def set_database_id(self, x: Any) -> None: ...
    def has_database_id(self): ...
    def TryMerge(self, d: Any) -> None: ...

class EntityProto(ProtocolBuffer.ProtocolMessage):
    has_key_: int = ...
    has_owner_: int = ...
    owner_: Any = ...
    has_kind_: int = ...
    kind_: int = ...
    has_kind_uri_: int = ...
    kind_uri_: str = ...
    key_: Any = ...
    property_: Any = ...
    def __init__(self) -> None: ...
    def key(self): ...
    def mutable_key(self): ...
    def has_key(self): ...
    def kind(self): ...
    def set_kind(self, x: Any) -> None: ...
    def has_kind(self): ...
    def kind_uri(self): ...
    def set_kind_uri(self, x: Any) -> None: ...
    def has_kind_uri(self): ...
    def property_list(self): ...
    def add_property(self): ...
    def TryMerge(self, d: Any) -> None: ...
    def _get_property_value(self, prop: Any): ...
    def entity_props(self): ...
