import abc
from collections import namedtuple
from typing import Any, Optional

class GlobalCache(metaclass=abc.ABCMeta):
    __metaclass__: Any = ...
    @abc.abstractmethod
    def get(self, keys: Any) -> Any: ...
    @abc.abstractmethod
    def set(self, items: Any, expires: Optional[Any] = ...) -> Any: ...
    @abc.abstractmethod
    def delete(self, keys: Any) -> Any: ...
    @abc.abstractmethod
    def watch(self, keys: Any) -> Any: ...
    @abc.abstractmethod
    def compare_and_swap(self, items: Any, expires: Optional[Any] = ...) -> Any: ...

class _InProcessGlobalCache(GlobalCache):
    cache: Any = ...
    def __init__(self) -> None: ...
    def get(self, keys: Any): ...
    def set(self, items: Any, expires: Optional[Any] = ...) -> None: ...
    def delete(self, keys: Any) -> None: ...
    def watch(self, keys: Any) -> None: ...
    def compare_and_swap(self, items: Any, expires: Optional[Any] = ...) -> None: ...

_Pipeline = namedtuple('_Pipeline', ['pipe', 'id'])

class RedisCache(GlobalCache):
    @classmethod
    def from_environment(cls): ...
    redis: Any = ...
    pipes: Any = ...
    def __init__(self, redis: Any) -> None: ...
    def get(self, keys: Any): ...
    def set(self, items: Any, expires: Optional[Any] = ...) -> None: ...
    def delete(self, keys: Any) -> None: ...
    def watch(self, keys: Any) -> None: ...
    def compare_and_swap(self, items: Any, expires: Optional[Any] = ...): ...
