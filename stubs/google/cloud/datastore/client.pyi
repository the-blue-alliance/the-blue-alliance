from google.api_core.gapic_v1 import client_info as client_info
from google.auth.credentials import AnonymousCredentials as AnonymousCredentials
from google.cloud.client import ClientWithProject as ClientWithProject
from google.cloud.datastore import helpers as helpers
from google.cloud.datastore._gapic import make_datastore_api as make_datastore_api
from google.cloud.datastore._http import HTTPDatastoreAPI as HTTPDatastoreAPI
from google.cloud.datastore.batch import Batch as Batch
from google.cloud.datastore.entity import Entity as Entity
from google.cloud.datastore.key import Key as Key
from google.cloud.datastore.query import Query as Query
from google.cloud.datastore.transaction import Transaction as Transaction
from typing import Any, Optional

DATASTORE_EMULATOR_HOST: str
DATASTORE_DATASET: str
DISABLE_GRPC: str

class Client(ClientWithProject):
    SCOPE: Any = ...
    namespace: Any = ...
    def __init__(self, project: Optional[Any] = ..., namespace: Optional[Any] = ..., credentials: Optional[Any] = ..., client_info: Any = ..., client_options: Optional[Any] = ..., _http: Optional[Any] = ..., _use_grpc: Optional[Any] = ...) -> None: ...
    @property
    def base_url(self): ...
    @base_url.setter
    def base_url(self, value: Any) -> None: ...
    @property
    def current_batch(self): ...
    @property
    def current_transaction(self): ...
    def get(self, key: Any, missing: Optional[Any] = ..., deferred: Optional[Any] = ..., transaction: Optional[Any] = ..., eventual: bool = ..., retry: Optional[Any] = ..., timeout: Optional[Any] = ...): ...
    def get_multi(self, keys: Any, missing: Optional[Any] = ..., deferred: Optional[Any] = ..., transaction: Optional[Any] = ..., eventual: bool = ..., retry: Optional[Any] = ..., timeout: Optional[Any] = ...): ...
    def put(self, entity: Any, retry: Optional[Any] = ..., timeout: Optional[Any] = ...) -> None: ...
    def put_multi(self, entities: Any, retry: Optional[Any] = ..., timeout: Optional[Any] = ...) -> None: ...
    def delete(self, key: Any, retry: Optional[Any] = ..., timeout: Optional[Any] = ...) -> None: ...
    def delete_multi(self, keys: Any, retry: Optional[Any] = ..., timeout: Optional[Any] = ...) -> None: ...
    def allocate_ids(self, incomplete_key: Any, num_ids: Any, retry: Optional[Any] = ..., timeout: Optional[Any] = ...): ...
    def key(self, *path_args: Any, **kwargs: Any): ...
    def batch(self): ...
    def transaction(self, **kwargs: Any): ...
    def query(self, **kwargs: Any): ...
    def reserve_ids_sequential(self, complete_key: Any, num_ids: Any, retry: Optional[Any] = ..., timeout: Optional[Any] = ...) -> None: ...
    def reserve_ids(self, complete_key: Any, num_ids: Any, retry: Optional[Any] = ..., timeout: Optional[Any] = ...): ...
    def reserve_ids_multi(self, complete_keys: Any, retry: Optional[Any] = ..., timeout: Optional[Any] = ...) -> None: ...
