from google.appengine.api import namespace_manager as namespace_manager
from google.appengine.api.runtime import runtime as runtime
from google.appengine.ext.deferred import deferred as deferred
from google.appengine.runtime import background as background, callback as callback, context as context, default_api_stub as default_api_stub, request_environment as request_environment
from typing import Any

MAX_CONCURRENT_REQUESTS: int
ENV_VARS_FROM_HTTP_X_APPENGINE_HEADERS: Any
LOCAL_OVERRIDABLE_VARS: Any

def middleware(f): ...
def Wrap(app, middlewares): ...
def UseRequestSecurityTicketForApiMiddleware(app, wsgi_env, start_response): ...
def WaitForResponseMiddleware(app, wsgi_env, start_response): ...
def ErrorLoggingMiddleware(app, wsgi_env, start_response): ...
def WsgiEnvSettingMiddleware(app, wsgi_env, start_response): ...
def SetContextFromHeadersMiddleware(app, wsgi_env, start_response): ...
def OverrideHttpHeadersFromOsEnvironMiddleware(app, wsgi_env, start_response): ...
def LegacyWsgiRemoveXAppenginePrefixMiddleware(app, wsgi_env, start_response): ...
def MakeLegacyWsgiEnvSettingMiddleware(threadsafe: Any | None = ...): ...
def MakeInitLegacyRequestOsEnvironMiddleware(): ...
def LegacyCopyWsgiEnvToOsEnvMiddleware(app, wsgi_env, start_response): ...
def CallbackMiddleware(app, wsgi_env, start_response): ...
def RunInNewContextMiddleware(app, wsgi_env, start_response): ...

WARMUP_IP: str

def BackgroundAndShutdownMiddleware(app, wsgi_env, start_response): ...
def AddDeferredMiddleware(app, wsgi_env, start_response): ...
def SetNamespaceFromHeader(app, wsgi_env, start_response): ...
