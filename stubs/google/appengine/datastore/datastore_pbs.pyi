from google.appengine.datastore import datastore_v4_pb2 as datastore_v4_pb2, entity_v4_pb2 as entity_v4_pb2
from typing import Any

MISSING_CLOUD_DATASTORE_MESSAGE: Any
MEANING_ATOM_CATEGORY: int
MEANING_URL: int
MEANING_ATOM_TITLE: int
MEANING_ATOM_CONTENT: int
MEANING_ATOM_SUMMARY: int
MEANING_ATOM_AUTHOR: int
MEANING_NON_RFC_3339_TIMESTAMP: int
MEANING_GD_EMAIL: int
MEANING_GEORSS_POINT: int
MEANING_GD_IM: int
MEANING_GD_PHONENUMBER: int
MEANING_GD_POSTALADDRESS: int
MEANING_PERCENT: int
MEANING_TEXT: int
MEANING_BYTESTRING: int
MEANING_BLOBKEY: int
MEANING_INDEX_ONLY: int
MEANING_PREDEFINED_ENTITY_USER: int
MEANING_PREDEFINED_ENTITY_POINT: int
MEANING_ZLIB: int
MEANING_POINT_WITHOUT_V3_MEANING: int
MEANING_EMPTY_LIST: int
URI_MEANING_ZLIB: str
MAX_URL_CHARS: int
MAX_INDEXED_STRING_CHARS: int
MAX_INDEXED_BLOB_BYTES: int
MAX_PARTITION_ID_LENGTH: int
MAX_DATASET_ID_SECTION_LENGTH: int
MAX_DATASET_ID_LENGTH: Any
MAX_KEY_PATH_LENGTH: int
PROPERTY_NAME_X: str
PROPERTY_NAME_Y: str
PROPERTY_NAME_EMAIL: str
PROPERTY_NAME_AUTH_DOMAIN: str
PROPERTY_NAME_USER_ID: str
PROPERTY_NAME_INTERNAL_ID: str
PROPERTY_NAME_FEDERATED_IDENTITY: str
PROPERTY_NAME_FEDERATED_PROVIDER: str
PROPERTY_NAME_KEY: str
DEFAULT_GAIA_ID: int
RFC_3339_MIN_MICROSECONDS_INCLUSIVE: Any
RFC_3339_MAX_MICROSECONDS_INCLUSIVE: Any

def v4_key_to_string(v4_key): ...
def is_complete_v4_key(v4_key): ...
def v1_key_to_string(v1_key): ...
def is_complete_v1_key(v1_key): ...
def is_complete_v3_key(v3_key): ...
def get_v1_mutation_key_and_entity(v1_mutation): ...
def is_valid_utf8(s): ...
def check_conversion(condition, message) -> None: ...
def is_in_rfc_3339_bounds(microseconds): ...

class InvalidConversionError(Exception): ...

class IdResolver:
    def __init__(self, app_ids=...) -> None: ...
    def resolve_project_id(self, app_id): ...
    def resolve_app_id(self, project_id): ...

class _IdentityIdResolver(IdResolver):
    def resolve_project_id(self, app_id): ...
    def resolve_app_id(self, project_id): ...

class _EntityConverter:
    def __init__(self, id_resolver) -> None: ...
    def v4_to_v3_reference(self, v4_key, v3_ref) -> None: ...
    def v4_to_v3_references(self, v4_keys): ...
    def v3_to_v4_key(self, v3_ref, v4_key) -> None: ...
    def v3_to_v4_keys(self, v3_refs): ...
    def v4_to_v3_entity(self, v4_entity, v3_entity, is_projection: bool = ...) -> None: ...
    def v3_to_v4_entity(self, v3_entity, v4_entity) -> None: ...
    def v4_value_to_v3_property_value(self, v4_value, v3_value) -> None: ...
    def v3_property_to_v4_value(self, v3_property, indexed, v4_value) -> None: ...
    def v4_to_v3_property(self, property_name, is_multi, is_projection, v4_value, v3_property) -> None: ...
    def v4_entity_to_v3_user_value(self, v4_user_entity, v3_user_value) -> None: ...
    def v3_user_value_to_v4_entity(self, v3_user_value, v4_entity) -> None: ...
    def v1_to_v3_reference(self, v1_key, v3_ref) -> None: ...
    def v1_to_v3_references(self, v1_keys): ...
    def v3_to_v1_key(self, v3_ref, v1_key) -> None: ...
    def v3_to_v1_keys(self, v3_refs): ...
    def project_to_app_id(self, project_id): ...
    def app_to_project_id(self, app_id): ...
    def v1_to_v3_entity(self, v1_entity, v3_entity, is_projection: bool = ...) -> None: ...
    def v3_to_v1_entity(self, v3_entity, v1_entity) -> None: ...
    def v1_value_to_v3_property_value(self, v1_value, v3_value) -> None: ...
    def v3_property_to_v1_value(self, v3_property, indexed, v1_value) -> None: ...
    def v1_to_v3_property(self, property_name, is_multi, is_projection, v1_value, v3_property) -> None: ...
    def v1_entity_to_v3_user_value(self, v1_user_entity, v3_user_value) -> None: ...
    def v3_user_value_to_v1_entity(self, v3_user_value, v1_entity) -> None: ...
    def v3_reference_to_group(self, v3_ref, group) -> None: ...
    def v3_reference_to_v3_property_value(self, v3_ref, v3_property_value) -> None: ...

class _QueryConverter:
    def __init__(self, entity_converter) -> None: ...
    def get_entity_converter(self): ...
    def v3_order_to_v1_order(self, v3_order, v1_order) -> None: ...
    def v3_order_to_v4_order(self, v3_order, v4_order) -> None: ...

def get_entity_converter(id_resolver: Any | None = ...): ...
def copy_path_element(source, destination) -> None: ...
