from google.appengine.api import apiproxy_rpc, apiproxy_stub
from typing import Any

class AbstractAdapter:
    def __init__(self, id_resolver: Any | None = ...) -> None: ...
    def get_entity_converter(self): ...
    def get_query_converter(self): ...
    def pb_to_key(self, pb) -> None: ...
    def pb_v1_to_key(self, pb): ...
    def pb_to_entity(self, pb) -> None: ...
    def pb_v1_to_entity(self, pb, is_projection): ...
    def pb_v1_to_query_result(self, pb, query_options): ...
    def pb_to_index(self, pb) -> None: ...
    def pb_to_query_result(self, pb, query_options): ...
    def key_to_pb(self, key) -> None: ...
    def key_to_pb_v1(self, key): ...
    def entity_to_pb(self, entity) -> None: ...
    def entity_to_pb_v1(self, entity): ...
    def new_key_pb(self): ...
    def new_entity_pb(self): ...

class IdentityAdapter(AbstractAdapter):
    def __init__(self, id_resolver: Any | None = ...) -> None: ...
    def pb_to_key(self, pb): ...
    def pb_to_entity(self, pb): ...
    def key_to_pb(self, key): ...
    def entity_to_pb(self, entity): ...
    def pb_to_index(self, pb): ...

class ConfigOption:
    validator: Any
    def __init__(self, validator) -> None: ...
    def __get__(self, obj, objtype): ...
    def __set__(self, obj, value) -> None: ...
    def __call__(self, *args): ...

class _ConfigurationMetaClass(type):
    def __new__(metaclass, classname, bases, classDict): ...

class BaseConfiguration:
    def __new__(cls, config: Any | None = ..., **kwargs): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...
    @classmethod
    def is_configuration(cls, obj): ...
    def merge(self, config): ...

class _MergedConfiguration(BaseConfiguration):
    def __new__(cls, *configs): ...
    def __getattr__(self, name): ...

class Configuration(BaseConfiguration):
    STRONG_CONSISTENCY: int
    EVENTUAL_CONSISTENCY: int
    APPLY_ALL_JOBS_CONSISTENCY: int
    ALL_READ_POLICIES: Any
    def deadline(value): ...
    def on_completion(value): ...
    def read_policy(value): ...
    def force_writes(value): ...
    def max_entity_groups_per_rpc(value): ...
    def max_allocate_ids_keys(value): ...
    def max_rpc_bytes(value): ...
    def max_get_keys(value): ...
    def max_put_entities(value): ...
    def max_delete_keys(value): ...

class _NoopRPC(apiproxy_rpc.RPC):
    def __init__(self) -> None: ...

class _NoopRPCStub(apiproxy_stub.APIProxyStub):
    def __init__(self) -> None: ...
    def CreateRPC(self): ...

class MultiRpc:
    def __init__(self, rpcs, extra_hook: Any | None = ...) -> None: ...
    @property
    def rpcs(self): ...
    @property
    def state(self): ...
    def wait(self) -> None: ...
    def check_success(self) -> None: ...
    def get_result(self): ...
    @classmethod
    def flatten(cls, rpcs): ...
    @classmethod
    def wait_any(cls, rpcs): ...
    @classmethod
    def wait_all(cls, rpcs) -> None: ...

class TransactionMode:
    UNKNOWN: int
    READ_ONLY: int
    READ_WRITE: int

class BaseConnection:
    UNKNOWN_DATASTORE: int
    HIGH_REPLICATION_DATASTORE: int
    def __init__(self, adapter: Any | None = ..., config: Any | None = ..., _api_version=...) -> None: ...
    @property
    def adapter(self): ...
    @property
    def config(self): ...
    def is_pending(self, rpc): ...
    def get_pending_rpcs(self): ...
    def get_datastore_type(self, app: Any | None = ...): ...
    def wait_for_all_pending_rpcs(self) -> None: ...
    create_rpc: Any
    make_rpc_call: Any
    def check_rpc_success(self, rpc) -> None: ...
    MAX_RPC_BYTES: Any
    MAX_GET_KEYS: int
    MAX_PUT_ENTITIES: int
    MAX_DELETE_KEYS: int
    MAX_ALLOCATE_IDS_KEYS: int
    DEFAULT_MAX_ENTITY_GROUPS_PER_RPC: int
    def get(self, keys): ...
    def async_get(self, config, keys, extra_hook: Any | None = ...): ...
    def get_indexes(self): ...
    def async_get_indexes(self, config, extra_hook: Any | None = ..., _app: Any | None = ...): ...
    def put(self, entities): ...
    def async_put(self, config, entities, extra_hook: Any | None = ...): ...
    def delete(self, keys): ...
    def async_delete(self, config, keys, extra_hook: Any | None = ...): ...
    def begin_transaction(self, app, previous_transaction: Any | None = ..., mode=...): ...
    def async_begin_transaction(self, config, app, previous_transaction: Any | None = ..., mode=...): ...

class Connection(BaseConnection):
    def __init__(self, adapter: Any | None = ..., config: Any | None = ..., _api_version=...) -> None: ...
    def new_transaction(self, config: Any | None = ..., previous_transaction: Any | None = ..., mode=...): ...
    def allocate_ids(self, key, size: Any | None = ..., max: Any | None = ...): ...
    def async_allocate_ids(self, config, key, size: Any | None = ..., max: Any | None = ..., extra_hook: Any | None = ...): ...

class TransactionOptions(Configuration):
    NESTED: int
    MANDATORY: int
    ALLOWED: int
    INDEPENDENT: int
    def propagation(value): ...
    def xg(value): ...
    def retries(value): ...
    def app(value): ...

class TransactionalConnection(BaseConnection):
    OPEN: int
    COMMIT_IN_FLIGHT: int
    FAILED: int
    CLOSED: int
    def __init__(self, adapter: Any | None = ..., config: Any | None = ..., transaction: Any | None = ..., entity_group: Any | None = ..., _api_version=..., previous_transaction: Any | None = ..., mode=...) -> None: ...
    @property
    def finished(self): ...
    @property
    def transaction(self): ...
    def async_put(self, config, entities, extra_hook: Any | None = ...): ...
    def async_delete(self, config, keys, extra_hook: Any | None = ...): ...
    def commit(self): ...
    def async_commit(self, config): ...
    def rollback(self): ...
    def async_rollback(self, config): ...

class _ThrowingStub(apiproxy_stub.APIProxyStub):
    def __init__(self) -> None: ...
    def MakeSyncCall(self, service, call, request, response) -> None: ...
    def CreateRPC(self): ...
