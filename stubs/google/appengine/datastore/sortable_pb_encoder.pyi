from google.protobuf import descriptor as descriptor, message as message, symbol_database as symbol_database
from typing import Any

def ToBytes(arr): ...
def FromBytes(arr, b) -> None: ...
def GetFieldNumber(field_tuple): ...

class Encoder:
    @classmethod
    def EncodeMessage(cls, msg): ...
    buf: Any
    def __init__(self) -> None: ...
    def Buffer(self): ...
    def Put16(self, value) -> None: ...
    def Put32(self, value) -> None: ...
    def Put64(self, value) -> None: ...
    def PutVarInt32(self, value) -> None: ...
    def PutVarInt64(self, value) -> None: ...
    def PutVarUint64(self, value) -> None: ...
    def PutFloat(self, value) -> None: ...
    def PutDouble(self, value) -> None: ...
    def PutPrefixedString(self, value) -> None: ...
    def PutBytes(self, value) -> None: ...
    def PutBoolean(self, v) -> None: ...
    def PutMessage(self, msg) -> None: ...

class Decoder:
    buf: Any
    idx: Any
    limit: Any
    def __init__(self, buf, idx: int = ..., limit: Any | None = ...) -> None: ...
    @classmethod
    def DecodeMessage(cls, prototype, buf, idx: int = ..., limit: Any | None = ...): ...
    def Get8(self): ...
    def Get16(self): ...
    def Get32(self): ...
    def Get64(self): ...
    def GetVarInt64(self): ...
    def GetVarInt32(self): ...
    def GetVarUint64(self): ...
    def GetFloat(self): ...
    def GetDouble(self): ...
    def GetPrefixedString(self): ...
    def GetBoolean(self): ...
    def GetMessage(self, prototype): ...

def IsFloatNegative(value, encoded): ...
def EncodeDouble(value): ...
