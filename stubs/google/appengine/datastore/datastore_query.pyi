import six
from google.appengine.datastore import datastore_rpc
from typing import Any

class _BaseComponent:
    def __eq__(self, other): ...
    def __ne__(self, other): ...

def make_filter(name, op, values): ...

class _PropertyComponent(_BaseComponent): ...

class FilterPredicate(_PropertyComponent):
    def __call__(self, entity): ...

class _SinglePropertyFilter(FilterPredicate): ...

class PropertyFilter(_SinglePropertyFilter):
    def __init__(self, op, value) -> None: ...
    @property
    def op(self): ...
    @property
    def value(self): ...
    def __eq__(self, other): ...

class _PropertyRangeFilter(_SinglePropertyFilter):
    def __init__(self, start: Any | None = ..., start_incl: bool = ..., end: Any | None = ..., end_incl: bool = ...) -> None: ...
    @classmethod
    def from_property_filter(cls, prop_filter): ...
    def intersect(self, other): ...
    def __eq__(self, other): ...

class _PropertyExistsFilter(FilterPredicate):
    def __init__(self, names) -> None: ...

class CorrelationFilter(FilterPredicate):
    def __init__(self, subfilter) -> None: ...
    @property
    def subfilter(self): ...

class CompositeFilter(FilterPredicate):
    AND: str
    def __init__(self, op, filters) -> None: ...
    @property
    def op(self): ...
    @property
    def filters(self): ...
    def __eq__(self, other): ...

class _IgnoreFilter(_SinglePropertyFilter):
    def __init__(self, key_value_set) -> None: ...

class _DedupingFilter(_IgnoreFilter):
    def __init__(self, key_value_set: Any | None = ...) -> None: ...

class Order(_PropertyComponent):
    def reversed(self, group_by: Any | None = ...) -> None: ...
    def key_for_filter(self, filter_predicate): ...
    def cmp_for_filter(self, filter_predicate): ...
    def key(self, entity, filter_predicate: Any | None = ...): ...
    def cmp(self, lhs, rhs, filter_predicate: Any | None = ...): ...

class _ReverseOrder(_BaseComponent):
    def __init__(self, obj) -> None: ...
    def __hash__(self): ...
    def __cmp__(self, other): ...

class PropertyOrder(Order):
    ASCENDING: Any
    DESCENDING: Any
    def __init__(self, prop, direction=...) -> None: ...
    @property
    def prop(self): ...
    @property
    def direction(self): ...
    def reversed(self, group_by: Any | None = ...): ...

class CompositeOrder(Order):
    def __init__(self, orders) -> None: ...
    @property
    def orders(self): ...
    def reversed(self, group_by: Any | None = ...): ...
    def size(self): ...
    def __eq__(self, other): ...

class FetchOptions(datastore_rpc.Configuration):
    def produce_cursors(value): ...
    def offset(value): ...
    def batch_size(value): ...

class QueryOptions(FetchOptions):
    ORDER_FIRST: Any
    ANCESTOR_FIRST: Any
    FILTER_FIRST: Any
    def keys_only(value): ...
    def projection(value): ...
    def limit(value): ...
    def prefetch_size(value): ...
    def start_cursor(value): ...
    def end_cursor(value): ...
    def hint(value): ...

class Cursor(_BaseComponent):
    def __init__(self, urlsafe: Any | None = ..., _cursor_bytes: Any | None = ...) -> None: ...
    def reversed(self): ...
    def to_bytes(self): ...
    @staticmethod
    def from_bytes(cursor): ...
    def urlsafe(self): ...
    to_websafe_string: Any
    @staticmethod
    def from_websafe_string(cursor): ...
    def advance(self, offset, query, conn): ...

class _QueryKeyFilter(_BaseComponent):
    def __init__(self, app: Any | None = ..., namespace: Any | None = ..., kind: Any | None = ..., ancestor: Any | None = ...) -> None: ...
    @property
    def app(self): ...
    @property
    def namespace(self): ...
    @property
    def kind(self): ...
    @property
    def ancestor(self): ...
    def __call__(self, entity_or_reference): ...

class _BaseQuery(_BaseComponent):
    def run(self, conn, query_options: Any | None = ...): ...
    def run_async(self, conn, query_options: Any | None = ...) -> None: ...

class Query(_BaseQuery):
    def __init__(self, app: Any | None = ..., namespace: Any | None = ..., kind: Any | None = ..., ancestor: Any | None = ..., filter_predicate: Any | None = ..., group_by: Any | None = ..., order: Any | None = ..., read_time_us: Any | None = ...) -> None: ...
    @property
    def app(self): ...
    @property
    def namespace(self): ...
    @property
    def kind(self): ...
    @property
    def ancestor(self): ...
    @property
    def filter_predicate(self): ...
    @property
    def order(self): ...
    @property
    def group_by(self): ...
    @property
    def read_time_us(self): ...
    def run_async(self, conn, query_options: Any | None = ...): ...

def apply_query(query, entities, _key: Any | None = ...): ...

class _AugmentedQuery(_BaseQuery):
    def __init__(self, query, in_memory_results: Any | None = ..., in_memory_filter: Any | None = ..., max_filtered_count: Any | None = ...) -> None: ...
    @property
    def app(self): ...
    @property
    def namespace(self): ...
    @property
    def kind(self): ...
    @property
    def ancestor(self): ...
    @property
    def filter_predicate(self): ...
    @property
    def order(self): ...
    @property
    def group_by(self): ...
    def run_async(self, conn, query_options: Any | None = ...): ...

def inject_results(query, updated_entities: Any | None = ..., deleted_keys: Any | None = ...): ...

class _BatchShared:
    def __init__(self, query, query_options, conn, augmented_query: Any | None = ..., initial_offset: Any | None = ...) -> None: ...
    @property
    def query(self): ...
    @property
    def query_options(self): ...
    @property
    def conn(self): ...
    @property
    def augmented_query(self): ...
    @property
    def keys_only(self): ...
    @property
    def compiled_query(self): ...
    @property
    def expected_offset(self): ...
    @property
    def remaining_limit(self): ...
    @property
    def index_list(self): ...
    def process_batch(self, batch) -> None: ...

class Batch:
    @classmethod
    def create_async(cls, query, query_options, conn, req, start_cursor): ...
    def __init__(self, batch_shared, start_cursor=...) -> None: ...
    @property
    def query_options(self): ...
    @property
    def query(self): ...
    @property
    def results(self): ...
    @property
    def keys_only(self): ...
    @property
    def index_list(self): ...
    @property
    def start_cursor(self): ...
    @property
    def end_cursor(self): ...
    @property
    def skipped_results(self): ...
    @property
    def more_results(self): ...
    def next_batch(self, fetch_options: Any | None = ...): ...
    def cursor(self, index): ...
    def next_batch_async(self, fetch_options: Any | None = ...): ...

class _AugmentedBatch(Batch):
    @classmethod
    def create_async(cls, augmented_query, query_options, conn, req, in_memory_offset, in_memory_limit, start_cursor): ...
    def __init__(self, batch_shared, in_memory_offset: Any | None = ..., in_memory_limit: Any | None = ..., next_index: int = ..., start_cursor=...) -> None: ...
    @property
    def query(self): ...
    def cursor(self, index) -> None: ...

class Batcher:
    ASYNC_ONLY: Any
    AT_LEAST_OFFSET: int
    AT_LEAST_ONE: Any
    def __init__(self, query_options, first_async_batch) -> None: ...
    def next(self): ...
    def __next__(self): ...
    def next_batch(self, min_batch_size): ...
    def __iter__(self): ...

class ResultsIterator(six.Iterator):
    def __init__(self, batcher) -> None: ...
    def index_list(self): ...
    def cursor(self): ...
    def __next__(self): ...
    def __iter__(self): ...
    def next(self): ...
