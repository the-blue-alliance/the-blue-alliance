from google.appengine.api import datastore as datastore, datastore_errors as datastore_errors, datastore_types as datastore_types, namespace_manager as namespace_manager, users as users
from google.appengine.datastore import datastore_query as datastore_query, datastore_rpc as datastore_rpc
from typing import Any

Error = datastore_errors.Error
BadValueError = datastore_errors.BadValueError
BadPropertyError = datastore_errors.BadPropertyError
BadRequestError = datastore_errors.BadRequestError
EntityNotFoundError = datastore_errors.EntityNotFoundError
BadArgumentError = datastore_errors.BadArgumentError
QueryNotFoundError = datastore_errors.QueryNotFoundError
TransactionNotFoundError = datastore_errors.TransactionNotFoundError
Rollback = datastore_errors.Rollback
TransactionFailedError = datastore_errors.TransactionFailedError
BadFilterError = datastore_errors.BadFilterError
BadQueryError = datastore_errors.BadQueryError
BadKeyError = datastore_errors.BadKeyError
InternalError = datastore_errors.InternalError
NeedIndexError = datastore_errors.NeedIndexError
ReferencePropertyResolveError = datastore_errors.ReferencePropertyResolveError
Timeout = datastore_errors.Timeout
CommittedButStillApplying = datastore_errors.CommittedButStillApplying
ValidationError = BadValueError
Key: Any
Category: Any
Link: Any
Email: Any
GeoPt: Any
IM: Any
PhoneNumber: Any
PostalAddress: Any
Rating: Any
Text: Any
Blob: Any
ByteString: Any
BlobKey: Any
READ_CAPABILITY: Any
WRITE_CAPABILITY: Any
STRONG_CONSISTENCY: Any
EVENTUAL_CONSISTENCY: Any
NESTED: Any
MANDATORY: Any
ALLOWED: Any
INDEPENDENT: Any
KEY_RANGE_EMPTY: str
KEY_RANGE_CONTENTION: str
KEY_RANGE_COLLISION: str

class NotSavedError(Error): ...
class KindError(BadValueError): ...
class PropertyError(Error): ...
class DuplicatePropertyError(Error): ...
class ConfigurationError(Error): ...
class ReservedWordError(Error): ...
class DerivedPropertyError(Error): ...
long = int

def class_for_kind(kind): ...
def check_reserved_word(attr_name) -> None: ...
def query_descendants(model_instance): ...
def model_to_protobuf(model_instance, _entity_class=...): ...
def model_from_protobuf(pb, _entity_class=...): ...
def model_is_projection(model_instance): ...

class PropertiedClass(type):
    def __init__(cls, name, bases, dct, map_kind: bool = ...) -> None: ...

AUTO_UPDATE_UNCHANGED: Any

class Property:
    creation_counter: int
    verbose_name: Any
    name: Any
    default: Any
    required: Any
    validator: Any
    choices: Any
    indexed: Any
    def __init__(self, verbose_name: Any | None = ..., name: Any | None = ..., default: Any | None = ..., required: bool = ..., validator: Any | None = ..., choices: Any | None = ..., indexed: bool = ...) -> None: ...
    model_class: Any
    def __property_config__(self, model_class, property_name) -> None: ...
    def __get__(self, model_instance, model_class): ...
    def __set__(self, model_instance, value) -> None: ...
    def default_value(self): ...
    def validate(self, value): ...
    def empty(self, value): ...
    def get_value_for_datastore(self, model_instance): ...
    def get_updated_value_for_datastore(self, model_instance): ...
    def make_value_from_datastore_index_value(self, index_value): ...
    def make_value_from_datastore(self, value): ...
    data_type: Any
    def datastore_type(self): ...

class Index(datastore._BaseIndex):
    id: Any
    kind: Any
    has_ancestor: Any
    properties: Any

class Model:
    def __new__(*args, **unused_kwds): ...
    def __init__(self, parent: Any | None = ..., key_name: Any | None = ..., _app: Any | None = ..., _from_entity: bool = ..., **kwds) -> None: ...
    def key(self): ...
    def put(self, **kwargs): ...
    save: Any
    def delete(self, **kwargs) -> None: ...
    def is_saved(self): ...
    def has_key(self): ...
    def dynamic_properties(self): ...
    def instance_properties(self): ...
    def parent(self): ...
    def parent_key(self): ...
    def to_xml(self, _entity_class=...): ...
    @classmethod
    def get(cls, keys, **kwargs): ...
    @classmethod
    def get_by_key_name(cls, key_names, parent: Any | None = ..., **kwargs): ...
    @classmethod
    def get_by_id(cls, ids, parent: Any | None = ..., **kwargs): ...
    @classmethod
    def get_or_insert(cls, key_name, **kwds): ...
    @classmethod
    def all(cls, **kwds): ...
    @classmethod
    def gql(cls, query_string, *args, **kwds): ...
    @classmethod
    def from_entity(cls, entity): ...
    @classmethod
    def kind(cls): ...
    @classmethod
    def entity_type(cls): ...
    @classmethod
    def properties(cls): ...
    @classmethod
    def fields(cls): ...

def create_rpc(deadline: Any | None = ..., callback: Any | None = ..., read_policy=...): ...
def get_async(keys, **kwargs): ...
def get(keys, **kwargs): ...
def put_async(models, **kwargs): ...
def put(models, **kwargs): ...
save = put

def delete_async(models, **kwargs): ...
def delete(models, **kwargs) -> None: ...
def allocate_ids_async(model, size, **kwargs): ...
def allocate_ids(model, size, **kwargs): ...
def allocate_id_range(model, start, end, **kwargs): ...
def get_indexes_async(**kwargs): ...
def get_indexes(**kwargs): ...

class Expando(Model):
    def __init__(self, parent: Any | None = ..., key_name: Any | None = ..., _app: Any | None = ..., **kwds) -> None: ...
    def __setattr__(self, key, value) -> None: ...
    def __getattribute__(self, key): ...
    def __getattr__(self, key): ...
    def __delattr__(self, key) -> None: ...
    def dynamic_properties(self): ...

class _BaseQuery:
    def __init__(self, model_class: Any | None = ...) -> None: ...
    def is_keys_only(self) -> None: ...
    def projection(self) -> None: ...
    def is_distinct(self) -> None: ...
    def run(self, **kwargs): ...
    def __iter__(self): ...
    def get(self, **kwargs): ...
    def count(self, limit: int = ..., **kwargs): ...
    def fetch(self, limit, offset: int = ..., **kwargs): ...
    def index_list(self): ...
    def cursor(self): ...
    def with_cursor(self, start_cursor: Any | None = ..., end_cursor: Any | None = ...): ...
    def __getitem__(self, arg): ...

class _QueryIterator:
    def __init__(self, model_class, datastore_iterator) -> None: ...
    def __iter__(self): ...
    def __next__(self): ...
    def next(self): ...

class Query(_BaseQuery):
    def __init__(self, model_class: Any | None = ..., keys_only: bool = ..., cursor: Any | None = ..., namespace: Any | None = ..., _app: Any | None = ..., distinct: bool = ..., projection: Any | None = ...) -> None: ...
    def is_keys_only(self): ...
    def projection(self): ...
    def is_distinct(self): ...
    def filter(self, property_operator, value): ...
    def order(self, property): ...
    def ancestor(self, ancestor): ...

class GqlQuery(_BaseQuery):
    def __init__(self, query_string, *args, **kwds) -> None: ...
    def is_keys_only(self): ...
    def projection(self): ...
    def is_distinct(self): ...
    def bind(self, *args, **kwds) -> None: ...
    def run(self, **kwargs): ...

class UnindexedProperty(Property):
    def __init__(self, *args, **kwds) -> None: ...
    def validate(self, value): ...

class TextProperty(UnindexedProperty):
    data_type: Any

class StringProperty(Property):
    multiline: Any
    def __init__(self, verbose_name: Any | None = ..., multiline: bool = ..., **kwds) -> None: ...
    def validate(self, value): ...
    MAX_LENGTH: int
    data_type: Any

class _CoercingProperty(Property):
    def validate(self, value): ...

class CategoryProperty(_CoercingProperty):
    data_type: Any

class LinkProperty(_CoercingProperty):
    def validate(self, value): ...
    data_type: Any
URLProperty = LinkProperty

class EmailProperty(_CoercingProperty):
    data_type: Any

class GeoPtProperty(_CoercingProperty):
    data_type: Any

class IMProperty(_CoercingProperty):
    data_type: Any

class PhoneNumberProperty(_CoercingProperty):
    data_type: Any

class PostalAddressProperty(_CoercingProperty):
    data_type: Any

class BlobProperty(UnindexedProperty):
    data_type: Any

class ByteStringProperty(Property):
    def validate(self, value): ...
    MAX_LENGTH: int
    data_type: Any

class DateTimeProperty(Property):
    auto_now: Any
    auto_now_add: Any
    def __init__(self, verbose_name: Any | None = ..., auto_now: bool = ..., auto_now_add: bool = ..., **kwds) -> None: ...
    def validate(self, value): ...
    def default_value(self): ...
    def get_updated_value_for_datastore(self, model_instance): ...
    data_type: Any
    @staticmethod
    def now(): ...

class DateProperty(DateTimeProperty):
    @staticmethod
    def now(): ...
    def validate(self, value): ...
    def get_updated_value_for_datastore(self, model_instance): ...
    def get_value_for_datastore(self, model_instance): ...
    def make_value_from_datastore(self, value): ...
    data_type: Any

class TimeProperty(DateTimeProperty):
    @staticmethod
    def now(): ...
    def empty(self, value): ...
    def get_updated_value_for_datastore(self, model_instance): ...
    def get_value_for_datastore(self, model_instance): ...
    def make_value_from_datastore(self, value): ...
    data_type: Any

class IntegerProperty(Property):
    def validate(self, value): ...
    data_type: Any
    def empty(self, value): ...

class RatingProperty(_CoercingProperty, IntegerProperty):
    data_type: Any

class FloatProperty(Property):
    def validate(self, value): ...
    data_type: Any
    def empty(self, value): ...

class BooleanProperty(Property):
    def validate(self, value): ...
    data_type: Any
    def empty(self, value): ...

class UserProperty(Property):
    auto_current_user: Any
    auto_current_user_add: Any
    def __init__(self, verbose_name: Any | None = ..., name: Any | None = ..., required: bool = ..., validator: Any | None = ..., choices: Any | None = ..., auto_current_user: bool = ..., auto_current_user_add: bool = ..., indexed: bool = ...) -> None: ...
    def validate(self, value): ...
    def default_value(self): ...
    def get_updated_value_for_datastore(self, model_instance): ...
    data_type: Any

class ListProperty(Property):
    item_type: Any
    def __init__(self, item_type, verbose_name: Any | None = ..., default: Any | None = ..., write_empty_list: Any | None = ..., **kwds) -> None: ...
    def validate(self, value): ...
    def validate_list_contents(self, value): ...
    def empty(self, value): ...
    data_type: Any
    def default_value(self): ...
    def get_value_for_datastore(self, model_instance): ...
    def make_value_from_datastore(self, value): ...
    def make_value_from_datastore_index_value(self, index_value): ...

class StringListProperty(ListProperty):
    def __init__(self, verbose_name: Any | None = ..., default: Any | None = ..., write_empty_list: Any | None = ..., **kwds) -> None: ...

class ReferenceProperty(Property):
    collection_name: Any
    reference_class: Any
    def __init__(self, reference_class: Any | None = ..., verbose_name: Any | None = ..., collection_name: Any | None = ..., **attrs) -> None: ...
    def make_value_from_datastore_index_value(self, index_value): ...
    def __property_config__(self, model_class, property_name) -> None: ...
    def __get__(self, model_instance, model_class): ...
    def __set__(self, model_instance, value) -> None: ...
    def get_value_for_datastore(self, model_instance): ...
    def validate(self, value): ...
Reference = ReferenceProperty

def SelfReferenceProperty(verbose_name: Any | None = ..., collection_name: Any | None = ..., **attrs): ...
SelfReference = SelfReferenceProperty

class _ReverseReferenceProperty(Property):
    def __init__(self, model, prop) -> None: ...
    def __get__(self, model_instance, model_class): ...
    def __set__(self, model_instance, value) -> None: ...

class ComputedProperty(Property):
    def __init__(self, value_function, indexed: bool = ...) -> None: ...
    def __set__(self, *args) -> None: ...
    def __get__(self, model_instance, model_class): ...

def to_dict(model_instance, dictionary: Any | None = ...): ...

run_in_transaction: Any
run_in_read_only_transaction: Any
run_in_transaction_custom_retries: Any
run_in_transaction_options: Any
run_in_read_only_transaction_options: Any
RunInTransaction = run_in_transaction
RunInTransactionCustomRetries = run_in_transaction_custom_retries
websafe_encode_cursor: Any
websafe_decode_cursor: Any
is_in_transaction: Any
transactional: Any
non_transactional: Any
create_config: Any
create_transaction_options: Any
