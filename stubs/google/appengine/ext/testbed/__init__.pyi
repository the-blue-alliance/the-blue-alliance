from google.appengine.api import apiproxy_stub as apiproxy_stub, apiproxy_stub_map as apiproxy_stub_map, datastore_file_stub as datastore_file_stub, full_app_id as full_app_id, mail_stub as mail_stub, request_info as request_info, stublib as stublib, urlfetch_stub as urlfetch_stub, user_service_stub as user_service_stub
from google.appengine.api.app_identity import app_identity as app_identity, app_identity_stub as app_identity_stub
from google.appengine.api.blobstore import blobstore_stub as blobstore_stub, dict_blob_storage as dict_blob_storage
from google.appengine.api.capabilities import capability_stub as capability_stub
from google.appengine.api.images import images_stub as images_stub
from google.appengine.api.memcache import memcache_stub as memcache_stub
from google.appengine.api.modules import modules_stub as modules_stub
from google.appengine.api.namespace_manager import namespace_manager as namespace_manager
from google.appengine.api.oauth import oauth_api as oauth_api
from google.appengine.api.taskqueue import taskqueue_stub as taskqueue_stub
from google.appengine.datastore import cloud_datastore_v1_stub as cloud_datastore_v1_stub, datastore_pbs as datastore_pbs, datastore_stub_util as datastore_stub_util, datastore_v4_stub as datastore_v4_stub
from google.appengine.ext.remote_api import remote_api_stub as remote_api_stub
from google.appengine.ext.testbed import apiserver_util as apiserver_util
from google.appengine.runtime import context as context
from typing import Any

DEFAULT_ENVIRONMENT: Any
DEFAULT_APP_ID: Any
DEFAULT_AUTH_DOMAIN: Any
DEFAULT_SERVER_NAME: Any
DEFAULT_SERVER_SOFTWARE: Any
DEFAULT_SERVER_PORT: Any
APP_IDENTITY_SERVICE_NAME: str
BLOBSTORE_SERVICE_NAME: str
CAPABILITY_SERVICE_NAME: str
CHANNEL_SERVICE_NAME: str
DATASTORE_SERVICE_NAME: str
FILES_SERVICE_NAME: str
IMAGES_SERVICE_NAME: str
MAIL_SERVICE_NAME: str
MEMCACHE_SERVICE_NAME: str
TASKQUEUE_SERVICE_NAME: str
URLFETCH_SERVICE_NAME: str
USER_SERVICE_NAME: str
XMPP_SERVICE_NAME: str
MODULES_SERVICE_NAME: str
INIT_STUB_METHOD_NAMES: Any
SUPPORTED_SERVICES: Any
URLMATCHERS_TO_FETCH_FUNCTIONS: Any
AUTO_ID_POLICY_SEQUENTIAL: Any
AUTO_ID_POLICY_SCATTERED: Any

class Error(Exception): ...
class NotActivatedError(Error): ...
class StubNotSupportedError(Error): ...

class EmulatorSupportChecker:
    @classmethod
    def get_api_port(cls): ...
    @classmethod
    def get_emulator_port(cls): ...
    @classmethod
    def init(cls, api_port, emulator_port) -> None: ...
    @classmethod
    def check(cls): ...

class ActiveStub:
    stub: Any
    deactivate_callback: Any
    def __init__(self, stub, deactivate_callback) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...

class Testbed:
    def __init__(self) -> None: ...
    api_port: Any
    rpc_server: Any
    def activate(self, use_datastore_emulator: bool = ...): ...
    def deactivate(self) -> None: ...
    def setup_env(self, overwrite: bool = ..., **kwargs) -> None: ...
    def setup_wsgi_env(self, **kwargs) -> None: ...
    def get_stub(self, service_name): ...
    def init_app_identity_stub(self, enable: bool = ...) -> None: ...
    def init_blobstore_stub(self, enable: bool = ...) -> None: ...
    def init_capability_stub(self, enable: bool = ...) -> None: ...
    def init_channel_stub(self, enable: bool = ...) -> None: ...
    def init_datastore_v3_stub(self, enable: bool = ..., datastore_file: Any | None = ..., use_sqlite: bool = ..., auto_id_policy=..., **stub_kw_args) -> None: ...
    def init_files_stub(self, enable: bool = ...) -> None: ...
    def init_images_stub(self, enable: bool = ..., **stub_kwargs) -> None: ...
    def init_mail_stub(self, enable: bool = ..., **stub_kw_args) -> None: ...
    def init_memcache_stub(self, enable: bool = ...) -> None: ...
    def init_taskqueue_stub(self, enable: bool = ..., **stub_kw_args) -> None: ...
    def init_urlfetch_stub(self, enable: bool = ..., urlmatchers: Any | None = ...) -> None: ...
    def init_user_stub(self, enable: bool = ..., **stub_kw_args) -> None: ...
    def init_xmpp_stub(self, enable: bool = ...) -> None: ...
    def init_modules_stub(self, enable: bool = ...) -> None: ...
    def init_all_stubs(self, enable: bool = ...) -> None: ...

def validate_project_id(project_id) -> None: ...
