from google.appengine.api import cmp_compat as cmp_compat, datastore as datastore, namespace_manager as namespace_manager
from google.appengine.ext import db as db, ndb as ndb
from typing import Any

class Error(Exception): ...
class KeyRangeError(Error): ...

class KeyRange:
    DESC: str
    ASC: str
    direction: Any
    key_start: Any
    key_end: Any
    include_start: Any
    include_end: Any
    namespace: Any
    def __init__(self, key_start: Any | None = ..., key_end: Any | None = ..., direction: Any | None = ..., include_start: bool = ..., include_end: bool = ..., namespace: Any | None = ..., _app: Any | None = ...) -> None: ...
    def advance(self, key) -> None: ...
    def filter_query(self, query, filters: Any | None = ...): ...
    def filter_ndb_query(self, query, filters: Any | None = ...): ...
    def filter_datastore_query(self, query, filters: Any | None = ...): ...
    def make_directed_query(self, kind_class, keys_only: bool = ...): ...
    def make_directed_ndb_query(self, kind_class, keys_only: bool = ...): ...
    def make_directed_datastore_query(self, kind, keys_only: bool = ...): ...
    def make_ascending_query(self, kind_class, keys_only: bool = ..., filters: Any | None = ...): ...
    def make_ascending_ndb_query(self, kind_class, keys_only: bool = ..., filters: Any | None = ...): ...
    def make_ascending_datastore_query(self, kind, keys_only: bool = ..., filters: Any | None = ...): ...
    def split_range(self, batch_size: int = ...): ...
    def __hash__(self): ...
    def __cmp__(self, other): ...
    @staticmethod
    def bisect_string_range(start, end): ...
    @staticmethod
    def split_keys(key_start, key_end, batch_size): ...
    @staticmethod
    def guess_end_key(kind, key_start, probe_count: int = ..., split_rate: int = ...): ...
    @classmethod
    def compute_split_points(cls, kind, count): ...
    def to_json(self): ...
    @staticmethod
    def from_json(json_str): ...
