import threading

from google.appengine.api import apiproxy_stub
from google.appengine.ext.ndb.context import Context
from typing import Any, Generic, Generator, TypeVar

class _State(threading.local):
    current_context: Any
    all_generators: Any
    all_pending: Any
    def __init__(self) -> None: ...
    def set_context(self, ctx) -> None: ...
    def add_generator(self, gen) -> None: ...
    def add_pending(self, fut) -> None: ...
    def remove_pending(self, fut, status: str = ...) -> None: ...
    def clear_all_generators(self) -> None: ...
    def clear_all_pending(self) -> None: ...
    def dump_all_pending(self, verbose: bool = ...): ...
    def reset(self, unused_req_id) -> None: ...

def add_flow_exception(exc) -> None: ...

T = TypeVar("T")

class Future(Generic[T]):
    IDLE: Any
    RUNNING: Any
    FINISHING: Any
    def __init__(self, info: Any | None = ...) -> None: ...
    def dump(self): ...
    def dump_stack(self): ...
    def add_callback(self, callback, *args, **kwds) -> None: ...
    def add_immediate_callback(self, callback, *args, **kwds) -> None: ...
    def set_result(self, result: T) -> None: ...
    def set_exception(self, exc, tb: Any | None = ...) -> None: ...
    def done(self): ...
    @property
    def state(self): ...
    def wait(self) -> None: ...
    def get_exception(self): ...
    def get_traceback(self): ...
    def check_success(self) -> None: ...
    def get_result(self) -> T: ...
    @classmethod
    def wait_any(cls, futures) -> None: ...
    @classmethod
    def wait_all(cls, futures) -> None: ...

def sleep(dt): ...

class MultiFuture(Future):
    def __init__(self, info: Any | None = ...) -> None: ...
    def complete(self) -> None: ...
    def set_exception(self, exc, tb: Any | None = ...) -> None: ...
    def putq(self, value) -> None: ...
    def add_dependent(self, fut) -> None: ...

class QueueFuture(Future):
    def __init__(self, info: Any | None = ...) -> None: ...
    def complete(self) -> None: ...
    def set_exception(self, exc, tb: Any | None = ...) -> None: ...
    def putq(self, value) -> None: ...
    def add_dependent(self, fut) -> None: ...
    def getq(self): ...

class SerialQueueFuture(Future):
    def __init__(self, info: Any | None = ...) -> None: ...
    def complete(self) -> None: ...
    def set_exception(self, exc, tb: Any | None = ...) -> None: ...
    def putq(self, value) -> None: ...
    def add_dependent(self, fut) -> None: ...
    def getq(self): ...

class ReducingFuture(Future):
    def __init__(self, reducer, info: Any | None = ..., batch_size: int = ...) -> None: ...
    def complete(self) -> None: ...
    def set_exception(self, exc, tb: Any | None = ...) -> None: ...
    def putq(self, value) -> None: ...
    def add_dependent(self, fut) -> None: ...

class Return(Exception): ...

def get_return_value(err): ...
def tasklet(func): ...
def synctasklet(func): ...
def toplevel(func): ...
def get_context() -> Context: ...
def make_default_context() -> Context: ...
def make_context(conn: Any | None = ..., config: Any | None = ...) -> Context: ...
def set_context(new_context: Context) -> None: ...

class _ThrowingStub(apiproxy_stub.APIProxyStub):
    def __init__(self) -> None: ...
    def MakeSyncCall(self, service, call, request, response) -> None: ...
    def CreateRPC(self): ...
