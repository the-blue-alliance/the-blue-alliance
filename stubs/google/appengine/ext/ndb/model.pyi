import datetime

from google.appengine.api import datastore_errors
from google.appengine.datastore import datastore_rpc
from google.appengine.ext.ndb import Query, Key
from typing import Any, Optional

Key: Any
BlobKey: Any
GeoPt: Any
Rollback = datastore_errors.Rollback

class KindError(datastore_errors.BadValueError): ...
class InvalidPropertyError(datastore_errors.Error): ...
BadProjectionError = InvalidPropertyError

class UnprojectedPropertyError(datastore_errors.Error): ...
class ReadonlyPropertyError(datastore_errors.Error): ...
class ComputedPropertyError(ReadonlyPropertyError): ...

class _NotEqualMixin:
    def __ne__(self, other): ...

class _NestedCounter:
    def __init__(self) -> None: ...
    def get(self, parts: Any | None = ...): ...
    def increment(self, parts: Any | None = ...): ...

class IndexProperty(_NotEqualMixin):
    def __new__(cls, name, direction): ...
    @property
    def name(self): ...
    @property
    def direction(self): ...
    def __eq__(self, other): ...
    def __hash__(self): ...

class Index(_NotEqualMixin):
    def __new__(cls, kind, properties, ancestor): ...
    @property
    def kind(self): ...
    @property
    def properties(self): ...
    @property
    def ancestor(self): ...
    def __eq__(self, other): ...
    def __hash__(self): ...

class IndexState(_NotEqualMixin):
    def __new__(cls, definition, state, id): ...
    @property
    def definition(self): ...
    @property
    def state(self): ...
    @property
    def id(self): ...
    def __eq__(self, other): ...
    def __hash__(self): ...

class ModelAdapter(datastore_rpc.AbstractAdapter):
    default_model: Any
    want_pbs: int
    def __init__(self, default_model: Any | None = ..., id_resolver: Any | None = ...) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, *unused_args) -> None: ...
    def pb_to_key(self, pb): ...
    def key_to_pb(self, key): ...
    def pb_to_entity(self, pb): ...
    def entity_to_pb(self, ent): ...
    def pb_to_index(self, pb): ...

def make_connection(config: Any | None = ..., default_model: Any | None = ..., _api_version=..., _id_resolver: Any | None = ...): ...

class ModelAttribute: ...

class _BaseValue(_NotEqualMixin):
    b_val: Any
    def __init__(self, b_val) -> None: ...
    def __eq__(self, other): ...
    def __hash__(self): ...

class Property(ModelAttribute):
    def __init__(self, name: Any | None = ..., indexed: Any | None = ..., repeated: Any | None = ..., required: Any | None = ..., default: Any | None = ..., choices: Any | None = ..., validator: Any | None = ..., verbose_name: Any | None = ..., write_empty_list: Any | None = ...) -> None: ...
    def __eq__(self, value): ...
    def __ne__(self, value): ...
    def __lt__(self, value): ...
    def __le__(self, value): ...
    def __gt__(self, value): ...
    def __ge__(self, value): ...
    IN: Any
    def __neg__(self): ...
    def __pos__(self): ...
    def __get__(self, entity, unused_cls: Any | None = ...): ...
    def __set__(self, entity, value) -> None: ...
    def __delete__(self, entity) -> None: ...

class ModelKey(Property):
    def __init__(self) -> None: ...

class BooleanProperty(Property, bool): ...
class IntegerProperty(Property, int): ...
class FloatProperty(Property, float): ...

class _CompressedValue(_NotEqualMixin):
    z_val: Any
    def __init__(self, z_val) -> None: ...
    def __eq__(self, other): ...
    def __hash__(self): ...

class BlobProperty(Property):
    def __init__(self, name: Any | None = ..., compressed: bool = ..., **kwds) -> None: ...

class TextProperty(BlobProperty, str): ...
class StringProperty(TextProperty, str): ...
class GeoPtProperty(Property): ...
class PickleProperty(BlobProperty): ...

class JsonProperty(BlobProperty, dict, list):
    def __init__(self, name: Any | None = ..., compressed: bool = ..., json_type: Any | None = ..., **kwds) -> None: ...

class UserProperty(Property):
    def __init__(self, name: Any | None = ..., auto_current_user: bool = ..., auto_current_user_add: bool = ..., **kwds) -> None: ...

class KeyProperty(Property, Key):
    def __init__(self, *args, **kwds) -> None: ...

class BlobKeyProperty(Property): ...

class DateTimeProperty(Property, datetime.datetime):
    def __init__(self, name: Any | None = ..., auto_now: bool = ..., auto_now_add: bool = ..., **kwds) -> None: ...

class DateProperty(DateTimeProperty): ...
class TimeProperty(DateTimeProperty): ...
class _StructuredGetForDictMixin(Property): ...

class StructuredProperty(_StructuredGetForDictMixin):
    def __init__(self, modelclass, name: Any | None = ..., **kwds) -> None: ...
    def __getattr__(self, attrname): ...
    IN: Any

class LocalStructuredProperty(_StructuredGetForDictMixin, BlobProperty):
    def __init__(self, modelclass, name: Any | None = ..., compressed: bool = ..., keep_keys: bool = ..., **kwds) -> None: ...

class GenericProperty(Property):
    def __init__(self, name: Any | None = ..., compressed: bool = ..., **kwds) -> None: ...

class ComputedProperty(GenericProperty):
    def __init__(self, func, name: Any | None = ..., indexed: Any | None = ..., repeated: Any | None = ..., verbose_name: Any | None = ...) -> None: ...

class MetaModel(type):
    def __init__(cls, name, bases, classdict) -> None: ...

class Model:
    key: Key
    def __init__(*args, **kwds) -> None: ...
    populate: Any
    has_complete_key: Any
    def __hash__(self): ...
    def __eq__(self, other): ...
    to_dict: Any
    gql: Any

    @staticmethod
    def query(*args, **kwargs) -> Query: ...

    def put(self, **kwargs) -> Key:
        ...

    def put_async(self, **kwargs) -> "TypedFuture[Key]":
        ...

    def id(self) -> int:
        ...

    @staticmethod
    def get_by_id(id: Union[int, str], **kwargs) -> Optional[Any]:
        ...

    @staticmethod
    def get_by_id_async(id: Union[int, str], **kwargs) -> "TypedFuture[Optional[Any]]":
        ...

    @staticmethod
    def get_or_insert(name: str, **kwargs) -> Any:
        ...

    @staticmethod
    def get_or_insert_async(name: str, **kwargs) -> "TypedFuture[Any]":
        ...

    allocate_ids: Any
    allocate_ids_async: Any

    _to_pb: Any
    _from_pb: Any

class Expando(Model):
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...
    def __delattr__(self, name): ...

def transaction(callback, **ctx_options): ...
def transaction_async(callback, **ctx_options): ...
def in_transaction(): ...
def transactional(*args, **kwds): ...
def transactional_async(*args, **kwds): ...
def transactional_tasklet(*args, **kwds): ...
def non_transactional(args, kwds, allow_existing: bool = ...): ...
def get_multi_async(keys, **ctx_options): ...
def get_multi(keys, **ctx_options): ...
def put_multi_async(entities, **ctx_options): ...
def put_multi(entities, **ctx_options): ...
def delete_multi_async(keys, **ctx_options): ...
def delete_multi(keys, **ctx_options): ...
def get_indexes_async(**ctx_options): ...
def get_indexes(**ctx_options): ...
