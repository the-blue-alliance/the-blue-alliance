from google.appengine.datastore import datastore_rpc
from typing import Any

EVENTUAL_CONSISTENCY: Any

class ContextOptions(datastore_rpc.Configuration):
    def use_cache(value): ...
    def use_memcache(value): ...
    def use_datastore(value): ...
    def memcache_timeout(value): ...
    def max_memcache_items(value): ...
    def memcache_deadline(value): ...

class TransactionOptions(ContextOptions, datastore_rpc.TransactionOptions): ...

class AutoBatcher:
    def __init__(self, todo_tasklet, limit) -> None: ...
    def run_queue(self, options, todo) -> None: ...
    def add(self, arg, options: Any | None = ...): ...
    def add_once(self, arg, options: Any | None = ...): ...
    def action(self): ...
    def flush(self) -> None: ...

class Context:
    def __init__(self, conn: Any | None = ..., auto_batcher_class=..., config: Any | None = ..., parent_context: Any | None = ...) -> None: ...
    def flush(self) -> None: ...
    @staticmethod
    def default_cache_policy(key): ...
    def get_cache_policy(self): ...
    def set_cache_policy(self, func): ...
    @staticmethod
    def default_memcache_policy(key): ...
    def get_memcache_policy(self): ...
    def set_memcache_policy(self, func): ...
    @staticmethod
    def default_datastore_policy(key): ...
    def get_datastore_policy(self): ...
    def set_datastore_policy(self, func): ...
    @staticmethod
    def default_memcache_timeout_policy(key): ...
    def set_memcache_timeout_policy(self, func): ...
    def get_memcache_timeout_policy(self): ...
    def get(self, key, **ctx_options) -> None: ...
    def put(self, entity, **ctx_options) -> None: ...
    def delete(self, key, **ctx_options) -> None: ...
    def allocate_ids(self, key, size: Any | None = ..., max: Any | None = ..., **ctx_options) -> None: ...
    def get_indexes(self, **ctx_options) -> None: ...
    def map_query(self, query, callback, pass_batch_into_callback: Any | None = ..., options: Any | None = ..., merge_future: Any | None = ...): ...
    def iter_query(self, query, callback: Any | None = ..., pass_batch_into_callback: Any | None = ..., options: Any | None = ...): ...
    def transaction(self, callback, **ctx_options) -> None: ...
    def in_transaction(self): ...
    def call_on_commit(self, callback) -> None: ...
    def clear_cache(self) -> None: ...
    def memcache_get(self, key, for_cas: bool = ..., namespace: Any | None = ..., use_cache: bool = ..., deadline: Any | None = ...): ...
    def memcache_gets(self, key, namespace: Any | None = ..., use_cache: bool = ..., deadline: Any | None = ...): ...
    def memcache_set(self, key, value, time: int = ..., namespace: Any | None = ..., use_cache: bool = ..., deadline: Any | None = ...): ...
    def memcache_add(self, key, value, time: int = ..., namespace: Any | None = ..., deadline: Any | None = ...): ...
    def memcache_replace(self, key, value, time: int = ..., namespace: Any | None = ..., deadline: Any | None = ...): ...
    def memcache_cas(self, key, value, time: int = ..., namespace: Any | None = ..., deadline: Any | None = ...): ...
    def memcache_delete(self, key, seconds: int = ..., namespace: Any | None = ..., deadline: Any | None = ...): ...
    def memcache_incr(self, key, delta: int = ..., initial_value: Any | None = ..., namespace: Any | None = ..., deadline: Any | None = ...): ...
    def memcache_decr(self, key, delta: int = ..., initial_value: Any | None = ..., namespace: Any | None = ..., deadline: Any | None = ...): ...
    def urlfetch(self, url, payload: Any | None = ..., method: str = ..., headers=..., allow_truncated: bool = ..., follow_redirects: bool = ..., validate_certificate: Any | None = ..., deadline: Any | None = ..., callback: Any | None = ...) -> None: ...
