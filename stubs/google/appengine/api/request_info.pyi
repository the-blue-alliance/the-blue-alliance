from google.appengine.runtime import context as context
from typing import Any, NamedTuple

class Error(Exception): ...
class ModuleDoesNotExistError(Error): ...
class VersionDoesNotExistError(Error): ...
class InvalidInstanceIdError(Error): ...
class NotSupportedWithAutoScalingError(Error): ...
class VersionAlreadyStartedError(Error): ...
class VersionAlreadyStoppedError(Error): ...
class BackgroundThreadLimitReachedError(Error): ...

class ResponseTuple(NamedTuple):
    status: Any
    headers: Any
    content: Any

class Dispatcher:
    def get_module_names(self) -> None: ...
    def get_versions(self, module) -> None: ...
    def get_default_version(self, module) -> None: ...
    def get_hostname(self, module, version, instance: Any | None = ...) -> None: ...
    def set_num_instances(self, module, version, instances) -> None: ...
    def get_num_instances(self, module, version) -> None: ...
    def start_version(self, module, version) -> None: ...
    def stop_version(self, module, version) -> None: ...
    def add_event(self, runnable, eta, service: Any | None = ..., event_id: Any | None = ...) -> None: ...
    def update_event(self, eta, service, event_id) -> None: ...
    def add_request(self, method, relative_url, headers, body, source_ip, module_name: Any | None = ..., version: Any | None = ..., instance_id: Any | None = ...) -> None: ...
    def add_async_request(self, method, relative_url, headers, body, source_ip, module_name: Any | None = ..., version: Any | None = ..., instance_id: Any | None = ...) -> None: ...
    def send_background_request(self, module_name, version, instance, background_request_id) -> None: ...

class _LocalFakeDispatcher(Dispatcher):
    def __init__(self, module_names: Any | None = ..., module_name_to_versions: Any | None = ..., module_name_to_default_versions: Any | None = ..., module_name_to_version_to_hostname: Any | None = ...) -> None: ...
    def get_module_names(self): ...
    def get_versions(self, module): ...
    def get_default_version(self, module): ...
    def get_hostname(self, module, version, instance: Any | None = ...): ...
    def set_num_instances(self, module, version, instances) -> None: ...
    def get_num_instances(self, module, version) -> None: ...
    def start_version(self, module, version) -> None: ...
    def stop_version(self, module, version) -> None: ...
    def add_event(self, runnable, eta, service: Any | None = ..., event_id: Any | None = ...) -> None: ...
    def update_event(self, eta, service, event_id) -> None: ...
    def add_request(self, method, relative_url, headers, body, source_ip, module_name: Any | None = ..., version: Any | None = ..., instance_id: Any | None = ...): ...
    def add_async_request(self, method, relative_url, headers, body, source_ip, module_name: Any | None = ..., version: Any | None = ..., instance_id: Any | None = ...) -> None: ...
    def send_background_request(self, module_name, version, instance, background_request_id) -> None: ...

class RequestInfo:
    def get_request_url(self, request_id) -> None: ...
    def get_request_environ(self, request_id) -> None: ...
    def get_module(self, request_id) -> None: ...
    def get_version(self, request_id) -> None: ...
    def get_instance(self, request_id) -> None: ...
    def get_dispatcher(self) -> None: ...
    def register_request_id(self, environ, request_id) -> None: ...

class _LocalRequestInfo(RequestInfo):
    def get_request_url(self, request_id): ...
    def get_module(self, request_id): ...
    def get_version(self, request_id): ...
    def get_instance(self, request_id): ...
    def get_dispatcher(self): ...
