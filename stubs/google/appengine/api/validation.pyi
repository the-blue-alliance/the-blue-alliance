from ruamel import yaml
from typing import Any

class SortedDict(dict):
    keys: Any
    def __init__(self, keys, data) -> None: ...
    def ordered_items(self): ...

class ItemDumper(yaml.SafeDumper):
    def represent_mapping(self, tag, mapping, flow_style: Any | None = ...): ...

class Error(Exception): ...
class AttributeDefinitionError(Error): ...

class ValidationError(Error):
    message: Any
    cause: Any
    def __init__(self, message, cause: Any | None = ...) -> None: ...

class MissingAttribute(ValidationError):
    def __init__(self, key) -> None: ...

def AsValidator(validator): ...

class ValidatedBase:
    @classmethod
    def GetValidator(cls, key) -> None: ...
    def SetMultiple(self, attributes) -> None: ...
    def Set(self, key, value) -> None: ...
    def CheckInitialized(self) -> None: ...
    def ToDict(self) -> None: ...
    def ToYAML(self): ...
    def GetWarnings(self) -> None: ...

class Validated(ValidatedBase):
    ATTRIBUTES: Any
    def __init__(self, **attributes) -> None: ...
    @classmethod
    def GetValidator(cls, key): ...
    def GetWarnings(self): ...
    def Set(self, key, value) -> None: ...
    def GetUnnormalized(self, key): ...
    def Get(self, key): ...
    def __getattribute__(self, key): ...
    def CheckInitialized(self) -> None: ...
    def __setattr__(self, key, value) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...
    def ToDict(self): ...

class ValidatedDict(ValidatedBase, dict):
    KEY_VALIDATOR: Any
    VALUE_VALIDATOR: Any
    def __init__(self, **kwds) -> None: ...
    @classmethod
    def GetValidator(cls, key): ...
    def __setitem__(self, key, value) -> None: ...
    def setdefault(self, key, value: Any | None = ...): ...
    def update(self, other, **kwds) -> None: ...
    def Set(self, key, value) -> None: ...
    def GetWarnings(self): ...
    def ToDict(self): ...

class Validator:
    expected_type: Any
    default: Any
    def __init__(self, default: Any | None = ...) -> None: ...
    def __call__(self, value, key: str = ...): ...
    def Validate(self, value, key: str = ...): ...
    def CheckFieldInitialized(self, value, key, obj) -> None: ...
    def ToValue(self, value): ...
    def GetWarnings(self, value, key, obj): ...

class StringValidator(Validator):
    def Validate(self, value, key: str = ...): ...

class Type(Validator):
    expected_type: Any
    convert: Any
    def __init__(self, expected_type, convert: bool = ..., default: Any | None = ...) -> None: ...
    def Validate(self, value, key): ...
    def GetWarnings(self, value, key, obj): ...

TYPE_BOOL: Any
TYPE_INT: Any
TYPE_LONG: Any
TYPE_STR: Any
TYPE_UNICODE: Any
TYPE_FLOAT: Any

class Exec(Type):
    def __init__(self, default: Any | None = ...) -> None: ...
    def Validate(self, value, key): ...

class Options(Validator):
    options: Any
    def __init__(self, *options, **kw) -> None: ...
    def Validate(self, value, key): ...

class Optional(Validator):
    validator: Any
    expected_type: Any
    default: Any
    def __init__(self, validator, default: Any | None = ...) -> None: ...
    def Validate(self, value, key): ...
    def CheckFieldInitialized(self, value, key, obj) -> None: ...
    def ToValue(self, value): ...

class Regex(Validator):
    re: Any
    expected_type: Any
    def __init__(self, regex, string_type=..., default: Any | None = ...) -> None: ...
    def Validate(self, value, key): ...

class _RegexStrValue:
    def __init__(self, attribute, value, key) -> None: ...
    @property
    def regex(self): ...
    def match(self, value): ...
    def Validate(self) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class RegexStr(Validator):
    expected_type: Any
    def __init__(self, string_type=..., default: Any | None = ...) -> None: ...
    def Validate(self, value, key): ...
    def ToValue(self, value): ...

class Range(Validator):
    minimum: Any
    maximum: Any
    expected_type: Any
    def __init__(self, minimum, maximum, range_type=..., default: Any | None = ...) -> None: ...
    def Validate(self, value, key): ...

class Repeated(Validator):
    constructor: Any
    expected_type: Any
    def __init__(self, constructor, default: Any | None = ...) -> None: ...
    def Validate(self, value, key): ...
    def CheckFieldInitialized(self, value, key, obj) -> None: ...

class TimeValue(Validator):
    expected_type: Any
    def __init__(self) -> None: ...
    def Validate(self, value, key): ...

class Normalized(Validator):
    def Validate(self, value, key): ...
    def Get(self, value, key, obj) -> None: ...

class Preferred(Normalized):
    validator: Any
    deprecated: Any
    synthetic_default: Any
    def __init__(self, deprecated, validator, default: Any | None = ...) -> None: ...
    def CheckFieldInitialized(self, value, key, obj) -> None: ...
    def Get(self, value, key, obj): ...

class Deprecated(Normalized):
    validator: Any
    preferred: Any
    synthetic_default: Any
    def __init__(self, preferred, validator, default: Any | None = ...) -> None: ...
    def GetWarnings(self, value, key, obj): ...
    def Get(self, value, key, obj): ...
    def CheckFieldInitialized(self, value, key, obj) -> None: ...
