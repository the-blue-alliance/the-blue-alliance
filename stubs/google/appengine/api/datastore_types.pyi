import datetime
import six
from google.appengine.api import cmp_compat as cmp_compat, datastore_errors as datastore_errors, full_app_id as full_app_id, namespace_manager as namespace_manager, users as users
from google.appengine.datastore import datastore_pbs as datastore_pbs, entity_v4_pb2 as entity_v4_pb2, sortable_pb_encoder as sortable_pb_encoder
from google.appengine.datastore.datastore_pbs import googledatastore as googledatastore
from typing import Any

RESERVED_PROPERTY_NAME: Any
KEY_SPECIAL_PROPERTY: str
SCATTER_SPECIAL_PROPERTY: str

class UtcTzinfo(datetime.tzinfo):
    def utcoffset(self, dt): ...
    def dst(self, dt): ...
    def tzname(self, dt): ...

UTC: Any

def typename(obj): ...
def ValidateString(value, name: str = ..., exception=..., max_len=..., empty_ok: bool = ...) -> None: ...
def ValidateInteger(value, name: str = ..., exception=..., empty_ok: bool = ..., zero_ok: bool = ..., negative_ok: bool = ...) -> None: ...
def ResolveAppId(app): ...
def ResolveNamespace(namespace): ...
def EncodeAppIdNamespace(app_id, namespace): ...
def DecodeAppIdNamespace(app_namespace_str): ...
def SetNamespace(proto, namespace) -> None: ...
def PartitionString(value, separator): ...

class Key:
    def __init__(self, encoded: Any | None = ...) -> None: ...
    def to_path(self, _default_id: Any | None = ..., _decode: bool = ..., _fail: bool = ...): ...
    @staticmethod
    def from_path(*args, **kwds): ...
    def app(self): ...
    def namespace(self): ...
    def kind(self): ...
    def id(self): ...
    def name(self): ...
    def id_or_name(self): ...
    def has_id_or_name(self): ...
    def parent(self): ...
    def ToTagUri(self): ...
    ToXml: Any
    def entity_group(self): ...
    def __cmp__(self, other): ...
    def __hash__(self): ...

class _OverflowDateTime(_PREFERRED_NUM_TYPE): ...

class Category(six.text_type):
    TERM: str
    def __init__(self, tag) -> None: ...
    def ToXml(self): ...

class Link(six.text_type):
    def __init__(self, link) -> None: ...
    def ToXml(self): ...

class Email(six.text_type):
    def __init__(self, email) -> None: ...
    def ToXml(self): ...

class GeoPt:
    lat: Any
    lon: Any
    def __init__(self, lat, lon: Any | None = ...) -> None: ...
    def __cmp__(self, other): ...
    def __hash__(self): ...
    def __unicode__(self): ...
    def ToXml(self): ...

class IM:
    PROTOCOLS: Any
    protocol: Any
    address: Any
    def __init__(self, protocol, address: Any | None = ...) -> None: ...
    def __cmp__(self, other): ...
    def __unicode__(self): ...
    def ToXml(self): ...
    def __len__(self): ...

class PhoneNumber(six.text_type):
    def __init__(self, phone) -> None: ...
    def ToXml(self): ...

class PostalAddress(six.text_type):
    def __init__(self, address) -> None: ...
    def ToXml(self): ...

class Rating(_PREFERRED_NUM_TYPE):
    MIN: int
    MAX: int
    def __init__(self, rating) -> None: ...
    def ToXml(self): ...

class Text(six.text_type):
    def __new__(cls, arg: Any | None = ..., encoding: Any | None = ...): ...

class _BaseByteType(bytes):
    def __new__(cls, arg: Any | None = ...): ...
    def ToXml(self): ...

class Blob(_BaseByteType):
    def __new__(cls, *args, **kwargs): ...
    @property
    def meaning_uri(self): ...
    @meaning_uri.setter
    def meaning_uri(self, value) -> None: ...

class EmbeddedEntity(_BaseByteType):
    def __new__(cls, arg: Any | None = ...): ...

class ByteString(_BaseByteType): ...

class BlobKey:
    def __init__(self, blob_key) -> None: ...
    def __cmp__(self, other): ...
    def __hash__(self): ...
    def ToXml(self): ...

def ValidatePropertyInteger(name, value) -> None: ...
def ValidateStringLength(name, value, max_len) -> None: ...
def ValidatePropertyString(name, value) -> None: ...
def ValidatePropertyLink(name, value) -> None: ...
def ValidatePropertyNothing(name, value) -> None: ...
def ValidatePropertyKey(name, value) -> None: ...
def ValidateProperty(name, values, read_only: bool = ...) -> None: ...
ValidateReadProperty = ValidateProperty

def PackBlob(name, value, pbvalue) -> None: ...
def PackString(name, value, pbvalue) -> None: ...
def PackDatetime(name, value, pbvalue) -> None: ...
def DatetimeToTimestamp(value): ...
def PackGeoPt(name, value, pbvalue) -> None: ...
def PackUser(name, value, pbvalue) -> None: ...
def PackKey(name, value, pbvalue) -> None: ...
def PackBool(name, value, pbvalue) -> None: ...
def PackInteger(name, value, pbvalue) -> None: ...
def PackFloat(name, value, pbvalue) -> None: ...
def ToPropertyPb(name, values): ...
def FromReferenceProperty(value): ...
def FromPropertyPb(pb): ...
def RestoreFromIndexValue(index_value, data_type): ...
def PropertyTypeName(value): ...
def FromPropertyTypeName(type_name): ...
def PropertyValueFromString(type_, value_string, _auth_domain: Any | None = ...): ...
def ReferenceToKeyValue(key, id_resolver: Any | None = ...): ...
def PropertyValueToKeyValue(prop_value): ...
def GetPropertyValueTag(value_pb): ...
