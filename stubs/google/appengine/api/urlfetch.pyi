from google.appengine.api.urlfetch_errors import *
import six.moves.urllib.parse
from google.appengine.api import apiproxy_stub_map as apiproxy_stub_map, urlfetch_service_pb2 as urlfetch_service_pb2
from google.appengine.runtime import apiproxy_errors as apiproxy_errors, context as context
from six.moves import UserDict as IterableUserDict
from typing import Any

MAX_REDIRECTS: int
GET: int
POST: int
HEAD: int
PUT: int
DELETE: int
PATCH: int

class _CaselessDict(IterableUserDict):
    caseless_keys: Any
    def __init__(self, dict: Any | None = ..., **kwargs) -> None: ...
    def __setitem__(self, key, item) -> None: ...
    def __getitem__(self, key): ...
    def __delitem__(self, key) -> None: ...
    def has_key(self, key): ...
    def __contains__(self, key): ...
    def get(self, key, failobj: Any | None = ...): ...
    def update(self, dict: Any | None = ..., **kwargs) -> None: ...
    def copy(self): ...

def create_rpc(deadline: Any | None = ..., callback: Any | None = ...): ...
def fetch(url, payload: Any | None = ..., method=..., headers=..., allow_truncated: bool = ..., follow_redirects: bool = ..., deadline: Any | None = ..., validate_certificate: Any | None = ...): ...
def make_fetch_call(rpc, url, payload: Any | None = ..., method=..., headers=..., allow_truncated: bool = ..., follow_redirects: bool = ..., validate_certificate: Any | None = ...): ...
Fetch = fetch

def CreateHTTPHeaders(data): ...

class HTTPMessageWrapper(six.moves.http_client.HTTPMessage):
    def getheaders(self, key): ...
    @property
    def type(self): ...

class _URLFetchResult:
    content: Any
    status_code: Any
    content_was_truncated: Any
    final_url: Any
    header_msg: Any
    headers: Any
    def __init__(self, response_proto) -> None: ...

def get_default_fetch_deadline(): ...
def set_default_fetch_deadline(value) -> None: ...
