from google.appengine.api import apiproxy_stub_map as apiproxy_stub_map, capabilities as capabilities, cmp_compat as cmp_compat, datastore_errors as datastore_errors, datastore_types as datastore_types
from google.appengine.datastore import datastore_pb as datastore_pb, datastore_query as datastore_query, datastore_rpc as datastore_rpc
from typing import Any

MAX_ALLOWABLE_QUERIES: int
MAXIMUM_RESULTS: int
DEFAULT_TRANSACTION_RETRIES: int
READ_CAPABILITY: Any
WRITE_CAPABILITY: Any
Key = datastore_types.Key
typename = datastore_types.typename
STRONG_CONSISTENCY: Any
EVENTUAL_CONSISTENCY: Any

def NormalizeAndTypeCheck(arg, types): ...
def NormalizeAndTypeCheckKeys(keys): ...

class _BaseIndex:
    BUILDING: Any
    SERVING: Any
    DELETING: Any
    ERROR: Any
    ASCENDING: Any
    DESCENDING: Any
    def __init__(self, index_id, kind, has_ancestor, properties) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...

class Index(_BaseIndex):
    Id: Any
    Kind: Any
    HasAncestor: Any
    Properties: Any

class DatastoreAdapter(datastore_rpc.AbstractAdapter):
    index_state_mappings: Any
    index_direction_mappings: Any
    def __init__(self, _id_resolver: Any | None = ...) -> None: ...
    def key_to_pb(self, key): ...
    def pb_to_key(self, pb): ...
    def entity_to_pb(self, entity): ...
    def pb_to_entity(self, pb): ...
    def pb_to_index(self, pb): ...

def CreateRPC(service: str = ..., deadline: Any | None = ..., callback: Any | None = ..., read_policy: Any | None = ...): ...
def CreateConfig(**kwds): ...
def CreateTransactionOptions(**kwds): ...
def PutAsync(entities, **kwargs): ...
def Put(entities, **kwargs): ...
def GetAsync(keys, **kwargs): ...
def Get(keys, **kwargs): ...
def GetIndexesAsync(**kwargs): ...
def GetIndexes(**kwargs): ...
def DeleteAsync(keys, **kwargs): ...
def Delete(keys, **kwargs): ...

class Entity(dict):
    def __init__(self, kind, parent: Any | None = ..., _app: Any | None = ..., name: Any | None = ..., id: Any | None = ..., unindexed_properties=..., namespace: Any | None = ..., **kwds) -> None: ...
    def app(self): ...
    def namespace(self): ...
    def kind(self): ...
    def is_saved(self): ...
    def is_projection(self): ...
    def key(self): ...
    def parent(self): ...
    def entity_group(self): ...
    def unindexed_properties(self): ...
    def set_unindexed_properties(self, unindexed_properties) -> None: ...
    def __setitem__(self, name, value) -> None: ...
    def setdefault(self, name, value): ...
    def update(self, other) -> None: ...
    def copy(self) -> None: ...
    def ToXml(self): ...
    def ToPb(self): ...
    @staticmethod
    def FromPb(pb, validate_reserved_properties: bool = ..., default_kind: str = ...): ...

class Query(dict):
    ASCENDING: Any
    DESCENDING: Any
    ORDER_FIRST: Any
    ANCESTOR_FIRST: Any
    FILTER_FIRST: Any
    OPERATORS: Any
    INEQUALITY_OPERATORS: Any
    UPPERBOUND_INEQUALITY_OPERATORS: Any
    FILTER_REGEX: Any
    def __init__(self, kind: Any | None = ..., filters=..., _app: Any | None = ..., keys_only: bool = ..., compile: bool = ..., cursor: Any | None = ..., namespace: Any | None = ..., end_cursor: Any | None = ..., projection: Any | None = ..., distinct: Any | None = ..., _namespace: Any | None = ..., _read_time_us: Any | None = ...) -> None: ...
    def Order(self, *orderings): ...
    def Hint(self, hint): ...
    def Ancestor(self, ancestor): ...
    def IsKeysOnly(self): ...
    def GetQueryOptions(self): ...
    def GetQuery(self): ...
    def GetOrder(self): ...
    def GetFilterPredicate(self): ...
    def GetDistinct(self): ...
    def GetIndexList(self): ...
    def GetCursor(self): ...
    def GetBatcher(self, config: Any | None = ...): ...
    def Run(self, **kwargs): ...
    def Get(self, limit, offset: int = ..., **kwargs): ...
    def Count(self, limit: int = ..., **kwargs): ...
    def __iter__(self): ...
    def __setitem__(self, filter, value) -> None: ...
    def setdefault(self, filter, value): ...
    def __delitem__(self, filter) -> None: ...
    def update(self, other) -> None: ...
    def copy(self) -> None: ...
    GetCompiledQuery: Any
    GetCompiledCursor: Any

def AllocateIdsAsync(model_key, size: Any | None = ..., **kwargs): ...
def AllocateIds(model_key, size: Any | None = ..., **kwargs): ...

class MultiQuery(Query):
    def __init__(self, bound_queries, orderings) -> None: ...
    def Get(self, limit, offset: int = ..., **kwargs): ...
    class SortOrderEntity:
        def __init__(self, entity_iterator, orderings) -> None: ...
        def GetEntity(self): ...
        def GetNext(self): ...
        def CmpProperties(self, that): ...
        def __cmp__(self, that): ...
    def Run(self, **kwargs): ...
    def Count(self, limit: int = ..., **kwargs): ...
    def GetIndexList(self) -> None: ...
    def GetCursor(self) -> None: ...
    def __setitem__(self, query_filter, value) -> None: ...
    def __delitem__(self, query_filter) -> None: ...
    def __iter__(self): ...
    GetCompiledCursor: Any
    GetCompiledQuery: Any

def RunInTransaction(function, *args, **kwargs): ...
def RunInReadOnlyTransaction(function, *args, **kwargs): ...
def RunInTransactionCustomRetries(retries, function, *args, **kwargs): ...
def RunInTransactionOptions(options, function, *args, **kwargs): ...
def RunInReadOnlyTransactionOptions(options, function, *args, **kwargs): ...
def IsInTransaction(): ...
def Transactional(_func: Any | None = ..., **kwargs): ...
def NonTransactional(_func: Any | None = ..., allow_existing: bool = ...): ...

class Iterator(datastore_query.ResultsIterator):
    def GetCompiledCursor(self, query): ...
    def GetIndexList(self): ...
    index_list: Any

DatastoreRPC: Any
GetRpcFromKwargs: Any
