from google.appengine.api import apiproxy_stub_map as apiproxy_stub_map, blobstore as blobstore, datastore_types as datastore_types
from google.appengine.api.images import images_service_pb2 as images_service_pb2
from google.appengine.runtime import apiproxy_errors as apiproxy_errors
from typing import Any

BlobKey: Any
JPEG: Any
PNG: Any
WEBP: Any
BMP: int
GIF: int
ICO: int
TIFF: int
OUTPUT_ENCODING_TYPES: Any
UNCHANGED_ORIENTATION: Any
CORRECT_ORIENTATION: Any
ORIENTATION_CORRECTION_TYPE: Any
TOP_LEFT: Any
TOP_CENTER: Any
TOP_RIGHT: Any
CENTER_LEFT: Any
CENTER_CENTER: Any
CENTER_RIGHT: Any
BOTTOM_LEFT: Any
BOTTOM_CENTER: Any
BOTTOM_RIGHT: Any
ANCHOR_TYPES: Any
MAX_TRANSFORMS_PER_REQUEST: int
MAX_COMPOSITES_PER_REQUEST: int

class Error(Exception): ...
class TransformationError(Error): ...
class BadRequestError(Error): ...
class NotImageError(Error): ...
class BadImageError(Error): ...
class LargeImageError(Error): ...

class InvalidBlobKeyError(Error):
    def __init__(self, blob_key: Any | None = ...) -> None: ...

class BlobKeyRequiredError(Error): ...
class UnsupportedSizeError(Error): ...
class AccessDeniedError(Error): ...
class ObjectNotFoundError(Error): ...

class Image:
    def __init__(self, image_data: Any | None = ..., blob_key: Any | None = ..., filename: Any | None = ...) -> None: ...
    def set_correct_orientation(self, correct_orientation) -> None: ...
    def resize(self, width: int = ..., height: int = ..., crop_to_fit: bool = ..., crop_offset_x: float = ..., crop_offset_y: float = ..., allow_stretch: bool = ...) -> None: ...
    def rotate(self, degrees) -> None: ...
    def horizontal_flip(self) -> None: ...
    def vertical_flip(self) -> None: ...
    def crop(self, left_x, top_y, right_x, bottom_y) -> None: ...
    def im_feeling_lucky(self) -> None: ...
    def get_original_metadata(self): ...
    def execute_transforms(self, output_encoding=..., quality: Any | None = ..., parse_source_metadata: bool = ..., transparent_substitution_rgb: Any | None = ..., rpc: Any | None = ...): ...
    def execute_transforms_async(self, output_encoding=..., quality: Any | None = ..., parse_source_metadata: bool = ..., transparent_substitution_rgb: Any | None = ..., rpc: Any | None = ...): ...
    @property
    def width(self): ...
    @property
    def height(self): ...
    @property
    def format(self): ...
    def histogram(self, rpc: Any | None = ...): ...
    def histogram_async(self, rpc: Any | None = ...): ...
    @staticmethod
    def CheckValidIntParameter(parameter, min_value, max_value, name) -> None: ...

def create_rpc(deadline: Any | None = ..., callback: Any | None = ...): ...
def resize(image_data, width: int = ..., height: int = ..., output_encoding=..., quality: Any | None = ..., correct_orientation=..., crop_to_fit: bool = ..., crop_offset_x: float = ..., crop_offset_y: float = ..., allow_stretch: bool = ..., rpc: Any | None = ..., transparent_substitution_rgb: Any | None = ...): ...
def resize_async(image_data, width: int = ..., height: int = ..., output_encoding=..., quality: Any | None = ..., correct_orientation=..., crop_to_fit: bool = ..., crop_offset_x: float = ..., crop_offset_y: float = ..., allow_stretch: bool = ..., rpc: Any | None = ..., transparent_substitution_rgb: Any | None = ...): ...
def rotate(image_data, degrees, output_encoding=..., quality: Any | None = ..., correct_orientation=..., rpc: Any | None = ..., transparent_substitution_rgb: Any | None = ...): ...
def rotate_async(image_data, degrees, output_encoding=..., quality: Any | None = ..., correct_orientation=..., rpc: Any | None = ..., transparent_substitution_rgb: Any | None = ...): ...
def horizontal_flip(image_data, output_encoding=..., quality: Any | None = ..., correct_orientation=..., rpc: Any | None = ..., transparent_substitution_rgb: Any | None = ...): ...
def horizontal_flip_async(image_data, output_encoding=..., quality: Any | None = ..., correct_orientation=..., rpc: Any | None = ..., transparent_substitution_rgb: Any | None = ...): ...
def vertical_flip(image_data, output_encoding=..., quality: Any | None = ..., correct_orientation=..., rpc: Any | None = ..., transparent_substitution_rgb: Any | None = ...): ...
def vertical_flip_async(image_data, output_encoding=..., quality: Any | None = ..., correct_orientation=..., rpc: Any | None = ..., transparent_substitution_rgb: Any | None = ...): ...
def crop(image_data, left_x, top_y, right_x, bottom_y, output_encoding=..., quality: Any | None = ..., correct_orientation=..., rpc: Any | None = ..., transparent_substitution_rgb: Any | None = ...): ...
def crop_async(image_data, left_x, top_y, right_x, bottom_y, output_encoding=..., quality: Any | None = ..., correct_orientation=..., rpc: Any | None = ..., transparent_substitution_rgb: Any | None = ...): ...
def im_feeling_lucky(image_data, output_encoding=..., quality: Any | None = ..., correct_orientation=..., rpc: Any | None = ..., transparent_substitution_rgb: Any | None = ...): ...
def im_feeling_lucky_async(image_data, output_encoding=..., quality: Any | None = ..., correct_orientation=..., rpc: Any | None = ..., transparent_substitution_rgb: Any | None = ...): ...
def composite(inputs, width, height, color: int = ..., output_encoding=..., quality: Any | None = ..., rpc: Any | None = ...): ...
def composite_async(inputs, width, height, color: int = ..., output_encoding=..., quality: Any | None = ..., rpc: Any | None = ...): ...
def histogram(image_data, rpc: Any | None = ...): ...
def histogram_async(image_data, rpc: Any | None = ...): ...

IMG_SERVING_SIZES_LIMIT: int
IMG_SERVING_SIZES: Any
IMG_SERVING_CROP_SIZES: Any

def get_serving_url(blob_key, size: Any | None = ..., crop: bool = ..., secure_url: Any | None = ..., filename: Any | None = ..., rpc: Any | None = ...): ...
def get_serving_url_async(blob_key, size: Any | None = ..., crop: bool = ..., secure_url: Any | None = ..., filename: Any | None = ..., rpc: Any | None = ...): ...
def delete_serving_url(blob_key, rpc: Any | None = ...) -> None: ...
def delete_serving_url_async(blob_key, rpc: Any | None = ...): ...
