from google.appengine.api import api_base_pb2 as api_base_pb2, apiproxy_stub_map as apiproxy_stub_map, capabilities as capabilities, namespace_manager as namespace_manager
from google.appengine.api.memcache import memcache_service_pb2 as memcache_service_pb2
from google.appengine.runtime import apiproxy_errors as apiproxy_errors
from typing import Any

BytesIO: Any
long = int
MemcacheSetResponse: Any
MemcacheSetRequest: Any
MemcacheGetResponse: Any
MemcacheGetRequest: Any
MemcacheDeleteResponse: Any
MemcacheDeleteRequest: Any
MemcacheIncrementResponse: Any
MemcacheIncrementRequest: Any
MemcacheBatchIncrementResponse: Any
MemcacheBatchIncrementRequest: Any
MemcacheFlushResponse: Any
MemcacheFlushRequest: Any
MemcacheStatsRequest: Any
MemcacheStatsResponse: Any
DELETE_NETWORK_FAILURE: int
DELETE_ITEM_MISSING: int
DELETE_SUCCESSFUL: int
STORED: Any
NOT_STORED: Any
ERROR: Any
EXISTS: Any
MAX_KEY_SIZE: int
MAX_VALUE_SIZE: Any
STAT_HITS: str
STAT_MISSES: str
STAT_BYTE_HITS: str
STAT_ITEMS: str
STAT_BYTES: str
STAT_OLDEST_ITEM_AGES: str
FLAG_TYPE_MASK: int
FLAG_COMPRESSED: Any
TYPE_STR: int
TYPE_UNICODE: int
TYPE_PICKLED: int
TYPE_INT: int
TYPE_LONG: int
TYPE_BOOL: int
CAPABILITY: Any

def create_rpc(deadline: Any | None = ..., callback: Any | None = ...): ...

class Client:
    def __init__(self, servers: Any | None = ..., debug: int = ..., pickleProtocol=..., pickler=..., unpickler=..., pload: Any | None = ..., pid: Any | None = ..., make_sync_call: Any | None = ..., _app_id: Any | None = ...) -> None: ...
    def cas_reset(self) -> None: ...
    def set_servers(self, servers) -> None: ...
    def disconnect_all(self) -> None: ...
    def forget_dead_hosts(self) -> None: ...
    def debuglog(self) -> None: ...
    def get_stats(self): ...
    def get_stats_async(self, rpc: Any | None = ...): ...
    def flush_all(self): ...
    def flush_all_async(self, rpc: Any | None = ...): ...
    def get(self, key, namespace: Any | None = ..., for_cas: bool = ...): ...
    def gets(self, key, namespace: Any | None = ...): ...
    def get_multi(self, keys, key_prefix: str = ..., namespace: Any | None = ..., for_cas: bool = ...): ...
    def get_multi_async(self, keys, key_prefix: str = ..., namespace: Any | None = ..., for_cas: bool = ..., rpc: Any | None = ...): ...
    def delete(self, key, seconds: int = ..., namespace: Any | None = ...): ...
    def delete_multi(self, keys, seconds: int = ..., key_prefix: str = ..., namespace: Any | None = ...): ...
    def delete_multi_async(self, keys, seconds: int = ..., key_prefix: str = ..., namespace: Any | None = ..., rpc: Any | None = ...): ...
    def set(self, key, value, time: int = ..., min_compress_len: int = ..., namespace: Any | None = ...): ...
    def add(self, key, value, time: int = ..., min_compress_len: int = ..., namespace: Any | None = ...): ...
    def replace(self, key, value, time: int = ..., min_compress_len: int = ..., namespace: Any | None = ...): ...
    def cas(self, key, value, time: int = ..., min_compress_len: int = ..., namespace: Any | None = ...): ...
    def set_multi(self, mapping, time: int = ..., key_prefix: str = ..., min_compress_len: int = ..., namespace: Any | None = ...): ...
    def set_multi_async(self, mapping, time: int = ..., key_prefix: str = ..., min_compress_len: int = ..., namespace: Any | None = ..., rpc: Any | None = ...): ...
    def add_multi(self, mapping, time: int = ..., key_prefix: str = ..., min_compress_len: int = ..., namespace: Any | None = ...): ...
    def add_multi_async(self, mapping, time: int = ..., key_prefix: str = ..., min_compress_len: int = ..., namespace: Any | None = ..., rpc: Any | None = ...): ...
    def replace_multi(self, mapping, time: int = ..., key_prefix: str = ..., min_compress_len: int = ..., namespace: Any | None = ...): ...
    def replace_multi_async(self, mapping, time: int = ..., key_prefix: str = ..., min_compress_len: int = ..., namespace: Any | None = ..., rpc: Any | None = ...): ...
    def cas_multi(self, mapping, time: int = ..., key_prefix: str = ..., min_compress_len: int = ..., namespace: Any | None = ...): ...
    def cas_multi_async(self, mapping, time: int = ..., key_prefix: str = ..., min_compress_len: int = ..., namespace: Any | None = ..., rpc: Any | None = ...): ...
    def incr(self, key, delta: int = ..., namespace: Any | None = ..., initial_value: Any | None = ...): ...
    def incr_async(self, key, delta: int = ..., namespace: Any | None = ..., initial_value: Any | None = ..., rpc: Any | None = ...): ...
    def decr(self, key, delta: int = ..., namespace: Any | None = ..., initial_value: Any | None = ...): ...
    def decr_async(self, key, delta: int = ..., namespace: Any | None = ..., initial_value: Any | None = ..., rpc: Any | None = ...): ...
    def offset_multi(self, mapping, key_prefix: str = ..., namespace: Any | None = ..., initial_value: Any | None = ...): ...
    def offset_multi_async(self, mapping, key_prefix: str = ..., namespace: Any | None = ..., initial_value: Any | None = ..., rpc: Any | None = ...): ...

def setup_client(client_obj) -> None: ...
