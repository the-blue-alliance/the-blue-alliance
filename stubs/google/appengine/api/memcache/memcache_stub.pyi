from google.appengine.api import apiproxy_stub as apiproxy_stub
from google.appengine.api.memcache import memcache_service_pb2 as memcache_service_pb2
from google.appengine.runtime import apiproxy_errors as apiproxy_errors
from typing import Any

MemcacheSetResponse: Any
MemcacheSetRequest: Any
MemcacheIncrementRequest: Any
MemcacheIncrementResponse: Any
MemcacheDeleteResponse: Any
MAX_REQUEST_SIZE: Any
DEFAULT_MAX_SIZE_BYTES: float
long = int

class _LRUChainableElement:
    newer: Any
    older: Any
    value: Any
    key: Any
    def __init__(self, key: str = ..., value: str = ...) -> None: ...
    @property
    def byte_size(self): ...

class CacheEntry(_LRUChainableElement):
    gettime: Any
    flags: Any
    cas_id: Any
    created_time: Any
    will_expire: Any
    locked: bool
    namespace: Any
    def __init__(self, value, expiration, flags, cas_id, gettime, namespace, key) -> None: ...
    def CheckExpired(self): ...
    def ExpireAndLock(self, timeout) -> None: ...
    def CheckLocked(self): ...

class MemcacheServiceStub(apiproxy_stub.APIProxyStub):
    THREADSAFE: bool
    def __init__(self, gettime=..., service_name: str = ..., max_size_bytes=...) -> None: ...
    def Clear(self) -> None: ...

class LRU:
    def __init__(self) -> None: ...
    def __len__(self): ...
    @property
    def newest(self): ...
    @property
    def oldest(self): ...
    def Clear(self) -> None: ...
    @property
    def total_byte_size(self): ...
    def IsEmpty(self): ...
    def Update(self, element) -> None: ...
    def Remove(self, element) -> None: ...
    def RemoveOldest(self) -> None: ...
