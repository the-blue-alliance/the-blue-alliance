from google.appengine.api import api_base_pb2 as api_base_pb2, apiproxy_stub as apiproxy_stub, apiproxy_stub_map as apiproxy_stub_map, queueinfo as queueinfo, request_info as request_info
from google.appengine.api.taskqueue import taskqueue as taskqueue
from google.appengine.runtime import apiproxy_errors as apiproxy_errors
from google.appengine.tools import queue_xml_parser as queue_xml_parser
from typing import Any

DEFAULT_RATE: str
DEFAULT_RATE_FLOAT: float
DEFAULT_BUCKET_SIZE: int
MAX_ETA: Any
MAX_PULL_TASK_SIZE_BYTES: Any
MAX_PUSH_TASK_SIZE_BYTES: Any
MAX_TASK_SIZE = MAX_PUSH_TASK_SIZE_BYTES
MAX_REQUEST_SIZE: Any
BUILT_IN_HEADERS: Any
DEFAULT_QUEUE_NAME: str
INF: float
QUEUE_MODE: Any
AUTOMATIC_QUEUES: Any
TIME_STR_FMT: str

def QueryTasksResponseToDict(queue_name, task_response, now, task_add_request_pb: Any | None = ...): ...
def ConvertGetQueuesResponseToQueuesDicts(response): ...
def ConvertTaskDictToTaskObject(task): ...

class _Group:
    gettime: Any
    def __init__(self, queue_yaml_parser: Any | None = ..., app_id: Any | None = ..., _all_queues_valid: bool = ..., _update_newest_eta: Any | None = ..., _testing_validate_state: bool = ..., gettime=...): ...
    def GetQueuesAsDicts(self): ...
    def HasQueue(self, queue_name): ...
    def GetQueue(self, queue_name): ...
    def GetQueues(self): ...
    def GetNextPushTask(self): ...
    def BulkAdd_Rpc(self, request, response) -> None: ...
    def UpdateQueue_Rpc(self, request, response) -> None: ...
    def FetchQueues_Rpc(self, request, response) -> None: ...
    def FetchQueueStats_Rpc(self, request, response) -> None: ...
    def QueryTasks_Rpc(self, request, response) -> None: ...
    def FetchTask_Rpc(self, request, response) -> None: ...
    def Delete_Rpc(self, request, response) -> None: ...
    def DeleteQueue_Rpc(self, request, response) -> None: ...
    def PauseQueue_Rpc(self, request, response) -> None: ...
    def PurgeQueue_Rpc(self, request, response) -> None: ...
    def QueryAndOwnTasks_Rpc(self, request, response) -> None: ...
    def ModifyTaskLease_Rpc(self, request, response) -> None: ...

class Retry:
    def __init__(self, task, queue) -> None: ...
    def CanRetry(self, retry_count, age_usec): ...
    def CalculateBackoffUsec(self, retry_count): ...

class _Queue:
    queue_name: Any
    bucket_refill_per_second: Any
    bucket_capacity: Any
    user_specified_rate: Any
    retry_parameters: Any
    max_concurrent_requests: Any
    paused: Any
    queue_mode: Any
    acl: Any
    target: Any
    gettime: Any
    task_name_archive: Any
    task_add_request_pbs: Any
    def __init__(self, queue_name, bucket_refill_per_second=..., bucket_capacity=..., user_specified_rate=..., retry_parameters: Any | None = ..., max_concurrent_requests: Any | None = ..., paused: bool = ..., queue_mode=..., acl: Any | None = ..., _testing_validate_state: Any | None = ..., target: Any | None = ..., gettime=...): ...
    def VerifyIndexes(self) -> None: ...
    def UpdateQueue_Rpc(self, request, response) -> None: ...
    def FetchQueues_Rpc(self, request, response) -> None: ...
    def QueryTasks_Rpc(self, request, response) -> None: ...
    def FetchTask_Rpc(self, request, response) -> None: ...
    def Delete_Rpc(self, request, response) -> None: ...
    def QueryAndOwnTasks_Rpc(self, request, response) -> None: ...
    def ModifyTaskLease_Rpc(self, request, response) -> None: ...
    def IncRetryCount(self, task_name) -> None: ...
    def GetTasksAsDicts(self): ...
    def GetTaskAsDict(self, task_name): ...
    def PurgeQueue(self) -> None: ...
    def RunTaskNow(self, task) -> None: ...
    def PostponeTask(self, task, new_eta_usec) -> None: ...
    def Lookup(self, maximum, name: Any | None = ..., eta: Any | None = ...): ...
    def Count(self): ...
    def OldestTask(self): ...
    def Oldest(self): ...
    def Add(self, request, now) -> None: ...
    def Delete(self, name): ...
    def Populate(self, num_tasks): ...

class _TaskExecutor:
    def __init__(self, default_host, request_data) -> None: ...
    def ExecuteTask(self, task, queue): ...

class _BackgroundTaskScheduler:
    task_executor: Any
    default_retry_seconds: Any
    def __init__(self, group, task_executor, retry_seconds, **kwargs) -> None: ...
    def UpdateNextEventTime(self, next_event_time) -> None: ...
    def Shutdown(self) -> None: ...
    def MainLoop(self) -> None: ...

class TaskQueueServiceStub(apiproxy_stub.APIProxyStub):
    THREADSAFE: bool
    gettime: Any
    def __init__(self, service_name: str = ..., root_path: Any | None = ..., queue_config_path: Any | None = ..., auto_task_running: bool = ..., task_retry_seconds: int = ..., _all_queues_valid: bool = ..., default_http_server: str = ..., _testing_validate_state: bool = ..., request_data: Any | None = ..., gettime=...): ...
    def EnableAutoTaskRunning(self) -> None: ...
    def StartBackgroundExecution(self) -> None: ...
    def Shutdown(self) -> None: ...
    def GetQueues(self): ...
    def GetTasks(self, queue_name): ...
    def DeleteTask(self, queue_name, task_name) -> None: ...
    def FlushQueue(self, queue_name) -> None: ...
    def Clear(self): ...
    def get_filtered_tasks(self, url: Any | None = ..., name: Any | None = ..., queue_names: Any | None = ...): ...
