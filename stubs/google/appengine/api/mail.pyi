from google.appengine.api.mail_errors import *
import email.header
import typing
from collections.abc import MutableMapping
from google.appengine.api import api_base_pb2 as api_base_pb2, apiproxy_stub_map as apiproxy_stub_map, mail_service_pb2 as mail_service_pb2, users as users
from google.appengine.runtime import apiproxy_errors as apiproxy_errors
from typing import Any

ERROR_MAP: Any
EXTENSION_MIME_MAP: Any
EXTENSION_BLACKLIST: Any
HEADER_WHITELIST: Any
INCOMING_MAIL_URL_PATTERN: str
BOUNCE_NOTIFICATION_URL_PATH: str

def invalid_email_reason(email_address, field): ...
InvalidEmailReason = invalid_email_reason

def is_email_valid(email_address): ...
IsEmailValid = is_email_valid

def check_email_valid(email_address, field) -> None: ...
CheckEmailValid = check_email_valid

def is_ascii(string): ...
def invalid_headers_reason(headers): ...
def check_headers_valid(headers) -> None: ...
def send_mail(sender, to, subject, body, make_sync_call=..., **kw) -> None: ...
SendMail = send_mail

def send_mail_to_admins(sender, subject, body, make_sync_call=..., **kw) -> None: ...
SendMailToAdmins = send_mail_to_admins

def mail_message_to_mime_message(protocol_message): ...
MailMessageToMIMEMessage = mail_message_to_mime_message
wrapping: Any

class Attachment:
    filename: Any
    payload: Any
    content_id: Any
    def __init__(self, filename, payload, content_id: Any | None = ...) -> None: ...
    def __eq__(self, other): ...
    def __hash__(self): ...
    def __ne__(self, other): ...
    def __iter__(self): ...
    def __getitem__(self, i): ...
    def __contains__(self, val): ...
    def __len__(self): ...

class EncodedPayload:
    payload: Any
    charset: Any
    encoding: Any
    def __init__(self, payload: bytes, charset: Any | None = ..., encoding: Any | None = ...) -> None: ...
    def decode(self): ...
    def __eq__(self, other): ...
    def __hash__(self): ...
    def copy_to(self, mime_message) -> None: ...
    def to_mime_message(self): ...

class _EmailMessageBase:
    PROPERTIES: Any
    ALLOWED_EMPTY_PROPERTIES: Any
    def __init__(self, mime_message: Any | None = ..., **kw) -> None: ...
    @property
    def original(self): ...
    def initialize(self, **kw) -> None: ...
    def Initialize(self, **kw) -> None: ...
    def check_initialized(self) -> None: ...
    def CheckInitialized(self) -> None: ...
    def is_initialized(self): ...
    def IsInitialized(self): ...
    def ToProto(self): ...
    def to_mime_message(self): ...
    def ToMIMEMessage(self): ...
    def send(self, make_sync_call=...) -> None: ...
    def Send(self, *args, **kwds) -> None: ...
    def __setattr__(self, attr, value) -> None: ...
    sender: Any
    reply_to: Any
    subject: Any
    def update_from_mime_message(self, mime_message) -> None: ...
    def bodies(self, content_type: typing.Text = ...): ...

class EmailMessage(_EmailMessageBase):
    PROPERTIES: Any
    def __init__(self, mime_message: typing.Optional[typing.Union[typing.Text, bytes, typing.TextIO, email.message.Message]] = ..., **kw) -> None: ...
    def check_initialized(self) -> None: ...
    def CheckInitialized(self) -> None: ...
    def ToProto(self): ...
    def __setattr__(self, attr, value) -> None: ...
    to: Any
    cc: Any
    bcc: Any
    def update_from_mime_message(self, mime_message) -> None: ...

class AdminEmailMessage(_EmailMessageBase):
    def __setattr__(self, attr, value) -> None: ...

class InboundEmailMessage(EmailMessage):
    PROPERTIES: Any
    ALLOW_BLANK_EMAIL: bool
    @classmethod
    def from_environ(cls, environ): ...
    def update_from_mime_message(self, mime_message) -> None: ...
    def bodies(self, content_type: typing.Text = ...): ...
    def to_mime_message(self): ...

class _MultiDict(MutableMapping):
    def __init__(self) -> None: ...
    def __len__(self): ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    def __delitem__(self, key) -> None: ...
    def add(self, key, value) -> None: ...
    def keys(self) -> None: ...
    __iter__: Any
    @classmethod
    def from_fieldstorage(cls, fs): ...

class BounceNotification:
    def __init__(self, post_vars: typing.Mapping[str, typing.Any]) -> None: ...
    @classmethod
    def from_environ(cls, environ): ...
    @property
    def original(self): ...
    @property
    def notification(self): ...
    @property
    def original_raw_message(self): ...
