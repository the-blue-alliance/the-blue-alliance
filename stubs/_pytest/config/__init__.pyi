import enum
from .argparsing import Argument as Argument
from .exceptions import PrintHelp as PrintHelp, UsageError as UsageError
from .findpaths import determine_setup as determine_setup, exists as exists
from _pytest._code import ExceptionInfo as ExceptionInfo, filter_traceback as filter_traceback
from _pytest._io import TerminalWriter as TerminalWriter
from _pytest.compat import TYPE_CHECKING as TYPE_CHECKING, importlib_metadata as importlib_metadata
from _pytest.outcomes import Skipped as Skipped, fail as fail
from _pytest.pathlib import Path as Path
from _pytest.store import Store as Store
from _pytest.warning_types import PytestConfigWarning as PytestConfigWarning
from pluggy import PluginManager
from typing import Any, List, Optional, Union

hookimpl: Any
hookspec: Any

class ExitCode(enum.IntEnum):
    OK: int = ...
    TESTS_FAILED: int = ...
    INTERRUPTED: int = ...
    INTERNAL_ERROR: int = ...
    USAGE_ERROR: int = ...
    NO_TESTS_COLLECTED: int = ...

class ConftestImportFailure(Exception):
    path: Any = ...
    excinfo: Any = ...
    def __init__(self, path: Any, excinfo: Any) -> None: ...

def main(args: Any=..., plugins: Any=...) -> Union[int, ExitCode]: ...

class cmdline:
    main: Any = ...

def filename_arg(path: Any, optname: Any): ...
def directory_arg(path: Any, optname: Any): ...

essential_plugins: Any
default_plugins: Any
builtin_plugins: Any

def get_config(args: Optional[Any] = ..., plugins: Optional[Any] = ...): ...
def get_plugin_manager(): ...

class PytestPluginManager(PluginManager):
    rewrite_hook: Any = ...
    def __init__(self) -> None: ...
    def parse_hookimpl_opts(self, plugin: Any, name: Any): ...
    def parse_hookspec_opts(self, module_or_class: Any, name: Any): ...
    def register(self, plugin: Any, name: Optional[Any] = ...): ...
    def getplugin(self, name: Any): ...
    def hasplugin(self, name: Any): ...
    def pytest_configure(self, config: Any) -> None: ...
    def consider_preparse(self, args: Any, *, exclude_only: bool = ...) -> None: ...
    def consider_pluginarg(self, arg: Any) -> None: ...
    def consider_conftest(self, conftestmodule: Any) -> None: ...
    def consider_env(self) -> None: ...
    def consider_module(self, mod: Any) -> None: ...
    def import_plugin(self, modname: Any, consider_entry_points: bool = ...) -> None: ...

class Notset: ...

notset: Any

class Config:
    class InvocationParams:
        args: Any = ...
        plugins: Any = ...
        dir: Any = ...
        def __init__(self, args: Any, plugins: Any, dir: Any) -> None: ...
        def __ne__(self, other: Any) -> Any: ...
        def __eq__(self, other: Any) -> Any: ...
        def __lt__(self, other: Any) -> Any: ...
        def __le__(self, other: Any) -> Any: ...
        def __gt__(self, other: Any) -> Any: ...
        def __ge__(self, other: Any) -> Any: ...
    option: Any = ...
    invocation_params: Any = ...
    pluginmanager: Any = ...
    trace: Any = ...
    hook: Any = ...
    cache: Any = ...
    def __init__(self, pluginmanager: Any, *, invocation_params: Any=...) -> None: ...
    @property
    def invocation_dir(self): ...
    def add_cleanup(self, func: Any) -> None: ...
    def get_terminal_writer(self): ...
    def pytest_cmdline_parse(self, pluginmanager: Any, args: Any): ...
    def notify_exception(self, excinfo: Any, option: Optional[Any] = ...) -> None: ...
    def cwd_relative_nodeid(self, nodeid: Any): ...
    @classmethod
    def fromdictargs(cls, option_dict: Any, args: Any): ...
    def pytest_load_initial_conftests(self, early_config: Any) -> None: ...
    args: Any = ...
    def parse(self, args: List[str], addopts: bool=...) -> None: ...
    def addinivalue_line(self, name: Any, line: Any) -> None: ...
    def getini(self, name: str) -> Any: ...
    def getoption(self, name: str, default: Any=..., skip: bool=...) -> Any: ...
    def getvalue(self, name: Any, path: Optional[Any] = ...): ...
    def getvalueorskip(self, name: Any, path: Optional[Any] = ...): ...

def create_terminal_writer(config: Config, *args: Any, **kwargs: Any) -> TerminalWriter: ...
