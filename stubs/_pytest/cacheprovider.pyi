from .pathlib import Path as Path, resolve_from_str as resolve_from_str, rm_rf as rm_rf
from .reports import CollectReport as CollectReport
from _pytest import nodes as nodes
from _pytest._io import TerminalWriter as TerminalWriter
from _pytest.config import Config as Config
from _pytest.main import Session as Session
from _pytest.python import Module as Module
from typing import Any, Generator, List, Optional, Set

README_CONTENT: str
CACHEDIR_TAG_CONTENT: bytes

class Cache:
    @classmethod
    def for_config(cls, config: Any): ...
    @classmethod
    def clear_cache(cls: Any, cachedir: Path) -> Any: ...
    @staticmethod
    def cache_dir_from_config(config: Any): ...
    def warn(self, fmt: Any, **args: Any) -> None: ...
    def makedir(self, name: Any): ...
    def get(self, key: Any, default: Any): ...
    def set(self, key: Any, value: Any) -> None: ...
    def __init__(self, cachedir: Any, config: Any) -> None: ...
    def __ne__(self, other: Any) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __lt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...

class LFPluginCollWrapper:
    lfplugin: Any = ...
    def __init__(self, lfplugin: LFPlugin) -> None: ...
    def pytest_make_collect_report(self, collector: Any) -> Generator: ...

class LFPluginCollSkipfiles:
    lfplugin: Any = ...
    def __init__(self, lfplugin: LFPlugin) -> None: ...
    def pytest_make_collect_report(self, collector: Any) -> Optional[CollectReport]: ...

class LFPlugin:
    config: Any = ...
    active: Any = ...
    lastfailed: Any = ...
    def __init__(self, config: Config) -> None: ...
    def get_last_failed_paths(self) -> Set[Path]: ...
    def pytest_report_collectionfinish(self): ...
    def pytest_runtest_logreport(self, report: Any) -> None: ...
    def pytest_collectreport(self, report: Any) -> None: ...
    def pytest_collection_modifyitems(self, session: Any, config: Any, items: Any) -> None: ...
    def pytest_sessionfinish(self, session: Any) -> None: ...

class NFPlugin:
    config: Any = ...
    active: Any = ...
    cached_nodeids: Any = ...
    def __init__(self, config: Any) -> None: ...
    def pytest_collection_modifyitems(self, session: Session, config: Config, items: List[nodes.Item]) -> None: ...
    def pytest_sessionfinish(self, session: Any) -> None: ...

def pytest_addoption(parser: Any) -> None: ...
def pytest_cmdline_main(config: Any): ...
def pytest_configure(config: Config) -> None: ...
def cache(request: Any): ...
def pytest_report_header(config: Any): ...
def cacheshow(config: Any, session: Any): ...
