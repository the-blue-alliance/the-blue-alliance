import argparse
from _pytest import nodes as nodes
from _pytest._io import TerminalWriter as TerminalWriter
from _pytest.config import Config as Config, ExitCode as ExitCode
from _pytest.deprecated import TERMINALWRITER_WRITER as TERMINALWRITER_WRITER
from _pytest.main import Session as Session
from _pytest.reports import CollectReport as CollectReport, TestReport as TestReport
from typing import Any, Dict, List, Optional, Tuple

REPORT_COLLECTING_RESOLUTION: float
KNOWN_TYPES: Any

class MoreQuietAction(argparse.Action):
    def __init__(self, option_strings: Any, dest: Any, default: Optional[Any] = ..., required: bool = ..., help: Optional[Any] = ...) -> None: ...
    def __call__(self, parser: Any, namespace: Any, values: Any, option_string: Optional[Any] = ...) -> None: ...

def pytest_addoption(parser: Any) -> None: ...
def pytest_configure(config: Config) -> None: ...
def getreportopt(config: Config) -> str: ...
def pytest_report_teststatus(report: TestReport) -> Tuple[str, str, str]: ...

class WarningReport:
    message: Any = ...
    nodeid: Any = ...
    fslocation: Any = ...
    count_towards_summary: bool = ...
    def get_location(self, config: Any): ...
    def __init__(self, message: Any, nodeid: Any, fslocation: Any) -> None: ...
    def __ne__(self, other: Any) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __lt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...

class TerminalReporter:
    config: Any = ...
    stats: Any = ...
    startdir: Any = ...
    currentfspath: Any = ...
    reportchars: Any = ...
    hasmarkup: Any = ...
    isatty: Any = ...
    def __init__(self, config: Config, file: Any=...) -> None: ...
    @property
    def writer(self) -> TerminalWriter: ...
    @writer.setter
    def writer(self, value: TerminalWriter) -> Any: ...
    @property
    def verbosity(self): ...
    @property
    def showheader(self): ...
    @property
    def showfspath(self): ...
    @showfspath.setter
    def showfspath(self, value: Any) -> None: ...
    @property
    def showlongtestinfo(self): ...
    def hasopt(self, char: Any): ...
    def write_fspath_result(self, nodeid: Any, res: Any, **markup: Any) -> None: ...
    def write_ensure_prefix(self, prefix: Any, extra: str = ..., **kwargs: Any) -> None: ...
    def ensure_newline(self) -> None: ...
    def write(self, content: Any, **markup: Any) -> None: ...
    def write_line(self, line: Any, **markup: Any) -> None: ...
    def rewrite(self, line: Any, **markup: Any) -> None: ...
    def write_sep(self, sep: Any, title: Optional[Any] = ..., **markup: Any) -> None: ...
    def section(self, title: Any, sep: str = ..., **kw: Any) -> None: ...
    def line(self, msg: Any, **kw: Any) -> None: ...
    def pytest_internalerror(self, excrepr: Any): ...
    def pytest_warning_captured(self, warning_message: Any, item: Any) -> None: ...
    def pytest_plugin_registered(self, plugin: Any) -> None: ...
    def pytest_deselected(self, items: Any) -> None: ...
    def pytest_runtest_logstart(self, nodeid: Any, location: Any) -> None: ...
    def pytest_runtest_logreport(self, report: TestReport) -> None: ...
    def pytest_runtest_logfinish(self, nodeid: Any) -> None: ...
    def pytest_collection(self) -> None: ...
    def pytest_collectreport(self, report: CollectReport) -> None: ...
    def report_collect(self, final: bool = ...) -> None: ...
    def pytest_sessionstart(self, session: Session) -> None: ...
    def pytest_report_header(self, config: Any): ...
    def pytest_collection_finish(self, session: Any) -> None: ...
    def pytest_sessionfinish(self, session: Session, exitstatus: ExitCode) -> Any: ...
    def pytest_terminal_summary(self) -> None: ...
    def pytest_keyboard_interrupt(self, excinfo: Any) -> None: ...
    def pytest_unconfigure(self) -> None: ...
    def getreports(self, name: Any): ...
    def summary_warnings(self): ...
    def summary_passes(self) -> None: ...
    def print_teardown_sections(self, rep: TestReport) -> None: ...
    def summary_failures(self) -> None: ...
    def summary_errors(self) -> None: ...
    def summary_stats(self) -> None: ...
    def short_test_summary(self) -> None: ...
    def build_summary_stats_line(self) -> Tuple[List[Tuple[str, Dict[str, bool]]], str]: ...

def format_session_duration(seconds: float) -> str: ...
