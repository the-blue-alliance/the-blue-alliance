import logging
from _pytest import nodes as nodes
from _pytest.compat import nullcontext as nullcontext
from _pytest.config import Config as Config, create_terminal_writer as create_terminal_writer
from _pytest.pathlib import Path as Path
from typing import AbstractSet, Any, Generator, List, Mapping, Optional

DEFAULT_LOG_FORMAT: str
DEFAULT_LOG_DATE_FORMAT: str

class ColoredLevelFormatter(logging.Formatter):
    LOGLEVEL_COLOROPTS: Mapping[int, AbstractSet[str]] = ...
    LEVELNAME_FMT_REGEX: Any = ...
    def __init__(self, terminalwriter: Any, *args: Any, **kwargs: Any) -> None: ...
    def format(self, record: Any): ...

class PercentStyleMultiline(logging.PercentStyle):
    def __init__(self, fmt: Any, auto_indent: Any) -> None: ...
    def format(self, record: Any): ...

def get_option_ini(config: Any, *names: Any): ...
def pytest_addoption(parser: Any) -> None: ...
def catching_logs(handler: Any, formatter: Optional[Any] = ..., level: Optional[Any] = ...) -> None: ...

class LogCaptureHandler(logging.StreamHandler):
    records: Any = ...
    def __init__(self) -> None: ...
    def emit(self, record: logging.LogRecord) -> None: ...
    stream: Any = ...
    def reset(self) -> None: ...

class LogCaptureFixture:
    def __init__(self, item: Any) -> None: ...
    @property
    def handler(self) -> LogCaptureHandler: ...
    def get_records(self, when: str) -> List[logging.LogRecord]: ...
    @property
    def text(self): ...
    @property
    def records(self): ...
    @property
    def record_tuples(self): ...
    @property
    def messages(self): ...
    def clear(self) -> None: ...
    def set_level(self, level: Any, logger: Optional[Any] = ...) -> None: ...
    def at_level(self, level: Any, logger: Optional[Any] = ...) -> None: ...

def caplog(request: Any) -> None: ...
def get_log_level_for_setting(config: Config, *setting_names: str) -> Optional[int]: ...
def pytest_configure(config: Any) -> None: ...

class LoggingPlugin:
    print_logs: Any = ...
    formatter: Any = ...
    log_level: Any = ...
    log_file_level: Any = ...
    log_file_format: Any = ...
    log_file_date_format: Any = ...
    log_file_formatter: Any = ...
    log_file_handler: Any = ...
    log_cli_handler: Any = ...
    live_logs_context: Any = ...
    def __init__(self, config: Config): ...
    def set_log_path(self, fname: Any) -> None: ...
    def pytest_collection(self) -> Generator[None, None, None]: ...
    def pytest_runtest_setup(self, item: Any) -> None: ...
    def pytest_runtest_call(self, item: Any) -> None: ...
    def pytest_runtest_teardown(self, item: Any) -> None: ...
    def pytest_runtest_logstart(self) -> None: ...
    def pytest_runtest_logfinish(self) -> None: ...
    def pytest_runtest_logreport(self) -> None: ...
    def pytest_sessionfinish(self) -> None: ...
    def pytest_sessionstart(self) -> None: ...
    def pytest_runtestloop(self, session: Any) -> None: ...

class _LiveLoggingStreamHandler(logging.StreamHandler):
    capture_manager: Any = ...
    def __init__(self, terminal_reporter: Any, capture_manager: Any) -> None: ...
    def reset(self) -> None: ...
    def set_when(self, when: Any) -> None: ...
    def emit(self, record: Any) -> None: ...
