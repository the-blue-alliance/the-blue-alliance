import _pytest._code
from _pytest.compat import STRING_TYPES as STRING_TYPES, TYPE_CHECKING as TYPE_CHECKING, overload as overload
from _pytest.outcomes import fail as fail
from decimal import Decimal
from types import TracebackType
from typing import Any, Optional, Pattern, Tuple, Type, Union

BASE_TYPE: Any

class ApproxBase:
    __array_ufunc__: Any = ...
    __array_priority__: int = ...
    expected: Any = ...
    abs: Any = ...
    rel: Any = ...
    nan_ok: Any = ...
    def __init__(self, expected: Any, rel: Optional[Any] = ..., abs: Optional[Any] = ..., nan_ok: bool = ...) -> None: ...
    def __eq__(self, actual: Any) -> Any: ...
    __hash__: Any = ...
    def __ne__(self, actual: Any) -> Any: ...

class ApproxNumpy(ApproxBase):
    def __eq__(self, actual: Any) -> Any: ...

class ApproxMapping(ApproxBase):
    def __eq__(self, actual: Any) -> Any: ...

class ApproxSequencelike(ApproxBase):
    def __eq__(self, actual: Any) -> Any: ...

class ApproxScalar(ApproxBase):
    DEFAULT_ABSOLUTE_TOLERANCE: Union[float, Decimal] = ...
    DEFAULT_RELATIVE_TOLERANCE: Union[float, Decimal] = ...
    def __eq__(self, actual: Any) -> Any: ...
    __hash__: Any = ...
    @property
    def tolerance(self): ...

class ApproxDecimal(ApproxScalar):
    DEFAULT_ABSOLUTE_TOLERANCE: Any = ...
    DEFAULT_RELATIVE_TOLERANCE: Any = ...

def approx(expected: Any, rel: Optional[Any] = ..., abs: Optional[Any] = ..., nan_ok: bool = ...): ...
def raises(expected_exception: Union[Type[_E], Tuple[Type[_E], ...]], *, match: Optional[Union[str, Pattern]]=...) -> RaisesContext[_E]: ...

class RaisesContext:
    expected_exception: Any = ...
    message: Any = ...
    match_expr: Any = ...
    excinfo: Any = ...
    def __init__(self, expected_exception: Union[Type[_E], Tuple[Type[_E], ...]], message: str, match_expr: Optional[Union[str, Pattern]]=...) -> None: ...
    def __enter__(self) -> _pytest._code.ExceptionInfo[_E]: ...
    def __exit__(self, exc_type: Optional[Type[BaseException]], exc_val: Optional[BaseException], exc_tb: Optional[TracebackType]) -> bool: ...
