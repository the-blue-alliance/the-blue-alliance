from _pytest.compat import getimfunc as getimfunc, is_async_function as is_async_function
from _pytest.config import hookimpl as hookimpl
from _pytest.outcomes import exit as exit, fail as fail, skip as skip, xfail as xfail
from _pytest.python import Class as Class, Function as Function
from _pytest.runner import CallInfo as CallInfo
from _pytest.skipping import skipped_by_mark_key as skipped_by_mark_key, unexpectedsuccess_key as unexpectedsuccess_key
from typing import Any

def pytest_pycollect_makeitem(collector: Any, name: Any, obj: Any): ...

class UnitTestCase(Class):
    nofuncargs: bool = ...
    def collect(self) -> None: ...

class TestCaseFunction(Function):
    nofuncargs: bool = ...
    def setup(self) -> None: ...
    def teardown(self) -> None: ...
    def startTest(self, testcase: Any) -> None: ...
    def addError(self, testcase: Any, rawexcinfo: Any) -> None: ...
    def addFailure(self, testcase: Any, rawexcinfo: Any) -> None: ...
    def addSkip(self, testcase: Any, reason: Any) -> None: ...
    def addExpectedFailure(self, testcase: Any, rawexcinfo: Any, reason: str = ...) -> None: ...
    def addUnexpectedSuccess(self, testcase: Any, reason: str = ...) -> None: ...
    def addSuccess(self, testcase: Any) -> None: ...
    def stopTest(self, testcase: Any) -> None: ...
    def runtest(self) -> None: ...

def pytest_runtest_makereport(item: Any, call: Any): ...
def pytest_runtest_protocol(item: Any) -> None: ...
def check_testcase_implements_trial_reporter(done: Any = ...) -> None: ...
