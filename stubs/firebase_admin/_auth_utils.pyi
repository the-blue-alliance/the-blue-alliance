from firebase_admin import exceptions as exceptions
from typing import Any, Optional

MAX_CLAIMS_PAYLOAD_SIZE: int
RESERVED_CLAIMS: Any
VALID_EMAIL_ACTION_TYPES: Any

class PageIterator:
    def __init__(self, current_page: Any) -> None: ...
    def next(self): ...
    @property
    def items(self) -> None: ...
    def __next__(self): ...
    def __iter__(self) -> Any: ...

def validate_uid(uid: Any, required: bool = ...): ...
def validate_email(email: Any, required: bool = ...): ...
def validate_phone(phone: Any, required: bool = ...): ...
def validate_password(password: Any, required: bool = ...): ...
def validate_bytes(value: Any, label: Any, required: bool = ...): ...
def validate_display_name(display_name: Any, required: bool = ...): ...
def validate_provider_id(provider_id: Any, required: bool = ...): ...
def validate_provider_uid(provider_uid: Any, required: bool = ...): ...
def validate_photo_url(photo_url: Any, required: bool = ...): ...
def validate_timestamp(timestamp: Any, label: Any, required: bool = ...): ...
def validate_int(value: Any, label: Any, low: Optional[Any] = ..., high: Optional[Any] = ...): ...
def validate_string(value: Any, label: Any): ...
def validate_boolean(value: Any, label: Any): ...
def validate_custom_claims(custom_claims: Any, required: bool = ...): ...
def validate_action_type(action_type: Any): ...
def build_update_mask(params: Any): ...

class UidAlreadyExistsError(exceptions.AlreadyExistsError):
    default_message: str = ...
    def __init__(self, message: Any, cause: Any, http_response: Any) -> None: ...

class EmailAlreadyExistsError(exceptions.AlreadyExistsError):
    default_message: str = ...
    def __init__(self, message: Any, cause: Any, http_response: Any) -> None: ...

class InsufficientPermissionError(exceptions.PermissionDeniedError):
    default_message: str = ...
    def __init__(self, message: Any, cause: Any, http_response: Any) -> None: ...

class InvalidDynamicLinkDomainError(exceptions.InvalidArgumentError):
    default_message: str = ...
    def __init__(self, message: Any, cause: Any, http_response: Any) -> None: ...

class InvalidIdTokenError(exceptions.InvalidArgumentError):
    default_message: str = ...
    def __init__(self, message: Any, cause: Optional[Any] = ..., http_response: Optional[Any] = ...) -> None: ...

class PhoneNumberAlreadyExistsError(exceptions.AlreadyExistsError):
    default_message: str = ...
    def __init__(self, message: Any, cause: Any, http_response: Any) -> None: ...

class UnexpectedResponseError(exceptions.UnknownError):
    def __init__(self, message: Any, cause: Optional[Any] = ..., http_response: Optional[Any] = ...) -> None: ...

class UserNotFoundError(exceptions.NotFoundError):
    default_message: str = ...
    def __init__(self, message: Any, cause: Optional[Any] = ..., http_response: Optional[Any] = ...) -> None: ...

class TenantNotFoundError(exceptions.NotFoundError):
    default_message: str = ...
    def __init__(self, message: Any, cause: Optional[Any] = ..., http_response: Optional[Any] = ...) -> None: ...

class TenantIdMismatchError(exceptions.InvalidArgumentError):
    def __init__(self, message: Any) -> None: ...

class ConfigurationNotFoundError(exceptions.NotFoundError):
    default_message: str = ...
    def __init__(self, message: Any, cause: Optional[Any] = ..., http_response: Optional[Any] = ...) -> None: ...

def handle_auth_backend_error(error: Any): ...
