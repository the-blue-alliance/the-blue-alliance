from firebase_admin import exceptions as exceptions, storage as storage
from typing import Any, Optional

def create_model(model: Any, app: Optional[Any] = ...): ...
def update_model(model: Any, app: Optional[Any] = ...): ...
def publish_model(model_id: Any, app: Optional[Any] = ...): ...
def unpublish_model(model_id: Any, app: Optional[Any] = ...): ...
def get_model(model_id: Any, app: Optional[Any] = ...): ...
def list_models(list_filter: Optional[Any] = ..., page_size: Optional[Any] = ..., page_token: Optional[Any] = ..., app: Optional[Any] = ...): ...
def delete_model(model_id: Any, app: Optional[Any] = ...) -> None: ...

class Model:
    def __init__(self, display_name: Optional[Any] = ..., tags: Optional[Any] = ..., model_format: Optional[Any] = ...) -> None: ...
    @classmethod
    def from_dict(cls, data: Any, app: Optional[Any] = ...): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    @property
    def model_id(self): ...
    @property
    def display_name(self): ...
    @display_name.setter
    def display_name(self, display_name: Any): ...
    @property
    def create_time(self): ...
    @property
    def update_time(self): ...
    @property
    def validation_error(self): ...
    @property
    def published(self): ...
    @property
    def etag(self): ...
    @property
    def model_hash(self): ...
    @property
    def tags(self): ...
    @tags.setter
    def tags(self, tags: Any): ...
    @property
    def locked(self): ...
    def wait_for_unlocked(self, max_time_seconds: Optional[Any] = ...) -> None: ...
    @property
    def model_format(self): ...
    @model_format.setter
    def model_format(self, model_format: Any): ...
    def as_dict(self, for_upload: bool = ...): ...

class ModelFormat:
    def as_dict(self, for_upload: bool = ...) -> None: ...

class TFLiteFormat(ModelFormat):
    def __init__(self, model_source: Optional[Any] = ...) -> None: ...
    @classmethod
    def from_dict(cls, data: Any): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    @property
    def model_source(self): ...
    @model_source.setter
    def model_source(self, model_source: Any) -> None: ...
    @property
    def size_bytes(self): ...
    def as_dict(self, for_upload: bool = ...): ...

class TFLiteModelSource:
    def as_dict(self, for_upload: bool = ...) -> None: ...

class _CloudStorageClient:
    GCS_URI: str = ...
    BLOB_NAME: str = ...
    @staticmethod
    def upload(bucket_name: Any, model_file_name: Any, app: Any): ...
    @staticmethod
    def sign_uri(gcs_tflite_uri: Any, app: Any): ...

class TFLiteGCSModelSource(TFLiteModelSource):
    def __init__(self, gcs_tflite_uri: Any, app: Optional[Any] = ...) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    @classmethod
    def from_tflite_model_file(cls, model_file_name: Any, bucket_name: Optional[Any] = ..., app: Optional[Any] = ...): ...
    @classmethod
    def from_saved_model(cls, saved_model_dir: Any, model_file_name: str = ..., bucket_name: Optional[Any] = ..., app: Optional[Any] = ...): ...
    @classmethod
    def from_keras_model(cls, keras_model: Any, model_file_name: str = ..., bucket_name: Optional[Any] = ..., app: Optional[Any] = ...): ...
    @property
    def gcs_tflite_uri(self): ...
    @gcs_tflite_uri.setter
    def gcs_tflite_uri(self, gcs_tflite_uri: Any) -> None: ...
    def as_dict(self, for_upload: bool = ...): ...

class ListModelsPage:
    def __init__(self, list_models_func: Any, list_filter: Any, page_size: Any, page_token: Any, app: Any) -> None: ...
    @property
    def models(self): ...
    @property
    def list_filter(self): ...
    @property
    def next_page_token(self): ...
    @property
    def has_next_page(self): ...
    def get_next_page(self): ...
    def iterate_all(self): ...

class _ModelIterator:
    def __init__(self, current_page: Any) -> None: ...
    def next(self): ...
    def __next__(self): ...
    def __iter__(self) -> Any: ...

class _MLService:
    PROJECT_URL: str = ...
    OPERATION_URL: str = ...
    POLL_EXPONENTIAL_BACKOFF_FACTOR: float = ...
    POLL_BASE_WAIT_TIME_SECONDS: int = ...
    def __init__(self, app: Any) -> None: ...
    def get_operation(self, op_name: Any): ...
    def handle_operation(self, operation: Any, wait_for_operation: bool = ..., max_time_seconds: Optional[Any] = ...): ...
    def create_model(self, model: Any): ...
    def update_model(self, model: Any, update_mask: Optional[Any] = ...): ...
    def set_published(self, model_id: Any, publish: Any): ...
    def get_model(self, model_id: Any): ...
    def list_models(self, list_filter: Any, page_size: Any, page_token: Any): ...
    def delete_model(self, model_id: Any) -> None: ...
