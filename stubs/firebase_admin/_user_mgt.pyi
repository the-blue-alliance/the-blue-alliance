from firebase_admin import _auth_utils
from firebase_admin._user_import import ErrorInfo as ErrorInfo
from typing import Any, Optional

MAX_LIST_USERS_RESULTS: int
MAX_IMPORT_USERS_SIZE: int
B64_REDACTED: Any

class Sentinel:
    description: Any = ...
    def __init__(self, description: Any) -> None: ...

DELETE_ATTRIBUTE: Any

class UserMetadata:
    def __init__(self, creation_timestamp: Optional[Any] = ..., last_sign_in_timestamp: Optional[Any] = ..., last_refresh_timestamp: Optional[Any] = ...) -> None: ...
    @property
    def creation_timestamp(self): ...
    @property
    def last_sign_in_timestamp(self): ...
    @property
    def last_refresh_timestamp(self): ...

class UserInfo:
    @property
    def uid(self) -> None: ...
    @property
    def display_name(self) -> None: ...
    @property
    def email(self) -> None: ...
    @property
    def phone_number(self) -> None: ...
    @property
    def photo_url(self) -> None: ...
    @property
    def provider_id(self) -> None: ...

class UserRecord(UserInfo):
    def __init__(self, data: Any) -> None: ...
    @property
    def uid(self): ...
    @property
    def display_name(self): ...
    @property
    def email(self): ...
    @property
    def phone_number(self): ...
    @property
    def photo_url(self): ...
    @property
    def provider_id(self): ...
    @property
    def email_verified(self): ...
    @property
    def disabled(self): ...
    @property
    def tokens_valid_after_timestamp(self): ...
    @property
    def user_metadata(self): ...
    @property
    def provider_data(self): ...
    @property
    def custom_claims(self): ...
    @property
    def tenant_id(self): ...

class ExportedUserRecord(UserRecord):
    @property
    def password_hash(self): ...
    @property
    def password_salt(self): ...

class GetUsersResult:
    def __init__(self, users: Any, not_found: Any) -> None: ...
    @property
    def users(self): ...
    @property
    def not_found(self): ...

class ListUsersPage:
    def __init__(self, download: Any, page_token: Any, max_results: Any) -> None: ...
    @property
    def users(self): ...
    @property
    def next_page_token(self): ...
    @property
    def has_next_page(self): ...
    def get_next_page(self): ...
    def iterate_all(self): ...

class DeleteUsersResult:
    def __init__(self, result: Any, total: Any) -> None: ...
    @property
    def success_count(self): ...
    @property
    def failure_count(self): ...
    @property
    def errors(self): ...

class BatchDeleteAccountsResponse:
    errors: Any = ...
    def __init__(self, errors: Optional[Any] = ...) -> None: ...

class ProviderUserInfo(UserInfo):
    def __init__(self, data: Any) -> None: ...
    @property
    def uid(self): ...
    @property
    def display_name(self): ...
    @property
    def email(self): ...
    @property
    def phone_number(self): ...
    @property
    def photo_url(self): ...
    @property
    def provider_id(self): ...

class ActionCodeSettings:
    url: Any = ...
    handle_code_in_app: Any = ...
    dynamic_link_domain: Any = ...
    ios_bundle_id: Any = ...
    android_package_name: Any = ...
    android_install_app: Any = ...
    android_minimum_version: Any = ...
    def __init__(self, url: Any, handle_code_in_app: Optional[Any] = ..., dynamic_link_domain: Optional[Any] = ..., ios_bundle_id: Optional[Any] = ..., android_package_name: Optional[Any] = ..., android_install_app: Optional[Any] = ..., android_minimum_version: Optional[Any] = ...) -> None: ...

def encode_action_code_settings(settings: Any): ...

class UserManager:
    ID_TOOLKIT_URL: str = ...
    http_client: Any = ...
    base_url: Any = ...
    def __init__(self, http_client: Any, project_id: Any, tenant_id: Optional[Any] = ...) -> None: ...
    def get_user(self, **kwargs: Any): ...
    def get_users(self, identifiers: Any): ...
    def list_users(self, page_token: Optional[Any] = ..., max_results: Any = ...): ...
    def create_user(self, uid: Optional[Any] = ..., display_name: Optional[Any] = ..., email: Optional[Any] = ..., phone_number: Optional[Any] = ..., photo_url: Optional[Any] = ..., password: Optional[Any] = ..., disabled: Optional[Any] = ..., email_verified: Optional[Any] = ...): ...
    def update_user(self, uid: Any, display_name: Optional[Any] = ..., email: Optional[Any] = ..., phone_number: Optional[Any] = ..., photo_url: Optional[Any] = ..., password: Optional[Any] = ..., disabled: Optional[Any] = ..., email_verified: Optional[Any] = ..., valid_since: Optional[Any] = ..., custom_claims: Optional[Any] = ...): ...
    def delete_user(self, uid: Any) -> None: ...
    def delete_users(self, uids: Any, force_delete: bool = ...): ...
    def import_users(self, users: Any, hash_alg: Optional[Any] = ...): ...
    def generate_email_action_link(self, action_type: Any, email: Any, action_code_settings: Optional[Any] = ...): ...

class _UserIterator(_auth_utils.PageIterator):
    @property
    def items(self): ...
