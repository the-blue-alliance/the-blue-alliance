from typing import Any, Optional

def b64_encode(bytes_value: Any): ...

class UserProvider:
    def __init__(self, uid: Any, provider_id: Any, email: Optional[Any] = ..., display_name: Optional[Any] = ..., photo_url: Optional[Any] = ...) -> None: ...
    @property
    def uid(self): ...
    @uid.setter
    def uid(self, uid: Any) -> None: ...
    @property
    def provider_id(self): ...
    @provider_id.setter
    def provider_id(self, provider_id: Any) -> None: ...
    @property
    def email(self): ...
    @email.setter
    def email(self, email: Any) -> None: ...
    @property
    def display_name(self): ...
    @display_name.setter
    def display_name(self, display_name: Any) -> None: ...
    @property
    def photo_url(self): ...
    @photo_url.setter
    def photo_url(self, photo_url: Any) -> None: ...
    def to_dict(self): ...

class ImportUserRecord:
    email_verified: Any = ...
    disabled: Any = ...
    def __init__(self, uid: Any, email: Optional[Any] = ..., email_verified: Optional[Any] = ..., display_name: Optional[Any] = ..., phone_number: Optional[Any] = ..., photo_url: Optional[Any] = ..., disabled: Optional[Any] = ..., user_metadata: Optional[Any] = ..., provider_data: Optional[Any] = ..., custom_claims: Optional[Any] = ..., password_hash: Optional[Any] = ..., password_salt: Optional[Any] = ...) -> None: ...
    @property
    def uid(self): ...
    @uid.setter
    def uid(self, uid: Any) -> None: ...
    @property
    def email(self): ...
    @email.setter
    def email(self, email: Any) -> None: ...
    @property
    def display_name(self): ...
    @display_name.setter
    def display_name(self, display_name: Any) -> None: ...
    @property
    def phone_number(self): ...
    @phone_number.setter
    def phone_number(self, phone_number: Any) -> None: ...
    @property
    def photo_url(self): ...
    @photo_url.setter
    def photo_url(self, photo_url: Any) -> None: ...
    @property
    def password_hash(self): ...
    @password_hash.setter
    def password_hash(self, password_hash: Any) -> None: ...
    @property
    def password_salt(self): ...
    @password_salt.setter
    def password_salt(self, password_salt: Any) -> None: ...
    @property
    def user_metadata(self): ...
    @user_metadata.setter
    def user_metadata(self, user_metadata: Any) -> None: ...
    @property
    def provider_data(self): ...
    @provider_data.setter
    def provider_data(self, provider_data: Any) -> None: ...
    @property
    def custom_claims(self): ...
    @custom_claims.setter
    def custom_claims(self, custom_claims: Any) -> None: ...
    def to_dict(self): ...

class UserImportHash:
    def __init__(self, name: Any, data: Optional[Any] = ...) -> None: ...
    def to_dict(self): ...
    @classmethod
    def hmac_sha512(cls, key: Any): ...
    @classmethod
    def hmac_sha256(cls, key: Any): ...
    @classmethod
    def hmac_sha1(cls, key: Any): ...
    @classmethod
    def hmac_md5(cls, key: Any): ...
    @classmethod
    def md5(cls, rounds: Any): ...
    @classmethod
    def sha1(cls, rounds: Any): ...
    @classmethod
    def sha256(cls, rounds: Any): ...
    @classmethod
    def sha512(cls, rounds: Any): ...
    @classmethod
    def pbkdf_sha1(cls, rounds: Any): ...
    @classmethod
    def pbkdf2_sha256(cls, rounds: Any): ...
    @classmethod
    def scrypt(cls, key: Any, rounds: Any, memory_cost: Any, salt_separator: Optional[Any] = ...): ...
    @classmethod
    def bcrypt(cls): ...
    @classmethod
    def standard_scrypt(cls, memory_cost: Any, parallelization: Any, block_size: Any, derived_key_length: Any): ...

class ErrorInfo:
    def __init__(self, error: Any) -> None: ...
    @property
    def index(self): ...
    @property
    def reason(self): ...

class UserImportResult:
    def __init__(self, result: Any, total: Any) -> None: ...
    @property
    def success_count(self): ...
    @property
    def failure_count(self): ...
    @property
    def errors(self): ...
