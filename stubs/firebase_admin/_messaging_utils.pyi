from firebase_admin import exceptions as exceptions
from typing import Any, Optional

class Notification:
    title: Any = ...
    body: Any = ...
    image: Any = ...
    def __init__(self, title: Optional[Any] = ..., body: Optional[Any] = ..., image: Optional[Any] = ...) -> None: ...

class AndroidConfig:
    collapse_key: Any = ...
    priority: Any = ...
    ttl: Any = ...
    restricted_package_name: Any = ...
    data: Any = ...
    notification: Any = ...
    fcm_options: Any = ...
    def __init__(self, collapse_key: Optional[Any] = ..., priority: Optional[Any] = ..., ttl: Optional[Any] = ..., restricted_package_name: Optional[Any] = ..., data: Optional[Any] = ..., notification: Optional[Any] = ..., fcm_options: Optional[Any] = ...) -> None: ...

class AndroidNotification:
    title: Any = ...
    body: Any = ...
    icon: Any = ...
    color: Any = ...
    sound: Any = ...
    tag: Any = ...
    click_action: Any = ...
    body_loc_key: Any = ...
    body_loc_args: Any = ...
    title_loc_key: Any = ...
    title_loc_args: Any = ...
    channel_id: Any = ...
    image: Any = ...
    ticker: Any = ...
    sticky: Any = ...
    event_timestamp: Any = ...
    local_only: Any = ...
    priority: Any = ...
    vibrate_timings_millis: Any = ...
    default_vibrate_timings: Any = ...
    default_sound: Any = ...
    light_settings: Any = ...
    default_light_settings: Any = ...
    visibility: Any = ...
    notification_count: Any = ...
    def __init__(self, title: Optional[Any] = ..., body: Optional[Any] = ..., icon: Optional[Any] = ..., color: Optional[Any] = ..., sound: Optional[Any] = ..., tag: Optional[Any] = ..., click_action: Optional[Any] = ..., body_loc_key: Optional[Any] = ..., body_loc_args: Optional[Any] = ..., title_loc_key: Optional[Any] = ..., title_loc_args: Optional[Any] = ..., channel_id: Optional[Any] = ..., image: Optional[Any] = ..., ticker: Optional[Any] = ..., sticky: Optional[Any] = ..., event_timestamp: Optional[Any] = ..., local_only: Optional[Any] = ..., priority: Optional[Any] = ..., vibrate_timings_millis: Optional[Any] = ..., default_vibrate_timings: Optional[Any] = ..., default_sound: Optional[Any] = ..., light_settings: Optional[Any] = ..., default_light_settings: Optional[Any] = ..., visibility: Optional[Any] = ..., notification_count: Optional[Any] = ...) -> None: ...

class LightSettings:
    color: Any = ...
    light_on_duration_millis: Any = ...
    light_off_duration_millis: Any = ...
    def __init__(self, color: Any, light_on_duration_millis: Any, light_off_duration_millis: Any) -> None: ...

class AndroidFCMOptions:
    analytics_label: Any = ...
    def __init__(self, analytics_label: Optional[Any] = ...) -> None: ...

class WebpushConfig:
    headers: Any = ...
    data: Any = ...
    notification: Any = ...
    fcm_options: Any = ...
    def __init__(self, headers: Optional[Any] = ..., data: Optional[Any] = ..., notification: Optional[Any] = ..., fcm_options: Optional[Any] = ...) -> None: ...

class WebpushNotificationAction:
    action: Any = ...
    title: Any = ...
    icon: Any = ...
    def __init__(self, action: Any, title: Any, icon: Optional[Any] = ...) -> None: ...

class WebpushNotification:
    title: Any = ...
    body: Any = ...
    icon: Any = ...
    actions: Any = ...
    badge: Any = ...
    data: Any = ...
    direction: Any = ...
    image: Any = ...
    language: Any = ...
    renotify: Any = ...
    require_interaction: Any = ...
    silent: Any = ...
    tag: Any = ...
    timestamp_millis: Any = ...
    vibrate: Any = ...
    custom_data: Any = ...
    def __init__(self, title: Optional[Any] = ..., body: Optional[Any] = ..., icon: Optional[Any] = ..., actions: Optional[Any] = ..., badge: Optional[Any] = ..., data: Optional[Any] = ..., direction: Optional[Any] = ..., image: Optional[Any] = ..., language: Optional[Any] = ..., renotify: Optional[Any] = ..., require_interaction: Optional[Any] = ..., silent: Optional[Any] = ..., tag: Optional[Any] = ..., timestamp_millis: Optional[Any] = ..., vibrate: Optional[Any] = ..., custom_data: Optional[Any] = ...) -> None: ...

class WebpushFCMOptions:
    link: Any = ...
    def __init__(self, link: Optional[Any] = ...) -> None: ...

class APNSConfig:
    headers: Any = ...
    payload: Any = ...
    fcm_options: Any = ...
    def __init__(self, headers: Optional[Any] = ..., payload: Optional[Any] = ..., fcm_options: Optional[Any] = ...) -> None: ...

class APNSPayload:
    aps: Any = ...
    custom_data: Any = ...
    def __init__(self, aps: Any, **kwargs: Any) -> None: ...

class Aps:
    alert: Any = ...
    badge: Any = ...
    sound: Any = ...
    content_available: Any = ...
    category: Any = ...
    thread_id: Any = ...
    mutable_content: Any = ...
    custom_data: Any = ...
    def __init__(self, alert: Optional[Any] = ..., badge: Optional[Any] = ..., sound: Optional[Any] = ..., content_available: Optional[Any] = ..., category: Optional[Any] = ..., thread_id: Optional[Any] = ..., mutable_content: Optional[Any] = ..., custom_data: Optional[Any] = ...) -> None: ...

class CriticalSound:
    name: Any = ...
    critical: Any = ...
    volume: Any = ...
    def __init__(self, name: Any, critical: Optional[Any] = ..., volume: Optional[Any] = ...) -> None: ...

class ApsAlert:
    title: Any = ...
    subtitle: Any = ...
    body: Any = ...
    loc_key: Any = ...
    loc_args: Any = ...
    title_loc_key: Any = ...
    title_loc_args: Any = ...
    action_loc_key: Any = ...
    launch_image: Any = ...
    custom_data: Any = ...
    def __init__(self, title: Optional[Any] = ..., subtitle: Optional[Any] = ..., body: Optional[Any] = ..., loc_key: Optional[Any] = ..., loc_args: Optional[Any] = ..., title_loc_key: Optional[Any] = ..., title_loc_args: Optional[Any] = ..., action_loc_key: Optional[Any] = ..., launch_image: Optional[Any] = ..., custom_data: Optional[Any] = ...) -> None: ...

class APNSFCMOptions:
    analytics_label: Any = ...
    image: Any = ...
    def __init__(self, analytics_label: Optional[Any] = ..., image: Optional[Any] = ...) -> None: ...

class FCMOptions:
    analytics_label: Any = ...
    def __init__(self, analytics_label: Optional[Any] = ...) -> None: ...

class ThirdPartyAuthError(exceptions.UnauthenticatedError):
    def __init__(self, message: Any, cause: Optional[Any] = ..., http_response: Optional[Any] = ...) -> None: ...

class QuotaExceededError(exceptions.ResourceExhaustedError):
    def __init__(self, message: Any, cause: Optional[Any] = ..., http_response: Optional[Any] = ...) -> None: ...

class SenderIdMismatchError(exceptions.PermissionDeniedError):
    def __init__(self, message: Any, cause: Optional[Any] = ..., http_response: Optional[Any] = ...) -> None: ...

class UnregisteredError(exceptions.NotFoundError):
    def __init__(self, message: Any, cause: Optional[Any] = ..., http_response: Optional[Any] = ...) -> None: ...
