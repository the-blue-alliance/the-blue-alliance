import json
from typing import Any, Optional

class Message:
    data: Any = ...
    notification: Any = ...
    android: Any = ...
    webpush: Any = ...
    apns: Any = ...
    fcm_options: Any = ...
    token: Any = ...
    topic: Any = ...
    condition: Any = ...
    def __init__(self, data: Optional[Any] = ..., notification: Optional[Any] = ..., android: Optional[Any] = ..., webpush: Optional[Any] = ..., apns: Optional[Any] = ..., fcm_options: Optional[Any] = ..., token: Optional[Any] = ..., topic: Optional[Any] = ..., condition: Optional[Any] = ...) -> None: ...

class MulticastMessage:
    tokens: Any = ...
    data: Any = ...
    notification: Any = ...
    android: Any = ...
    webpush: Any = ...
    apns: Any = ...
    fcm_options: Any = ...
    def __init__(self, tokens: Any, data: Optional[Any] = ..., notification: Optional[Any] = ..., android: Optional[Any] = ..., webpush: Optional[Any] = ..., apns: Optional[Any] = ..., fcm_options: Optional[Any] = ...) -> None: ...

class _Validators:
    @classmethod
    def check_string(cls, label: Any, value: Any, non_empty: bool = ...): ...
    @classmethod
    def check_number(cls, label: Any, value: Any): ...
    @classmethod
    def check_string_dict(cls, label: Any, value: Any): ...
    @classmethod
    def check_string_list(cls, label: Any, value: Any): ...
    @classmethod
    def check_number_list(cls, label: Any, value: Any): ...
    @classmethod
    def check_analytics_label(cls, label: Any, value: Any): ...
    @classmethod
    def check_datetime(cls, label: Any, value: Any): ...

class MessageEncoder(json.JSONEncoder):
    @classmethod
    def remove_null_values(cls, dict_value: Any): ...
    @classmethod
    def encode_android(cls, android: Any): ...
    @classmethod
    def encode_android_fcm_options(cls, fcm_options: Any): ...
    @classmethod
    def encode_ttl(cls, ttl: Any): ...
    @classmethod
    def encode_milliseconds(cls, label: Any, msec: Any): ...
    @classmethod
    def encode_android_notification(cls, notification: Any): ...
    @classmethod
    def encode_light_settings(cls, light_settings: Any): ...
    @classmethod
    def encode_webpush(cls, webpush: Any): ...
    @classmethod
    def encode_webpush_notification(cls, notification: Any): ...
    @classmethod
    def encode_webpush_notification_actions(cls, actions: Any): ...
    @classmethod
    def encode_webpush_fcm_options(cls, options: Any): ...
    @classmethod
    def encode_apns(cls, apns: Any): ...
    @classmethod
    def encode_apns_payload(cls, payload: Any): ...
    @classmethod
    def encode_apns_fcm_options(cls, fcm_options: Any): ...
    @classmethod
    def encode_aps(cls, aps: Any): ...
    @classmethod
    def encode_aps_sound(cls, sound: Any): ...
    @classmethod
    def encode_aps_alert(cls, alert: Any): ...
    @classmethod
    def encode_notification(cls, notification: Any): ...
    @classmethod
    def sanitize_topic_name(cls, topic: Any): ...
    def default(self, o: Any): ...
    @classmethod
    def encode_fcm_options(cls, fcm_options: Any): ...
