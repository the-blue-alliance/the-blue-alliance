from _datetime import *
from _datetime import __doc__ as __doc__
from typing import Any, Optional

MINYEAR: int
MAXYEAR: int
dbm: int

class timedelta:
    def __new__(cls, days: int = ..., seconds: int = ..., microseconds: int = ..., milliseconds: int = ..., minutes: int = ..., hours: int = ..., weeks: int = ...): ...
    def total_seconds(self): ...
    @property
    def days(self): ...
    @property
    def seconds(self): ...
    @property
    def microseconds(self): ...
    def __add__(self, other: Any): ...
    __radd__: Any = ...
    def __sub__(self, other: Any): ...
    def __rsub__(self, other: Any): ...
    def __neg__(self): ...
    def __pos__(self): ...
    def __abs__(self): ...
    def __mul__(self, other: Any): ...
    __rmul__: Any = ...
    def __floordiv__(self, other: Any): ...
    def __truediv__(self, other: Any): ...
    def __mod__(self, other: Any): ...
    def __divmod__(self, other: Any): ...
    def __eq__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __lt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    def __bool__(self): ...
    def __reduce__(self): ...

class date:
    def __new__(cls, year: Any, month: Optional[Any] = ..., day: Optional[Any] = ...): ...
    @classmethod
    def fromtimestamp(cls, t: Any): ...
    @classmethod
    def today(cls): ...
    @classmethod
    def fromordinal(cls, n: Any): ...
    @classmethod
    def fromisoformat(cls, date_string: Any): ...
    def ctime(self): ...
    def strftime(self, fmt: Any): ...
    def __format__(self, fmt: Any): ...
    def isoformat(self): ...
    @property
    def year(self): ...
    @property
    def month(self): ...
    @property
    def day(self): ...
    def timetuple(self): ...
    def toordinal(self): ...
    def replace(self, year: Optional[Any] = ..., month: Optional[Any] = ..., day: Optional[Any] = ...): ...
    def __eq__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __lt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    def __add__(self, other: Any): ...
    __radd__: Any = ...
    def __sub__(self, other: Any): ...
    def weekday(self): ...
    def isoweekday(self): ...
    def isocalendar(self): ...
    def __reduce__(self): ...

class tzinfo:
    def tzname(self, dt: Any) -> None: ...
    def utcoffset(self, dt: Any) -> None: ...
    def dst(self, dt: Any) -> None: ...
    def fromutc(self, dt: Any): ...
    def __reduce__(self): ...

class time:
    def __new__(cls, hour: int = ..., minute: int = ..., second: int = ..., microsecond: int = ..., tzinfo: Optional[Any] = ..., *, fold: int = ...): ...
    @property
    def hour(self): ...
    @property
    def minute(self): ...
    @property
    def second(self): ...
    @property
    def microsecond(self): ...
    @property
    def tzinfo(self): ...
    @property
    def fold(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __lt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    def isoformat(self, timespec: str = ...): ...
    @classmethod
    def fromisoformat(cls, time_string: Any): ...
    def strftime(self, fmt: Any): ...
    def __format__(self, fmt: Any): ...
    def utcoffset(self): ...
    def tzname(self): ...
    def dst(self): ...
    def replace(self, hour: Optional[Any] = ..., minute: Optional[Any] = ..., second: Optional[Any] = ..., microsecond: Optional[Any] = ..., tzinfo: bool = ..., *, fold: Optional[Any] = ...): ...
    def __reduce_ex__(self, protocol: Any): ...
    def __reduce__(self): ...

class datetime(date):
    def __new__(cls, year: Any, month: Optional[Any] = ..., day: Optional[Any] = ..., hour: int = ..., minute: int = ..., second: int = ..., microsecond: int = ..., tzinfo: Optional[Any] = ..., *, fold: int = ...): ...
    @property
    def hour(self): ...
    @property
    def minute(self): ...
    @property
    def second(self): ...
    @property
    def microsecond(self): ...
    @property
    def tzinfo(self): ...
    @property
    def fold(self): ...
    @classmethod
    def fromtimestamp(cls, t: Any, tz: Optional[Any] = ...): ...
    @classmethod
    def utcfromtimestamp(cls, t: Any): ...
    @classmethod
    def now(cls, tz: Optional[Any] = ...): ...
    @classmethod
    def utcnow(cls): ...
    @classmethod
    def combine(cls, date: Any, time: Any, tzinfo: bool = ...): ...
    @classmethod
    def fromisoformat(cls, date_string: Any): ...
    def timetuple(self): ...
    def timestamp(self): ...
    def utctimetuple(self): ...
    def date(self): ...
    def time(self): ...
    def timetz(self): ...
    def replace(self, year: Optional[Any] = ..., month: Optional[Any] = ..., day: Optional[Any] = ..., hour: Optional[Any] = ..., minute: Optional[Any] = ..., second: Optional[Any] = ..., microsecond: Optional[Any] = ..., tzinfo: bool = ..., *, fold: Optional[Any] = ...): ...
    def astimezone(self, tz: Optional[Any] = ...): ...
    def ctime(self): ...
    def isoformat(self, sep: str = ..., timespec: str = ...): ...
    @classmethod
    def strptime(cls, date_string: Any, format: Any): ...
    def utcoffset(self): ...
    def tzname(self): ...
    def dst(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __lt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __add__(self, other: Any): ...
    __radd__: Any = ...
    def __sub__(self, other: Any): ...
    def __hash__(self) -> Any: ...
    def __reduce_ex__(self, protocol: Any): ...
    def __reduce__(self): ...

class timezone(tzinfo):
    def __new__(cls, offset: Any, name: Any = ...): ...
    def __getinitargs__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    def utcoffset(self, dt: Any): ...
    def tzname(self, dt: Any): ...
    def dst(self, dt: Any) -> None: ...
    def fromutc(self, dt: Any): ...
