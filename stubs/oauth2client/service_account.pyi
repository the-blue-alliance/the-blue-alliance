from oauth2client import client as client, crypt as crypt, transport as transport
from typing import Any, Optional

class ServiceAccountCredentials(client.AssertionCredentials):
    MAX_TOKEN_LIFETIME_SECS: int = ...
    NON_SERIALIZED_MEMBERS: Any = ...
    client_id: Any = ...
    def __init__(self, service_account_email: Any, signer: Any, scopes: str = ..., private_key_id: Optional[Any] = ..., client_id: Optional[Any] = ..., user_agent: Optional[Any] = ..., token_uri: Any = ..., revoke_uri: Any = ..., **kwargs: Any) -> None: ...
    @classmethod
    def from_json_keyfile_name(cls, filename: Any, scopes: str = ..., token_uri: Optional[Any] = ..., revoke_uri: Optional[Any] = ...): ...
    @classmethod
    def from_json_keyfile_dict(cls, keyfile_dict: Any, scopes: str = ..., token_uri: Optional[Any] = ..., revoke_uri: Optional[Any] = ...): ...
    @classmethod
    def from_p12_keyfile(cls, service_account_email: Any, filename: Any, private_key_password: Optional[Any] = ..., scopes: str = ..., token_uri: Any = ..., revoke_uri: Any = ...): ...
    @classmethod
    def from_p12_keyfile_buffer(cls, service_account_email: Any, file_buffer: Any, private_key_password: Optional[Any] = ..., scopes: str = ..., token_uri: Any = ..., revoke_uri: Any = ...): ...
    def sign_blob(self, blob: Any): ...
    @property
    def service_account_email(self): ...
    @property
    def serialization_data(self): ...
    @classmethod
    def from_json(cls, json_data: Any): ...
    def create_scoped_required(self): ...
    def create_scoped(self, scopes: Any): ...
    def create_with_claims(self, claims: Any): ...
    def create_delegated(self, sub: Any): ...

class _JWTAccessCredentials(ServiceAccountCredentials):
    def __init__(self, service_account_email: Any, signer: Any, scopes: Optional[Any] = ..., private_key_id: Optional[Any] = ..., client_id: Optional[Any] = ..., user_agent: Optional[Any] = ..., token_uri: Any = ..., revoke_uri: Any = ..., additional_claims: Optional[Any] = ...) -> None: ...
    def authorize(self, http: Any): ...
    def get_access_token(self, http: Optional[Any] = ..., additional_claims: Optional[Any] = ...): ...
    def revoke(self, http: Any) -> None: ...
    def create_scoped_required(self): ...
    def create_scoped(self, scopes: Any, token_uri: Any = ..., revoke_uri: Any = ...): ...
    def refresh(self, http: Any) -> None: ...
