from google.appengine.ext import db
from oauth2client import client as client, clientsecrets as clientsecrets, transport as transport
from oauth2client.contrib import xsrfutil as xsrfutil
from typing import Any, Optional

logger: Any
OAUTH2CLIENT_NAMESPACE: str
XSRF_MEMCACHE_ID: str
CredentialsNDBModel: Any
CredentialsNDBProperty: Any
FlowNDBProperty: Any
SiteXsrfSecretKeyNDB: Any

class SiteXsrfSecretKey(db.Model):
    secret: Any = ...

def xsrf_secret_key(): ...

class AppAssertionCredentials(client.AssertionCredentials):
    scope: Any = ...
    service_account_id: Any = ...
    def __init__(self, scope: Any, **kwargs: Any) -> None: ...
    @classmethod
    def from_json(cls, json_data: Any): ...
    @property
    def serialization_data(self) -> None: ...
    def create_scoped_required(self): ...
    def create_scoped(self, scopes: Any): ...
    def sign_blob(self, blob: Any): ...
    @property
    def service_account_email(self): ...

class FlowProperty(db.Property):
    data_type: Any = ...
    def get_value_for_datastore(self, model_instance: Any): ...
    def make_value_from_datastore(self, value: Any): ...
    def validate(self, value: Any): ...
    def empty(self, value: Any): ...

class CredentialsProperty(db.Property):
    data_type: Any = ...
    def get_value_for_datastore(self, model_instance: Any): ...
    def make_value_from_datastore(self, value: Any): ...
    def validate(self, value: Any): ...

class StorageByKeyName(client.Storage):
    def __init__(self, model: Any, key_name: Any, property_name: Any, cache: Optional[Any] = ..., user: Optional[Any] = ...) -> None: ...
    def locked_get(self): ...
    def locked_put(self, credentials: Any) -> None: ...
    def locked_delete(self) -> None: ...

class CredentialsModel(db.Model):
    credentials: Any = ...

class OAuth2Decorator:
    def set_credentials(self, credentials: Any) -> None: ...
    def get_credentials(self): ...
    credentials: Any = ...
    def set_flow(self, flow: Any) -> None: ...
    def get_flow(self): ...
    flow: Any = ...
    def __init__(self, client_id: Any, client_secret: Any, scope: Any, auth_uri: Any = ..., token_uri: Any = ..., revoke_uri: Any = ..., user_agent: Optional[Any] = ..., message: Optional[Any] = ..., callback_path: str = ..., token_response_param: Optional[Any] = ..., _storage_class: Any = ..., _credentials_class: Any = ..., _credentials_property_name: str = ..., **kwargs: Any) -> None: ...
    def oauth_required(self, method: Any): ...
    def oauth_aware(self, method: Any): ...
    def has_credentials(self): ...
    def authorize_url(self): ...
    def http(self, *args: Any, **kwargs: Any): ...
    @property
    def callback_path(self): ...
    def callback_handler(self): ...
    def callback_application(self): ...

class OAuth2DecoratorFromClientSecrets(OAuth2Decorator):
    def __init__(self, filename: Any, scope: Any, message: Optional[Any] = ..., cache: Optional[Any] = ..., **kwargs: Any) -> None: ...

def oauth2decorator_from_clientsecrets(filename: Any, scope: Any, message: Optional[Any] = ..., cache: Optional[Any] = ...): ...
